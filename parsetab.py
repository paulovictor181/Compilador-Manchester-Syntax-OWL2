
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALL AND CARDINALITY CLASS CLASS_IDENTIFIER CLOSE_BRACKET CLOSE_CURLY CLOSE_PAREN COMMA DISJOINTCLASSES DISJOINtWITH EQUAL EQUIVALENTTO EXACTLY GREATER_THAN INDIVIDUALS INDIVIDUAL_NAME LESS_THAN MAX MIN NAMESPACE NOT ONLY OPEN_BRACKET OPEN_CURLY OPEN_PAREN OR PROPERTY_IDENTIFIER PROPERTY_IDENTIFIER_SIMPLE SOME SUBCLASSOF THAT TYPE VALUEclasses : defined_class \n               | defined_class classes\n               | primitive_class \n               | primitive_class classes\n               primitive_class : CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_sectionsubclass_section : SUBCLASSOF enum_class\n                        | SUBCLASSOF CLASS_IDENTIFIER OR covered_class\n                        | SUBCLASSOF CLASS_IDENTIFIER def_descriptions_axioma ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN\n                        | SUBCLASSOF CLASS_IDENTIFIER \n                        | SUBCLASSOF quantifier_aux_axioma\n                        auxiliar_fechamento : CLASS_IDENTIFIER   \n                        | CLASS_IDENTIFIER OR auxiliar_fechamento\n    disjoint_section : DISJOINTCLASSES quantifier_aux\n                        | emptydisjoint_classes_list : CLASS_IDENTIFIER\n                             | CLASS_IDENTIFIER COMMA disjoint_classes_listdefined_class : CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section\n                     | CLASS CLASS_IDENTIFIER equivalentto_sectionenum_class : OPEN_CURLY individuals CLOSE_CURLYcovered_class : CLASS_IDENTIFIER OR covered_class\n                     | CLASS_IDENTIFIER\n                equivalentto_section : EQUIVALENTTO enum_class\n                            | EQUIVALENTTO CLASS_IDENTIFIER OR covered_class\n                            | EQUIVALENTTO CLASS_IDENTIFIER aninhada \n                            | EQUIVALENTTO CLASS_IDENTIFIER only_defined\n    def_descriptions : quantifier_aux            \n    def_descriptions_axioma : quantifier_aux_axioma            \n    only_defined : comma_and quantifier_aux            \n    aninhada : comma_and OPEN_PAREN OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN \n                | comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN              \n    quantifier_aux : comma_and quantifier_aux\n                      | OPEN_PAREN quantifier_aux CLOSE_PAREN\n                      | PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER\n                      | PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux\n                      | PROPERTY_IDENTIFIER quantifier namespace_type\n                      | PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type\n                      | PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER\n                      | quantifier_aux comma_and quantifier_aux\n                      | CLASS_IDENTIFIER quantifier quantifier_aux\n                      | CLASS_IDENTIFIER OR quantifier_aux\n                      | PROPERTY_IDENTIFIER quantifier quantifier_aux\n                      | CLASS_IDENTIFIER comma_and quantifier_aux\n                      | CLASS_IDENTIFIER\n                      | PROPERTY_IDENTIFIER\n    quantifier_aux_axioma : comma_and quantifier_aux_axioma\n                            | OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN\n                            | PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type\n                            | PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER\n                            | PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER\n                            | PROPERTY_IDENTIFIER quantifier_geral namespace_type                 \n                            | quantifier_aux_axioma comma_and quantifier_aux_axioma\n                            | CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma\n                            | CLASS_IDENTIFIER OR quantifier_aux_axioma\n                            | PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma\n                            | CLASS_IDENTIFIER comma_and quantifier_aux_axioma\n                            | CLASS_IDENTIFIER\n                            | PROPERTY_IDENTIFIER\n    quantifier : SOME\n                  | ALL\n                  | VALUE\n                  | THAT\n                  quantifier_number : MAX\n                  | MIN\n                  | EXACTLY\n                  quantifier_geral : SOME\n                  | ALL\n                  | VALUE\n                  | MAX\n                  | MIN\n                  | EXACTLY\n                  | THAT\n                  sizecheck : EQUAL CARDINALITY\n                  | GREATER_THAN CARDINALITY\n                  | LESS_THAN CARDINALITY\n                  | GREATER_THAN EQUAL CARDINALITY\n                  | LESS_THAN EQUAL CARDINALITYnamespace_type : NAMESPACE TYPE\n                      | NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKETindividuals_section : INDIVIDUALS individuals\n                           | emptyindividuals : INDIVIDUAL_NAME\n                   | INDIVIDUAL_NAME COMMA individualscomma_and : COMMA\n                     | ANDempty :'
    
_lr_action_items = {'CLASS':([0,2,3,8,9,12,13,15,16,19,20,22,24,27,29,30,31,34,35,37,38,41,42,57,63,65,79,80,82,83,87,88,89,91,92,93,94,96,97,98,100,101,102,103,104,106,107,108,112,113,116,117,118,119,121,122,123,129,133,138,141,150,],[4,4,4,-18,-85,-85,-85,-14,-22,-6,-9,-10,-57,-17,-80,-5,-13,-44,-43,-24,-25,-81,-56,-45,-79,-31,-21,-23,-28,-19,-21,-7,-53,-52,-55,-46,-51,-49,-50,-54,-38,-32,-33,-41,-35,-39,-40,-42,-82,-55,-47,-48,-77,-34,-36,-37,-20,-31,-8,-29,-78,-30,]),'$end':([1,2,3,5,6,8,9,12,13,15,16,19,20,22,24,27,29,30,31,34,35,37,38,41,42,57,63,65,79,80,82,83,87,88,89,91,92,93,94,96,97,98,100,101,102,103,104,106,107,108,112,113,116,117,118,119,121,122,123,129,133,138,141,150,],[0,-1,-3,-2,-4,-18,-85,-85,-85,-14,-22,-6,-9,-10,-57,-17,-80,-5,-13,-44,-43,-24,-25,-81,-56,-45,-79,-31,-21,-23,-28,-19,-21,-7,-53,-52,-55,-46,-51,-49,-50,-54,-38,-32,-33,-41,-35,-39,-40,-42,-82,-55,-47,-48,-77,-34,-36,-37,-20,-31,-8,-29,-78,-30,]),'CLASS_IDENTIFIER':([4,10,11,14,20,21,23,25,26,32,33,36,39,43,45,47,48,49,50,51,52,53,54,56,59,60,61,62,64,67,69,70,71,72,76,77,78,81,85,86,95,102,105,109,110,114,115,120,125,131,132,],[7,17,20,35,42,42,42,-83,-84,35,35,79,35,87,42,42,-65,-66,-67,-68,-69,-70,-71,42,96,-68,-69,-70,35,102,-58,-59,-60,-61,35,35,35,35,42,42,117,35,122,79,35,87,126,35,102,35,126,]),'EQUIVALENTTO':([7,],[10,]),'SUBCLASSOF':([7,8,16,34,35,37,38,65,79,80,82,83,100,101,102,103,104,106,107,108,118,119,121,122,123,129,138,141,150,],[11,11,-22,-44,-43,-24,-25,-31,-21,-23,-28,-19,-38,-32,-33,-41,-35,-39,-40,-42,-77,-34,-36,-37,-20,-31,-29,-78,-30,]),'DISJOINTCLASSES':([9,19,20,22,24,42,57,83,87,88,89,91,92,93,94,96,97,98,113,116,117,118,123,133,141,],[14,-6,-9,-10,-57,-56,-45,-19,-21,-7,-53,-52,-55,-46,-51,-49,-50,-54,-55,-47,-48,-77,-20,-8,-78,]),'INDIVIDUALS':([9,12,13,15,19,20,22,24,31,34,35,42,57,65,83,87,88,89,91,92,93,94,96,97,98,100,101,102,103,104,106,107,108,113,116,117,118,119,121,122,123,129,133,141,],[-85,28,28,-14,-6,-9,-10,-57,-13,-44,-43,-56,-45,-31,-19,-21,-7,-53,-52,-55,-46,-51,-49,-50,-54,-38,-32,-33,-41,-35,-39,-40,-42,-55,-47,-48,-77,-34,-36,-37,-20,-31,-8,-78,]),'OPEN_CURLY':([10,11,],[18,18,]),'OPEN_PAREN':([11,14,20,21,23,25,26,32,33,39,43,45,47,48,49,50,51,52,53,54,56,59,60,61,62,64,67,69,70,71,72,76,77,78,81,85,86,90,102,110,114,120,125,131,],[21,33,21,21,21,-83,-84,33,33,81,21,21,21,-65,-66,-67,-68,-69,-70,-71,21,21,-68,-69,-70,33,33,-58,-59,-60,-61,33,33,33,110,21,21,115,33,33,21,33,131,33,]),'PROPERTY_IDENTIFIER':([11,14,20,21,23,25,26,32,33,39,43,45,47,48,49,50,51,52,53,54,56,59,60,61,62,64,67,69,70,71,72,76,77,78,81,85,86,102,110,114,120,125,131,],[24,34,24,24,24,-83,-84,34,34,34,24,24,24,-65,-66,-67,-68,-69,-70,-71,24,24,-68,-69,-70,34,34,-58,-59,-60,-61,34,34,34,111,24,24,34,34,24,34,34,34,]),'COMMA':([11,14,17,20,21,22,23,24,25,26,31,32,33,34,35,39,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,64,65,66,67,69,70,71,72,76,77,78,81,82,85,86,87,89,91,92,93,94,96,97,98,100,101,102,103,104,106,107,108,110,111,113,114,116,117,118,119,120,121,122,124,125,129,130,131,139,141,147,],[25,25,25,25,25,25,25,-57,-83,-84,25,25,25,-44,25,25,84,25,25,25,25,25,-65,-66,-67,-68,-69,-70,-71,25,25,25,25,-68,-69,-70,25,25,25,25,-58,-59,-60,-61,25,25,25,25,25,25,25,25,25,25,25,-46,25,25,-50,25,25,-32,25,25,-35,25,25,25,25,-44,25,25,-47,-48,-77,25,25,-36,-37,25,25,25,-32,25,25,-78,-32,]),'AND':([11,14,17,20,21,22,23,24,25,26,31,32,33,34,35,39,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,64,65,66,67,69,70,71,72,76,77,78,81,82,85,86,87,89,91,92,93,94,96,97,98,100,101,102,103,104,106,107,108,110,111,113,114,116,117,118,119,120,121,122,124,125,129,130,131,139,141,147,],[26,26,26,26,26,26,26,-57,-83,-84,26,26,26,-44,26,26,26,26,26,26,26,-65,-66,-67,-68,-69,-70,-71,26,26,26,26,-68,-69,-70,26,26,26,26,-58,-59,-60,-61,26,26,26,26,26,26,26,26,26,26,26,-46,26,26,-50,26,26,-32,26,26,-35,26,26,26,26,-44,26,26,-47,-48,-77,26,26,-36,-37,26,26,26,-32,26,26,-78,-32,]),'OR':([17,20,35,42,79,87,96,102,126,],[36,43,77,85,109,114,85,77,132,]),'INDIVIDUAL_NAME':([18,28,84,],[41,41,41,]),'SOME':([20,24,34,35,42,87,96,102,111,],[48,48,69,69,48,48,48,69,69,]),'ALL':([20,24,34,35,42,87,96,102,111,],[49,49,70,70,49,49,49,70,70,]),'VALUE':([20,24,34,35,42,87,96,102,111,],[50,50,71,71,50,50,50,71,71,]),'MAX':([20,24,34,42,87,96,111,],[51,60,73,51,51,51,73,]),'MIN':([20,24,34,42,87,96,111,],[52,61,74,52,52,52,74,]),'EXACTLY':([20,24,34,42,87,96,111,],[53,62,75,53,53,53,75,]),'THAT':([20,24,34,35,42,87,96,102,111,],[54,54,72,72,54,54,54,72,72,]),'ONLY':([24,42,44,46,57,87,89,91,92,93,94,96,97,98,113,116,117,118,141,],[-57,-56,90,-27,-45,-56,-53,-52,-45,-46,-51,-49,-50,-54,-55,-47,-48,-77,-78,]),'CLOSE_PAREN':([24,34,35,42,55,57,65,66,89,91,93,94,96,97,98,100,101,102,103,104,106,107,108,111,113,116,117,118,119,121,122,124,126,127,129,130,139,140,141,147,],[-57,-44,-43,-56,93,-45,-31,101,-53,-52,-46,-51,-49,-50,-54,-38,-32,-33,-41,-35,-39,-40,-42,-44,-55,-47,-48,-77,-34,-36,-37,130,-11,133,-31,138,147,-12,-78,150,]),'CLOSE_CURLY':([40,41,112,],[83,-81,-82,]),'NAMESPACE':([48,49,50,54,59,60,61,62,67,69,70,71,72,95,105,125,],[-65,-66,-67,-71,99,-68,-69,-70,99,-58,-59,-60,-61,99,99,99,]),'CARDINALITY':([58,60,61,62,68,73,74,75,135,136,137,144,146,],[95,-62,-63,-64,105,-62,-63,-64,142,143,145,148,149,]),'TYPE':([99,],[118,]),'OPEN_BRACKET':([118,],[128,]),'EQUAL':([128,136,137,],[135,144,146,]),'GREATER_THAN':([128,],[136,]),'LESS_THAN':([128,],[137,]),'CLOSE_BRACKET':([134,142,143,145,148,149,],[141,-72,-73,-74,-75,-76,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'classes':([0,2,3,],[1,5,6,]),'defined_class':([0,2,3,],[2,2,2,]),'primitive_class':([0,2,3,],[3,3,3,]),'equivalentto_section':([7,],[8,]),'subclass_section':([7,8,],[9,12,]),'disjoint_section':([9,],[13,]),'empty':([9,12,13,],[15,29,29,]),'enum_class':([10,11,],[16,19,]),'quantifier_aux_axioma':([11,20,21,23,43,45,47,56,59,85,86,114,],[22,46,55,57,89,91,92,94,98,89,113,89,]),'comma_and':([11,14,17,20,21,22,23,31,32,33,35,39,42,43,45,46,47,55,56,57,59,64,65,66,67,76,77,78,81,82,85,86,87,89,91,92,94,96,98,100,102,103,106,107,108,110,113,114,119,120,124,125,129,131,139,],[23,32,39,47,23,56,23,64,32,32,78,32,86,23,23,56,23,56,23,56,23,32,64,64,32,32,32,32,32,64,23,23,86,56,56,56,56,86,56,64,120,64,64,64,64,32,56,23,64,32,64,32,64,32,64,]),'individuals_section':([12,13,],[27,30,]),'quantifier_aux':([14,32,33,39,64,67,76,77,78,81,102,110,120,125,131,],[31,65,66,82,100,103,106,107,108,66,119,124,129,103,139,]),'aninhada':([17,],[37,]),'only_defined':([17,],[38,]),'individuals':([18,28,84,],[40,63,112,]),'def_descriptions_axioma':([20,],[44,]),'quantifier_geral':([20,24,42,87,96,],[45,59,45,45,45,]),'quantifier_number':([24,34,111,],[58,68,68,]),'quantifier':([34,35,102,111,],[67,76,76,125,]),'covered_class':([36,43,109,114,],[80,88,123,123,]),'namespace_type':([59,67,95,105,125,],[97,104,116,121,104,]),'auxiliar_fechamento':([115,132,],[127,140,]),'sizecheck':([128,],[134,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> classes","S'",1,None,None,None),
  ('classes -> defined_class','classes',1,'p_classes','parser.py',11),
  ('classes -> defined_class classes','classes',2,'p_classes','parser.py',12),
  ('classes -> primitive_class','classes',1,'p_classes','parser.py',13),
  ('classes -> primitive_class classes','classes',2,'p_classes','parser.py',14),
  ('primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section','primitive_class',5,'p_primitive_class','parser.py',22),
  ('subclass_section -> SUBCLASSOF enum_class','subclass_section',2,'p_subclass_section','parser.py',32),
  ('subclass_section -> SUBCLASSOF CLASS_IDENTIFIER OR covered_class','subclass_section',4,'p_subclass_section','parser.py',33),
  ('subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions_axioma ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN','subclass_section',7,'p_subclass_section','parser.py',34),
  ('subclass_section -> SUBCLASSOF CLASS_IDENTIFIER','subclass_section',2,'p_subclass_section','parser.py',35),
  ('subclass_section -> SUBCLASSOF quantifier_aux_axioma','subclass_section',2,'p_subclass_section','parser.py',36),
  ('auxiliar_fechamento -> CLASS_IDENTIFIER','auxiliar_fechamento',1,'p_auxiliar_fechamento','parser.py',63),
  ('auxiliar_fechamento -> CLASS_IDENTIFIER OR auxiliar_fechamento','auxiliar_fechamento',3,'p_auxiliar_fechamento','parser.py',64),
  ('disjoint_section -> DISJOINTCLASSES quantifier_aux','disjoint_section',2,'p_disjoint_section','parser.py',72),
  ('disjoint_section -> empty','disjoint_section',1,'p_disjoint_section','parser.py',73),
  ('disjoint_classes_list -> CLASS_IDENTIFIER','disjoint_classes_list',1,'p_disjoint_classes_list','parser.py',80),
  ('disjoint_classes_list -> CLASS_IDENTIFIER COMMA disjoint_classes_list','disjoint_classes_list',3,'p_disjoint_classes_list','parser.py',81),
  ('defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section','defined_class',5,'p_defined_class','parser.py',89),
  ('defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section','defined_class',3,'p_defined_class','parser.py',90),
  ('enum_class -> OPEN_CURLY individuals CLOSE_CURLY','enum_class',3,'p_enum_class','parser.py',119),
  ('covered_class -> CLASS_IDENTIFIER OR covered_class','covered_class',3,'p_covered_class','parser.py',133),
  ('covered_class -> CLASS_IDENTIFIER','covered_class',1,'p_covered_class','parser.py',134),
  ('equivalentto_section -> EQUIVALENTTO enum_class','equivalentto_section',2,'p_equivalentto_section','parser.py',149),
  ('equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER OR covered_class','equivalentto_section',4,'p_equivalentto_section','parser.py',150),
  ('equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER aninhada','equivalentto_section',3,'p_equivalentto_section','parser.py',151),
  ('equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER only_defined','equivalentto_section',3,'p_equivalentto_section','parser.py',152),
  ('def_descriptions -> quantifier_aux','def_descriptions',1,'p_def_descriptions','parser.py',166),
  ('def_descriptions_axioma -> quantifier_aux_axioma','def_descriptions_axioma',1,'p_def_descriptions_axioma','parser.py',171),
  ('only_defined -> comma_and quantifier_aux','only_defined',2,'p_only_defined','parser.py',176),
  ('aninhada -> comma_and OPEN_PAREN OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN','aninhada',6,'p_aninhada','parser.py',180),
  ('aninhada -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN','aninhada',8,'p_aninhada','parser.py',181),
  ('quantifier_aux -> comma_and quantifier_aux','quantifier_aux',2,'p_quantifier_aux','parser.py',187),
  ('quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN','quantifier_aux',3,'p_quantifier_aux','parser.py',188),
  ('quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER','quantifier_aux',3,'p_quantifier_aux','parser.py',189),
  ('quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux','quantifier_aux',4,'p_quantifier_aux','parser.py',190),
  ('quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type','quantifier_aux',3,'p_quantifier_aux','parser.py',191),
  ('quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type','quantifier_aux',4,'p_quantifier_aux','parser.py',192),
  ('quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER','quantifier_aux',4,'p_quantifier_aux','parser.py',193),
  ('quantifier_aux -> quantifier_aux comma_and quantifier_aux','quantifier_aux',3,'p_quantifier_aux','parser.py',194),
  ('quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux','quantifier_aux',3,'p_quantifier_aux','parser.py',195),
  ('quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux','quantifier_aux',3,'p_quantifier_aux','parser.py',196),
  ('quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux','quantifier_aux',3,'p_quantifier_aux','parser.py',197),
  ('quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux','quantifier_aux',3,'p_quantifier_aux','parser.py',198),
  ('quantifier_aux -> CLASS_IDENTIFIER','quantifier_aux',1,'p_quantifier_aux','parser.py',199),
  ('quantifier_aux -> PROPERTY_IDENTIFIER','quantifier_aux',1,'p_quantifier_aux','parser.py',200),
  ('quantifier_aux_axioma -> comma_and quantifier_aux_axioma','quantifier_aux_axioma',2,'p_quantifier_aux_axioma','parser.py',213),
  ('quantifier_aux_axioma -> OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN','quantifier_aux_axioma',3,'p_quantifier_aux_axioma','parser.py',214),
  ('quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type','quantifier_aux_axioma',4,'p_quantifier_aux_axioma','parser.py',215),
  ('quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER','quantifier_aux_axioma',4,'p_quantifier_aux_axioma','parser.py',216),
  ('quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER','quantifier_aux_axioma',3,'p_quantifier_aux_axioma','parser.py',217),
  ('quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral namespace_type','quantifier_aux_axioma',3,'p_quantifier_aux_axioma','parser.py',218),
  ('quantifier_aux_axioma -> quantifier_aux_axioma comma_and quantifier_aux_axioma','quantifier_aux_axioma',3,'p_quantifier_aux_axioma','parser.py',219),
  ('quantifier_aux_axioma -> CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma','quantifier_aux_axioma',3,'p_quantifier_aux_axioma','parser.py',220),
  ('quantifier_aux_axioma -> CLASS_IDENTIFIER OR quantifier_aux_axioma','quantifier_aux_axioma',3,'p_quantifier_aux_axioma','parser.py',221),
  ('quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma','quantifier_aux_axioma',3,'p_quantifier_aux_axioma','parser.py',222),
  ('quantifier_aux_axioma -> CLASS_IDENTIFIER comma_and quantifier_aux_axioma','quantifier_aux_axioma',3,'p_quantifier_aux_axioma','parser.py',223),
  ('quantifier_aux_axioma -> CLASS_IDENTIFIER','quantifier_aux_axioma',1,'p_quantifier_aux_axioma','parser.py',224),
  ('quantifier_aux_axioma -> PROPERTY_IDENTIFIER','quantifier_aux_axioma',1,'p_quantifier_aux_axioma','parser.py',225),
  ('quantifier -> SOME','quantifier',1,'p_quantifier','parser.py',242),
  ('quantifier -> ALL','quantifier',1,'p_quantifier','parser.py',243),
  ('quantifier -> VALUE','quantifier',1,'p_quantifier','parser.py',244),
  ('quantifier -> THAT','quantifier',1,'p_quantifier','parser.py',245),
  ('quantifier_number -> MAX','quantifier_number',1,'p_quantifier_number','parser.py',250),
  ('quantifier_number -> MIN','quantifier_number',1,'p_quantifier_number','parser.py',251),
  ('quantifier_number -> EXACTLY','quantifier_number',1,'p_quantifier_number','parser.py',252),
  ('quantifier_geral -> SOME','quantifier_geral',1,'p_quantifier_geral','parser.py',257),
  ('quantifier_geral -> ALL','quantifier_geral',1,'p_quantifier_geral','parser.py',258),
  ('quantifier_geral -> VALUE','quantifier_geral',1,'p_quantifier_geral','parser.py',259),
  ('quantifier_geral -> MAX','quantifier_geral',1,'p_quantifier_geral','parser.py',260),
  ('quantifier_geral -> MIN','quantifier_geral',1,'p_quantifier_geral','parser.py',261),
  ('quantifier_geral -> EXACTLY','quantifier_geral',1,'p_quantifier_geral','parser.py',262),
  ('quantifier_geral -> THAT','quantifier_geral',1,'p_quantifier_geral','parser.py',263),
  ('sizecheck -> EQUAL CARDINALITY','sizecheck',2,'p_sizecheck','parser.py',269),
  ('sizecheck -> GREATER_THAN CARDINALITY','sizecheck',2,'p_sizecheck','parser.py',270),
  ('sizecheck -> LESS_THAN CARDINALITY','sizecheck',2,'p_sizecheck','parser.py',271),
  ('sizecheck -> GREATER_THAN EQUAL CARDINALITY','sizecheck',3,'p_sizecheck','parser.py',272),
  ('sizecheck -> LESS_THAN EQUAL CARDINALITY','sizecheck',3,'p_sizecheck','parser.py',273),
  ('namespace_type -> NAMESPACE TYPE','namespace_type',2,'p_namespace_type','parser.py',287),
  ('namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET','namespace_type',5,'p_namespace_type','parser.py',288),
  ('individuals_section -> INDIVIDUALS individuals','individuals_section',2,'p_individuals_section','parser.py',295),
  ('individuals_section -> empty','individuals_section',1,'p_individuals_section','parser.py',296),
  ('individuals -> INDIVIDUAL_NAME','individuals',1,'p_individuals','parser.py',303),
  ('individuals -> INDIVIDUAL_NAME COMMA individuals','individuals',3,'p_individuals','parser.py',304),
  ('comma_and -> COMMA','comma_and',1,'p_comma_and','parser.py',311),
  ('comma_and -> AND','comma_and',1,'p_comma_and','parser.py',312),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',317),
]
