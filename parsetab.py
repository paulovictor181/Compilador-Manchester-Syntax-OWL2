
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALL AND CARDINALITY CLASS CLASS_IDENTIFIER CLOSE_BRACKET CLOSE_CURLY CLOSE_PAREN COMMA DISJOINTCLASSES DISJOINtWITH EQUAL EQUIVALENTTO EXACTLY GREATER_THAN INDIVIDUALS INDIVIDUAL_NAME LESS_THAN MAX MIN NAMESPACE NOT ONLY OPEN_BRACKET OPEN_CURLY OPEN_PAREN OR PROPERTY_IDENTIFIER PROPERTY_IDENTIFIER_SIMPLE SOME SUBCLASSOF THAT TYPE VALUEclasses : defined_class \n               | defined_class classes\n               | primitive_class \n               | primitive_class classes\n               primitive_class : CLASS CLASS_IDENTIFIER subclass_section closure_axiom disjoint_section individuals_sectionsubclass_section : SUBCLASSOF def_descriptions\n                        | SUBCLASSOF enum_class\n                        | SUBCLASSOF covered_class\n                        | SUBCLASSOF CLASS_IDENTIFIER \n                        | emptydisjoint_section : DISJOINTCLASSES disjoint_classes_list\n                        | emptydisjoint_classes_list : CLASS_IDENTIFIER\n                             | CLASS_IDENTIFIER COMMA disjoint_classes_listdefined_class : CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section\n                       | CLASS CLASS_IDENTIFIER equivalentto_sectionenum_class : OPEN_CURLY individuals CLOSE_CURLYcovered_class : CLASS_IDENTIFIER OR covered_class\n                     | CLASS_IDENTIFIER\n                closure_axiom : ONLY OPEN_PAREN def_descriptions CLOSE_PARENaux_fechamento : OPEN_PAREN PROPERTY_IDENTIFIER aux_fechamento\n                      | OR PROPERTY_IDENTIFIER aux_fechamento\n                      | PROPERTY_IDENTIFIER CLOSE_PARENani_abertura : comma_and OPEN_PAREN def_descriptions CLOSE_PAREN quantifier ani_abertura\n                    | comma_and OPEN_PAREN def_descriptions CLOSE_PARENaninhada : CLASS_IDENTIFIER ani_abertura\n           equivalentto_section : EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions\n                            | EQUIVALENTTO enum_class\n                            | EQUIVALENTTO covered_class\n                            | EQUIVALENTTO aninhada\n    def_descriptions : class_aux\n                        | class_aux def_descriptions \n                        | quantifier_aux\n                        | quantifier_aux def_descriptions\n    class_aux : CLASS_IDENTIFIER\n                 | CLASS_IDENTIFIER OR class_aux\n                 | CLASS_IDENTIFIER comma_and class_aux\n                 | OPEN_PAREN class_aux CLOSE_PAREN\n     quantifier_aux : PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER\n                      | PROPERTY_IDENTIFIER quantifier namespace_type\n                      | OPEN_PAREN quantifier_aux CLOSE_PAREN\n                      | quantifier_aux comma_and quantifier_aux\n    quantifier : SOME\n                  | ALL\n                  | VALUE\n                  | MAX\n                  | MIN\n                  | EXACTLY\n                  | THAT\n                  sizecheck : EQUAL CARDINALITY\n                  | GREATER_THAN CARDINALITY\n                  | LESS_THAN CARDINALITY\n                  | GREATER_THAN EQUAL CARDINALITY\n                  | LESS_THAN EQUAL CARDINALITYnamespace_type : NAMESPACE TYPE\n                      | NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKETindividuals_section : INDIVIDUALS individuals\n                           | emptyindividuals : INDIVIDUAL_NAME\n                   | INDIVIDUAL_NAME COMMA individualscomma_and : COMMA\n                     | ANDempty :'
    
_lr_action_items = {'CLASS':([0,2,3,8,12,13,14,16,17,18,19,21,22,23,24,25,26,29,31,32,34,38,42,45,46,47,59,60,61,62,64,66,67,68,70,71,73,75,77,78,79,80,83,87,88,89,90,98,99,],[4,4,4,-16,-10,-63,-63,-19,-28,-29,-30,-6,-7,-8,-9,-31,-33,-15,-58,-63,-12,-26,-59,-32,-35,-34,-57,-5,-11,-13,-27,-19,-18,-17,-19,-36,-37,-42,-38,-41,-39,-40,-20,-60,-55,-14,-25,-24,-56,]),'$end':([1,2,3,5,6,8,12,13,14,16,17,18,19,21,22,23,24,25,26,29,31,32,34,38,42,45,46,47,59,60,61,62,64,66,67,68,70,71,73,75,77,78,79,80,83,87,88,89,90,98,99,],[0,-1,-3,-2,-4,-16,-10,-63,-63,-19,-28,-29,-30,-6,-7,-8,-9,-31,-33,-15,-58,-63,-12,-26,-59,-32,-35,-34,-57,-5,-11,-13,-27,-19,-18,-17,-19,-36,-37,-42,-38,-41,-39,-40,-20,-60,-55,-14,-25,-24,-56,]),'CLASS_IDENTIFIER':([4,10,11,24,25,26,27,33,35,36,37,39,40,43,44,46,51,52,53,54,55,56,57,58,65,70,71,72,73,74,75,77,78,79,80,82,85,86,88,99,105,],[7,16,24,-35,46,46,46,62,46,46,66,-61,-62,70,46,-35,79,-43,-44,-45,-46,-47,-48,-49,46,-35,-36,46,-37,46,-42,-38,-41,-39,-40,62,46,46,-55,-56,46,]),'EQUIVALENTTO':([7,],[10,]),'SUBCLASSOF':([7,8,16,17,18,19,25,26,38,45,46,47,64,66,67,68,71,73,75,77,78,79,80,88,90,98,99,],[11,11,-19,-28,-29,-30,-31,-33,-26,-32,-35,-34,-27,-19,-18,-17,-36,-37,-42,-38,-41,-39,-40,-55,-25,-24,-56,]),'ONLY':([7,9,12,21,22,23,24,25,26,45,46,47,67,68,70,71,73,75,77,78,79,80,88,99,],[-63,15,-10,-6,-7,-8,-9,-31,-33,-32,-35,-34,-18,-17,-19,-36,-37,-42,-38,-41,-39,-40,-55,-56,]),'INDIVIDUALS':([8,12,13,14,16,17,18,19,21,22,23,24,25,26,32,34,38,45,46,47,61,62,64,66,67,68,70,71,73,75,77,78,79,80,83,88,89,90,98,99,],[-63,-10,30,-63,-19,-28,-29,-30,-6,-7,-8,-9,-31,-33,30,-12,-26,-32,-35,-34,-11,-13,-27,-19,-18,-17,-19,-36,-37,-42,-38,-41,-39,-40,-20,-55,-14,-25,-24,-56,]),'OPEN_CURLY':([10,11,],[20,20,]),'OPEN_PAREN':([11,15,24,25,26,27,35,36,39,40,43,44,46,48,65,70,71,72,73,74,75,76,77,78,79,80,85,86,88,97,99,105,],[27,35,-35,27,27,27,27,65,-61,-62,72,72,-35,76,27,-35,-36,72,-37,72,-42,76,-38,-41,-39,-40,27,27,-55,105,-56,27,]),'PROPERTY_IDENTIFIER':([11,24,25,26,27,35,36,39,40,46,48,65,70,71,73,75,76,77,78,79,80,85,86,88,99,105,],[28,-35,28,28,28,28,28,-61,-62,-35,28,28,-35,-36,-37,-42,28,-38,-41,-39,-40,28,28,-55,-56,28,]),'DISJOINTCLASSES':([14,83,],[33,-20,]),'OR':([16,24,46,66,70,],[37,43,74,37,43,]),'COMMA':([16,24,26,42,46,50,52,53,54,55,56,57,58,62,70,75,78,79,80,86,88,92,99,],[39,39,39,69,39,39,-43,-44,-45,-46,-47,-48,-49,82,39,39,-41,-39,-40,39,-55,39,-56,]),'AND':([16,24,26,46,50,52,53,54,55,56,57,58,70,75,78,79,80,86,88,92,99,],[40,40,40,40,40,-43,-44,-45,-46,-47,-48,-49,40,40,-41,-39,-40,40,-55,40,-56,]),'INDIVIDUAL_NAME':([20,30,69,],[42,42,42,]),'CLOSE_PAREN':([25,26,45,46,47,49,50,63,71,73,75,77,78,79,80,84,85,86,88,99,],[-31,-33,-32,-35,-34,77,78,83,-36,-37,-42,-38,-41,-39,-40,90,77,78,-55,-56,]),'SOME':([28,90,],[52,52,]),'ALL':([28,90,],[53,53,]),'VALUE':([28,90,],[54,54,]),'MAX':([28,90,],[55,55,]),'MIN':([28,90,],[56,56,]),'EXACTLY':([28,90,],[57,57,]),'THAT':([28,90,],[58,58,]),'CLOSE_CURLY':([41,42,87,],[68,-59,-60,]),'NAMESPACE':([51,52,53,54,55,56,57,58,],[81,-43,-44,-45,-46,-47,-48,-49,]),'TYPE':([81,],[88,]),'OPEN_BRACKET':([88,],[91,]),'EQUAL':([91,95,96,],[94,102,104,]),'GREATER_THAN':([91,],[95,]),'LESS_THAN':([91,],[96,]),'CLOSE_BRACKET':([93,100,101,103,106,107,],[99,-50,-51,-52,-53,-54,]),'CARDINALITY':([94,95,96,102,104,],[100,101,103,106,107,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'classes':([0,2,3,],[1,5,6,]),'defined_class':([0,2,3,],[2,2,2,]),'primitive_class':([0,2,3,],[3,3,3,]),'equivalentto_section':([7,],[8,]),'subclass_section':([7,8,],[9,13,]),'empty':([7,8,13,14,32,],[12,12,31,34,31,]),'closure_axiom':([9,],[14,]),'enum_class':([10,11,],[17,22,]),'covered_class':([10,11,37,43,],[18,23,67,67,]),'aninhada':([10,],[19,]),'def_descriptions':([11,25,26,35,36,65,85,86,105,],[21,45,47,63,64,84,45,47,84,]),'class_aux':([11,25,26,27,35,36,43,44,65,72,74,85,86,105,],[25,25,25,49,25,25,71,73,85,49,71,25,25,25,]),'quantifier_aux':([11,25,26,27,35,36,48,65,76,85,86,105,],[26,26,26,50,26,26,75,86,50,26,26,26,]),'individuals_section':([13,32,],[29,60,]),'disjoint_section':([14,],[32,]),'comma_and':([16,24,26,46,50,70,75,86,92,],[36,44,48,44,48,44,48,48,97,]),'ani_abertura':([16,92,],[38,98,]),'individuals':([20,30,69,],[41,59,87,]),'quantifier':([28,90,],[51,92,]),'disjoint_classes_list':([33,82,],[61,89,]),'namespace_type':([51,],[80,]),'sizecheck':([91,],[93,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> classes","S'",1,None,None,None),
  ('classes -> defined_class','classes',1,'p_classes','parser.py',8),
  ('classes -> defined_class classes','classes',2,'p_classes','parser.py',9),
  ('classes -> primitive_class','classes',1,'p_classes','parser.py',10),
  ('classes -> primitive_class classes','classes',2,'p_classes','parser.py',11),
  ('primitive_class -> CLASS CLASS_IDENTIFIER subclass_section closure_axiom disjoint_section individuals_section','primitive_class',6,'p_primitive_class','parser.py',19),
  ('subclass_section -> SUBCLASSOF def_descriptions','subclass_section',2,'p_subclass_section','parser.py',29),
  ('subclass_section -> SUBCLASSOF enum_class','subclass_section',2,'p_subclass_section','parser.py',30),
  ('subclass_section -> SUBCLASSOF covered_class','subclass_section',2,'p_subclass_section','parser.py',31),
  ('subclass_section -> SUBCLASSOF CLASS_IDENTIFIER','subclass_section',2,'p_subclass_section','parser.py',32),
  ('subclass_section -> empty','subclass_section',1,'p_subclass_section','parser.py',33),
  ('disjoint_section -> DISJOINTCLASSES disjoint_classes_list','disjoint_section',2,'p_disjoint_section','parser.py',40),
  ('disjoint_section -> empty','disjoint_section',1,'p_disjoint_section','parser.py',41),
  ('disjoint_classes_list -> CLASS_IDENTIFIER','disjoint_classes_list',1,'p_disjoint_classes_list','parser.py',48),
  ('disjoint_classes_list -> CLASS_IDENTIFIER COMMA disjoint_classes_list','disjoint_classes_list',3,'p_disjoint_classes_list','parser.py',49),
  ('defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section','defined_class',5,'p_defined_class','parser.py',57),
  ('defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section','defined_class',3,'p_defined_class','parser.py',58),
  ('enum_class -> OPEN_CURLY individuals CLOSE_CURLY','enum_class',3,'p_enum_class','parser.py',87),
  ('covered_class -> CLASS_IDENTIFIER OR covered_class','covered_class',3,'p_covered_class','parser.py',101),
  ('covered_class -> CLASS_IDENTIFIER','covered_class',1,'p_covered_class','parser.py',102),
  ('closure_axiom -> ONLY OPEN_PAREN def_descriptions CLOSE_PAREN','closure_axiom',4,'p_closure_axiom','parser.py',115),
  ('aux_fechamento -> OPEN_PAREN PROPERTY_IDENTIFIER aux_fechamento','aux_fechamento',3,'p_aux_fechamento','parser.py',120),
  ('aux_fechamento -> OR PROPERTY_IDENTIFIER aux_fechamento','aux_fechamento',3,'p_aux_fechamento','parser.py',121),
  ('aux_fechamento -> PROPERTY_IDENTIFIER CLOSE_PAREN','aux_fechamento',2,'p_aux_fechamento','parser.py',122),
  ('ani_abertura -> comma_and OPEN_PAREN def_descriptions CLOSE_PAREN quantifier ani_abertura','ani_abertura',6,'p_ani_abertura','parser.py',145),
  ('ani_abertura -> comma_and OPEN_PAREN def_descriptions CLOSE_PAREN','ani_abertura',4,'p_ani_abertura','parser.py',146),
  ('aninhada -> CLASS_IDENTIFIER ani_abertura','aninhada',2,'p_aninhada','parser.py',154),
  ('equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions','equivalentto_section',4,'p_equivalentto_section','parser.py',163),
  ('equivalentto_section -> EQUIVALENTTO enum_class','equivalentto_section',2,'p_equivalentto_section','parser.py',164),
  ('equivalentto_section -> EQUIVALENTTO covered_class','equivalentto_section',2,'p_equivalentto_section','parser.py',165),
  ('equivalentto_section -> EQUIVALENTTO aninhada','equivalentto_section',2,'p_equivalentto_section','parser.py',166),
  ('def_descriptions -> class_aux','def_descriptions',1,'p_def_descriptions','parser.py',172),
  ('def_descriptions -> class_aux def_descriptions','def_descriptions',2,'p_def_descriptions','parser.py',173),
  ('def_descriptions -> quantifier_aux','def_descriptions',1,'p_def_descriptions','parser.py',174),
  ('def_descriptions -> quantifier_aux def_descriptions','def_descriptions',2,'p_def_descriptions','parser.py',175),
  ('class_aux -> CLASS_IDENTIFIER','class_aux',1,'p_class_aux','parser.py',181),
  ('class_aux -> CLASS_IDENTIFIER OR class_aux','class_aux',3,'p_class_aux','parser.py',182),
  ('class_aux -> CLASS_IDENTIFIER comma_and class_aux','class_aux',3,'p_class_aux','parser.py',183),
  ('class_aux -> OPEN_PAREN class_aux CLOSE_PAREN','class_aux',3,'p_class_aux','parser.py',184),
  ('quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER','quantifier_aux',3,'p_quantifier_aux','parser.py',191),
  ('quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type','quantifier_aux',3,'p_quantifier_aux','parser.py',192),
  ('quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN','quantifier_aux',3,'p_quantifier_aux','parser.py',193),
  ('quantifier_aux -> quantifier_aux comma_and quantifier_aux','quantifier_aux',3,'p_quantifier_aux','parser.py',194),
  ('quantifier -> SOME','quantifier',1,'p_quantifier','parser.py',204),
  ('quantifier -> ALL','quantifier',1,'p_quantifier','parser.py',205),
  ('quantifier -> VALUE','quantifier',1,'p_quantifier','parser.py',206),
  ('quantifier -> MAX','quantifier',1,'p_quantifier','parser.py',207),
  ('quantifier -> MIN','quantifier',1,'p_quantifier','parser.py',208),
  ('quantifier -> EXACTLY','quantifier',1,'p_quantifier','parser.py',209),
  ('quantifier -> THAT','quantifier',1,'p_quantifier','parser.py',210),
  ('sizecheck -> EQUAL CARDINALITY','sizecheck',2,'p_sizecheck','parser.py',216),
  ('sizecheck -> GREATER_THAN CARDINALITY','sizecheck',2,'p_sizecheck','parser.py',217),
  ('sizecheck -> LESS_THAN CARDINALITY','sizecheck',2,'p_sizecheck','parser.py',218),
  ('sizecheck -> GREATER_THAN EQUAL CARDINALITY','sizecheck',3,'p_sizecheck','parser.py',219),
  ('sizecheck -> LESS_THAN EQUAL CARDINALITY','sizecheck',3,'p_sizecheck','parser.py',220),
  ('namespace_type -> NAMESPACE TYPE','namespace_type',2,'p_namespace_type','parser.py',234),
  ('namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET','namespace_type',5,'p_namespace_type','parser.py',235),
  ('individuals_section -> INDIVIDUALS individuals','individuals_section',2,'p_individuals_section','parser.py',240),
  ('individuals_section -> empty','individuals_section',1,'p_individuals_section','parser.py',241),
  ('individuals -> INDIVIDUAL_NAME','individuals',1,'p_individuals','parser.py',248),
  ('individuals -> INDIVIDUAL_NAME COMMA individuals','individuals',3,'p_individuals','parser.py',249),
  ('comma_and -> COMMA','comma_and',1,'p_comma_and','parser.py',256),
  ('comma_and -> AND','comma_and',1,'p_comma_and','parser.py',257),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',262),
]
