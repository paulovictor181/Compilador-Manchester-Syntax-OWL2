
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALL AND CARDINALITY CLASS CLASS_IDENTIFIER CLOSE_BRACKET CLOSE_CURLY CLOSE_PAREN COMMA DISJOINTCLASSES DISJOINtWITH EQUAL EQUIVALENTTO EXACTLY GREATER_THAN INDIVIDUALS INDIVIDUAL_NAME LESS_THAN MAX MIN NAMESPACE NOT ONLY OPEN_BRACKET OPEN_CURLY OPEN_PAREN OR PROPERTY_IDENTIFIER PROPERTY_IDENTIFIER_SIMPLE SOME SUBCLASSOF THAT TYPE VALUEclasses : defined_class \n               | defined_class classes\n               | primitive_class \n               | primitive_class classes\n               primitive_class : CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_sectionsubclass_section : SUBCLASSOF enum_class\n                        | SUBCLASSOF CLASS_IDENTIFIER OR covered_class\n                        | SUBCLASSOF CLASS_IDENTIFIER def_descriptions_axioma ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN\n                        | SUBCLASSOF CLASS_IDENTIFIER \n                        | SUBCLASSOF quantifier_aux_axioma\n                        auxiliar_fechamento : CLASS_IDENTIFIER   \n                        | CLASS_IDENTIFIER OR auxiliar_fechamento\n    disjoint_section : DISJOINTCLASSES quantifier_aux\n                        | emptydisjoint_classes_list : CLASS_IDENTIFIER\n                             | CLASS_IDENTIFIER COMMA disjoint_classes_listdefined_class : CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section\n                     | CLASS CLASS_IDENTIFIER equivalentto_sectionenum_class : OPEN_CURLY individuals CLOSE_CURLYcovered_class : CLASS_IDENTIFIER OR covered_class\n                     | CLASS_IDENTIFIER\n                equivalentto_section : EQUIVALENTTO enum_class\n                            | EQUIVALENTTO CLASS_IDENTIFIER OR covered_class\n                            | EQUIVALENTTO CLASS_IDENTIFIER only_defined\n                            | EQUIVALENTTO CLASS_IDENTIFIER aninhada \n    def_descriptions : quantifier_aux            \n    def_descriptions_axioma : quantifier_aux_axioma            \n    aninhada : comma_and  OPEN_PAREN quantifier_aux CLOSE_PAREN\n                | comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN              \n    only_defined : comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier_aux CLASS_IDENTIFIER CLOSE_PAREN            \n    quantifier_aux : comma_and quantifier_aux\n                      | OPEN_PAREN quantifier_aux CLOSE_PAREN\n                      | PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER\n                      | PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux\n                      | PROPERTY_IDENTIFIER quantifier namespace_type\n                      | PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type\n                      | PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER\n                      | quantifier_aux comma_and quantifier_aux\n                      | CLASS_IDENTIFIER quantifier quantifier_aux\n                      | CLASS_IDENTIFIER OR quantifier_aux\n                      | PROPERTY_IDENTIFIER quantifier quantifier_aux\n                      | CLASS_IDENTIFIER comma_and quantifier_aux\n                      | CLASS_IDENTIFIER\n                      | PROPERTY_IDENTIFIER\n                      | quantifier\n    quantifier_aux_axioma : comma_and quantifier_aux_axioma\n                            | OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN\n                            | PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type\n                            | PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER\n                            | PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER\n                            | PROPERTY_IDENTIFIER quantifier_geral namespace_type                 \n                            | quantifier_aux_axioma comma_and quantifier_aux_axioma\n                            | CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma\n                            | CLASS_IDENTIFIER OR quantifier_aux_axioma\n                            | PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma\n                            | CLASS_IDENTIFIER comma_and quantifier_aux_axioma\n                            | CLASS_IDENTIFIER\n                            | PROPERTY_IDENTIFIER\n    quantifier : SOME\n                  | ALL\n                  | VALUE\n                  | THAT\n                  quantifier_number : MAX\n                  | MIN\n                  | EXACTLY\n                  quantifier_geral : SOME\n                  | ALL\n                  | VALUE\n                  | MAX\n                  | MIN\n                  | EXACTLY\n                  | THAT\n                  sizecheck : EQUAL CARDINALITY\n                  | GREATER_THAN CARDINALITY\n                  | LESS_THAN CARDINALITY\n                  | GREATER_THAN EQUAL CARDINALITY\n                  | LESS_THAN EQUAL CARDINALITYnamespace_type : NAMESPACE TYPE\n                      | NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKETindividuals_section : INDIVIDUALS individuals\n                           | emptyindividuals : INDIVIDUAL_NAME\n                   | INDIVIDUAL_NAME COMMA individualscomma_and : COMMA\n                     | ANDempty :'
    
_lr_action_items = {'CLASS':([0,2,3,8,9,12,13,15,16,19,20,22,24,27,29,30,31,34,35,36,37,38,39,40,42,43,46,47,62,68,70,80,81,83,87,88,89,91,92,93,94,96,97,98,100,101,102,103,104,106,107,108,112,113,116,117,118,119,120,122,123,124,127,131,135,140,143,152,],[4,4,4,-18,-86,-86,-86,-14,-22,-6,-9,-10,-58,-17,-81,-5,-13,-44,-45,-43,-59,-60,-61,-62,-24,-25,-82,-57,-46,-80,-31,-21,-23,-19,-21,-7,-54,-53,-56,-47,-52,-50,-51,-55,-38,-32,-33,-41,-35,-39,-40,-42,-83,-56,-48,-49,-78,-45,-34,-36,-37,-20,-28,-31,-8,-30,-79,-29,]),'$end':([1,2,3,5,6,8,9,12,13,15,16,19,20,22,24,27,29,30,31,34,35,36,37,38,39,40,42,43,46,47,62,68,70,80,81,83,87,88,89,91,92,93,94,96,97,98,100,101,102,103,104,106,107,108,112,113,116,117,118,119,120,122,123,124,127,131,135,140,143,152,],[0,-1,-3,-2,-4,-18,-86,-86,-86,-14,-22,-6,-9,-10,-58,-17,-81,-5,-13,-44,-45,-43,-59,-60,-61,-62,-24,-25,-82,-57,-46,-80,-31,-21,-23,-19,-21,-7,-54,-53,-56,-47,-52,-50,-51,-55,-38,-32,-33,-41,-35,-39,-40,-42,-83,-56,-48,-49,-78,-45,-34,-36,-37,-20,-28,-31,-8,-30,-79,-29,]),'CLASS_IDENTIFIER':([4,10,11,14,20,21,23,25,26,32,33,34,35,36,37,38,39,40,41,48,50,52,53,54,55,56,57,58,59,61,64,65,66,67,69,70,72,77,78,79,82,85,86,95,100,101,102,103,104,105,106,107,108,109,110,114,115,118,119,120,121,122,123,125,126,131,133,134,143,149,],[7,17,20,36,47,47,47,-84,-85,36,36,-44,-45,-43,-59,-60,-61,-62,80,87,47,47,-66,-67,-68,-69,-70,-71,-72,47,96,-69,-70,-71,36,-31,102,36,36,36,36,47,47,117,-38,-32,36,-41,-35,123,-39,-40,-42,80,36,87,128,-78,36,-34,36,-36,-37,132,102,-31,36,128,-79,-32,]),'EQUIVALENTTO':([7,],[10,]),'SUBCLASSOF':([7,8,16,42,43,80,81,83,124,127,140,152,],[11,11,-22,-24,-25,-21,-23,-19,-20,-28,-30,-29,]),'DISJOINTCLASSES':([9,19,20,22,24,47,62,83,87,88,89,91,92,93,94,96,97,98,113,116,117,118,124,135,143,],[14,-6,-9,-10,-58,-57,-46,-19,-21,-7,-54,-53,-56,-47,-52,-50,-51,-55,-56,-48,-49,-78,-20,-8,-79,]),'INDIVIDUALS':([9,12,13,15,19,20,22,24,31,34,35,36,37,38,39,40,47,62,70,83,87,88,89,91,92,93,94,96,97,98,100,101,102,103,104,106,107,108,113,116,117,118,119,120,122,123,124,131,135,143,],[-86,28,28,-14,-6,-9,-10,-58,-13,-44,-45,-43,-59,-60,-61,-62,-57,-46,-31,-19,-21,-7,-54,-53,-56,-47,-52,-50,-51,-55,-38,-32,-33,-41,-35,-39,-40,-42,-56,-48,-49,-78,-45,-34,-36,-37,-20,-31,-8,-79,]),'OPEN_CURLY':([10,11,],[18,18,]),'OPEN_PAREN':([11,14,20,21,23,25,26,32,33,37,38,39,40,44,48,50,52,53,54,55,56,57,58,59,61,64,65,66,67,69,72,77,78,79,82,85,86,90,102,110,114,119,121,126,133,],[21,33,21,21,21,-84,-85,33,33,-59,-60,-61,-62,82,21,21,21,-66,-67,-68,-69,-70,-71,-72,21,21,-69,-70,-71,33,33,33,33,33,33,21,21,115,33,33,21,33,33,133,33,]),'PROPERTY_IDENTIFIER':([11,14,20,21,23,25,26,32,33,37,38,39,40,48,50,52,53,54,55,56,57,58,59,61,64,65,66,67,69,72,77,78,79,82,85,86,102,110,114,119,121,126,133,],[24,34,24,24,24,-84,-85,34,34,-59,-60,-61,-62,24,24,24,-66,-67,-68,-69,-70,-71,-72,24,24,-69,-70,-71,34,34,34,34,34,110,24,24,34,34,24,34,34,34,34,]),'COMMA':([11,14,17,20,21,22,23,24,25,26,31,32,33,34,35,36,37,38,39,40,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,69,70,71,72,77,78,79,82,85,86,87,89,91,92,93,94,96,97,98,100,101,102,103,104,106,107,108,110,111,113,114,116,117,118,119,120,121,122,123,125,126,131,133,141,143,149,],[25,25,25,25,25,25,25,-58,-84,-85,25,25,25,-44,-45,25,-59,-60,-61,-62,84,25,25,25,25,25,-66,-67,-68,-69,-70,-71,-72,25,25,25,25,-69,-70,-71,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-47,25,25,-51,25,25,-32,25,25,-35,25,25,25,25,25,25,25,-48,-49,-78,25,25,25,-36,-37,25,25,25,25,25,-79,-32,]),'AND':([11,14,17,20,21,22,23,24,25,26,31,32,33,34,35,36,37,38,39,40,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,69,70,71,72,77,78,79,82,85,86,87,89,91,92,93,94,96,97,98,100,101,102,103,104,106,107,108,110,111,113,114,116,117,118,119,120,121,122,123,125,126,131,133,141,143,149,],[26,26,26,26,26,26,26,-58,-84,-85,26,26,26,-44,-45,26,-59,-60,-61,-62,26,26,26,26,26,-66,-67,-68,-69,-70,-71,-72,26,26,26,26,-69,-70,-71,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-47,26,26,-51,26,26,-32,26,26,-35,26,26,26,26,26,26,26,-48,-49,-78,26,26,26,-36,-37,26,26,26,26,26,-79,-32,]),'SOME':([14,20,24,25,26,32,33,34,36,37,38,39,40,47,69,72,77,78,79,82,87,96,102,110,119,121,126,133,],[37,53,53,-84,-85,37,37,37,37,-59,-60,-61,-62,53,37,37,37,37,37,37,53,53,37,37,37,37,37,37,]),'ALL':([14,20,24,25,26,32,33,34,36,37,38,39,40,47,69,72,77,78,79,82,87,96,102,110,119,121,126,133,],[38,54,54,-84,-85,38,38,38,38,-59,-60,-61,-62,54,38,38,38,38,38,38,54,54,38,38,38,38,38,38,]),'VALUE':([14,20,24,25,26,32,33,34,36,37,38,39,40,47,69,72,77,78,79,82,87,96,102,110,119,121,126,133,],[39,55,55,-84,-85,39,39,39,39,-59,-60,-61,-62,55,39,39,39,39,39,39,55,55,39,39,39,39,39,39,]),'THAT':([14,20,24,25,26,32,33,34,36,37,38,39,40,47,69,72,77,78,79,82,87,96,102,110,119,121,126,133,],[40,59,59,-84,-85,40,40,40,40,-59,-60,-61,-62,59,40,40,40,40,40,40,59,59,40,40,40,40,40,40,]),'OR':([17,20,36,47,80,87,96,102,128,],[41,48,78,85,109,114,85,78,134,]),'INDIVIDUAL_NAME':([18,28,84,],[46,46,46,]),'MAX':([20,24,34,47,87,96,110,],[56,65,74,56,56,56,74,]),'MIN':([20,24,34,47,87,96,110,],[57,66,75,57,57,57,75,]),'EXACTLY':([20,24,34,47,87,96,110,],[58,67,76,58,58,58,76,]),'ONLY':([24,47,49,51,62,87,89,91,92,93,94,96,97,98,113,116,117,118,143,],[-58,-57,90,-27,-46,-57,-54,-53,-46,-47,-52,-50,-51,-55,-56,-48,-49,-78,-79,]),'CLOSE_PAREN':([24,34,35,36,37,38,39,40,47,60,62,70,71,89,91,93,94,96,97,98,100,101,102,103,104,106,107,108,110,111,113,116,117,118,119,120,122,123,128,129,131,132,141,142,143,149,],[-58,-44,-45,-43,-59,-60,-61,-62,-57,93,-46,-31,101,-54,-53,-47,-52,-50,-51,-55,-38,-32,-33,-41,-35,-39,-40,-42,-44,127,-56,-48,-49,-78,-45,-34,-36,-37,-11,135,-31,140,149,-12,-79,152,]),'NAMESPACE':([37,38,39,40,53,54,55,59,64,65,66,67,72,95,105,126,],[-59,-60,-61,-62,-66,-67,-68,-72,99,-69,-70,-71,99,99,99,99,]),'CLOSE_CURLY':([45,46,112,],[83,-82,-83,]),'CARDINALITY':([63,65,66,67,73,74,75,76,137,138,139,146,148,],[95,-63,-64,-65,105,-63,-64,-65,144,145,147,150,151,]),'TYPE':([99,],[118,]),'OPEN_BRACKET':([118,],[130,]),'EQUAL':([130,138,139,],[137,146,148,]),'GREATER_THAN':([130,],[138,]),'LESS_THAN':([130,],[139,]),'CLOSE_BRACKET':([136,144,145,147,150,151,],[143,-73,-74,-75,-76,-77,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'classes':([0,2,3,],[1,5,6,]),'defined_class':([0,2,3,],[2,2,2,]),'primitive_class':([0,2,3,],[3,3,3,]),'equivalentto_section':([7,],[8,]),'subclass_section':([7,8,],[9,12,]),'disjoint_section':([9,],[13,]),'empty':([9,12,13,],[15,29,29,]),'enum_class':([10,11,],[16,19,]),'quantifier_aux_axioma':([11,20,21,23,48,50,52,61,64,85,86,114,],[22,51,60,62,89,91,92,94,98,89,113,89,]),'comma_and':([11,14,17,20,21,22,23,31,32,33,36,47,48,50,51,52,60,61,62,64,69,70,71,72,77,78,79,82,85,86,87,89,91,92,94,96,98,100,102,103,106,107,108,110,111,113,114,119,120,121,125,126,131,133,141,],[23,32,44,52,23,61,23,69,32,32,79,86,23,23,61,23,61,23,61,23,32,69,69,32,32,32,32,32,23,23,86,61,61,61,61,86,61,69,121,69,69,69,69,32,69,61,23,32,69,32,69,32,69,32,69,]),'individuals_section':([12,13,],[27,30,]),'quantifier_aux':([14,32,33,69,72,77,78,79,82,102,110,119,121,126,133,],[31,70,71,100,103,106,107,108,111,120,125,106,131,103,141,]),'quantifier':([14,32,33,34,36,69,72,77,78,79,82,102,110,119,121,126,133,],[35,35,35,72,77,35,35,35,35,35,35,119,126,35,35,35,35,]),'only_defined':([17,],[42,]),'aninhada':([17,],[43,]),'individuals':([18,28,84,],[45,68,112,]),'def_descriptions_axioma':([20,],[49,]),'quantifier_geral':([20,24,47,87,96,],[50,64,50,50,50,]),'quantifier_number':([24,34,110,],[63,73,73,]),'covered_class':([41,48,109,114,],[81,88,124,124,]),'namespace_type':([64,72,95,105,126,],[97,104,116,122,104,]),'auxiliar_fechamento':([115,134,],[129,142,]),'sizecheck':([130,],[136,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> classes","S'",1,None,None,None),
  ('classes -> defined_class','classes',1,'p_classes','parser.py',11),
  ('classes -> defined_class classes','classes',2,'p_classes','parser.py',12),
  ('classes -> primitive_class','classes',1,'p_classes','parser.py',13),
  ('classes -> primitive_class classes','classes',2,'p_classes','parser.py',14),
  ('primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section','primitive_class',5,'p_primitive_class','parser.py',22),
  ('subclass_section -> SUBCLASSOF enum_class','subclass_section',2,'p_subclass_section','parser.py',32),
  ('subclass_section -> SUBCLASSOF CLASS_IDENTIFIER OR covered_class','subclass_section',4,'p_subclass_section','parser.py',33),
  ('subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions_axioma ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN','subclass_section',7,'p_subclass_section','parser.py',34),
  ('subclass_section -> SUBCLASSOF CLASS_IDENTIFIER','subclass_section',2,'p_subclass_section','parser.py',35),
  ('subclass_section -> SUBCLASSOF quantifier_aux_axioma','subclass_section',2,'p_subclass_section','parser.py',36),
  ('auxiliar_fechamento -> CLASS_IDENTIFIER','auxiliar_fechamento',1,'p_auxiliar_fechamento','parser.py',63),
  ('auxiliar_fechamento -> CLASS_IDENTIFIER OR auxiliar_fechamento','auxiliar_fechamento',3,'p_auxiliar_fechamento','parser.py',64),
  ('disjoint_section -> DISJOINTCLASSES quantifier_aux','disjoint_section',2,'p_disjoint_section','parser.py',72),
  ('disjoint_section -> empty','disjoint_section',1,'p_disjoint_section','parser.py',73),
  ('disjoint_classes_list -> CLASS_IDENTIFIER','disjoint_classes_list',1,'p_disjoint_classes_list','parser.py',80),
  ('disjoint_classes_list -> CLASS_IDENTIFIER COMMA disjoint_classes_list','disjoint_classes_list',3,'p_disjoint_classes_list','parser.py',81),
  ('defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section','defined_class',5,'p_defined_class','parser.py',89),
  ('defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section','defined_class',3,'p_defined_class','parser.py',90),
  ('enum_class -> OPEN_CURLY individuals CLOSE_CURLY','enum_class',3,'p_enum_class','parser.py',118),
  ('covered_class -> CLASS_IDENTIFIER OR covered_class','covered_class',3,'p_covered_class','parser.py',132),
  ('covered_class -> CLASS_IDENTIFIER','covered_class',1,'p_covered_class','parser.py',133),
  ('equivalentto_section -> EQUIVALENTTO enum_class','equivalentto_section',2,'p_equivalentto_section','parser.py',148),
  ('equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER OR covered_class','equivalentto_section',4,'p_equivalentto_section','parser.py',149),
  ('equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER only_defined','equivalentto_section',3,'p_equivalentto_section','parser.py',150),
  ('equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER aninhada','equivalentto_section',3,'p_equivalentto_section','parser.py',151),
  ('def_descriptions -> quantifier_aux','def_descriptions',1,'p_def_descriptions','parser.py',166),
  ('def_descriptions_axioma -> quantifier_aux_axioma','def_descriptions_axioma',1,'p_def_descriptions_axioma','parser.py',171),
  ('aninhada -> comma_and OPEN_PAREN quantifier_aux CLOSE_PAREN','aninhada',4,'p_aninhada','parser.py',176),
  ('aninhada -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN','aninhada',8,'p_aninhada','parser.py',177),
  ('only_defined -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier_aux CLASS_IDENTIFIER CLOSE_PAREN','only_defined',6,'p_only_defined','parser.py',183),
  ('quantifier_aux -> comma_and quantifier_aux','quantifier_aux',2,'p_quantifier_aux','parser.py',188),
  ('quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN','quantifier_aux',3,'p_quantifier_aux','parser.py',189),
  ('quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER','quantifier_aux',3,'p_quantifier_aux','parser.py',190),
  ('quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux','quantifier_aux',4,'p_quantifier_aux','parser.py',191),
  ('quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type','quantifier_aux',3,'p_quantifier_aux','parser.py',192),
  ('quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type','quantifier_aux',4,'p_quantifier_aux','parser.py',193),
  ('quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER','quantifier_aux',4,'p_quantifier_aux','parser.py',194),
  ('quantifier_aux -> quantifier_aux comma_and quantifier_aux','quantifier_aux',3,'p_quantifier_aux','parser.py',195),
  ('quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux','quantifier_aux',3,'p_quantifier_aux','parser.py',196),
  ('quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux','quantifier_aux',3,'p_quantifier_aux','parser.py',197),
  ('quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux','quantifier_aux',3,'p_quantifier_aux','parser.py',198),
  ('quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux','quantifier_aux',3,'p_quantifier_aux','parser.py',199),
  ('quantifier_aux -> CLASS_IDENTIFIER','quantifier_aux',1,'p_quantifier_aux','parser.py',200),
  ('quantifier_aux -> PROPERTY_IDENTIFIER','quantifier_aux',1,'p_quantifier_aux','parser.py',201),
  ('quantifier_aux -> quantifier','quantifier_aux',1,'p_quantifier_aux','parser.py',202),
  ('quantifier_aux_axioma -> comma_and quantifier_aux_axioma','quantifier_aux_axioma',2,'p_quantifier_aux_axioma','parser.py',215),
  ('quantifier_aux_axioma -> OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN','quantifier_aux_axioma',3,'p_quantifier_aux_axioma','parser.py',216),
  ('quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type','quantifier_aux_axioma',4,'p_quantifier_aux_axioma','parser.py',217),
  ('quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER','quantifier_aux_axioma',4,'p_quantifier_aux_axioma','parser.py',218),
  ('quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER','quantifier_aux_axioma',3,'p_quantifier_aux_axioma','parser.py',219),
  ('quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral namespace_type','quantifier_aux_axioma',3,'p_quantifier_aux_axioma','parser.py',220),
  ('quantifier_aux_axioma -> quantifier_aux_axioma comma_and quantifier_aux_axioma','quantifier_aux_axioma',3,'p_quantifier_aux_axioma','parser.py',221),
  ('quantifier_aux_axioma -> CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma','quantifier_aux_axioma',3,'p_quantifier_aux_axioma','parser.py',222),
  ('quantifier_aux_axioma -> CLASS_IDENTIFIER OR quantifier_aux_axioma','quantifier_aux_axioma',3,'p_quantifier_aux_axioma','parser.py',223),
  ('quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma','quantifier_aux_axioma',3,'p_quantifier_aux_axioma','parser.py',224),
  ('quantifier_aux_axioma -> CLASS_IDENTIFIER comma_and quantifier_aux_axioma','quantifier_aux_axioma',3,'p_quantifier_aux_axioma','parser.py',225),
  ('quantifier_aux_axioma -> CLASS_IDENTIFIER','quantifier_aux_axioma',1,'p_quantifier_aux_axioma','parser.py',226),
  ('quantifier_aux_axioma -> PROPERTY_IDENTIFIER','quantifier_aux_axioma',1,'p_quantifier_aux_axioma','parser.py',227),
  ('quantifier -> SOME','quantifier',1,'p_quantifier','parser.py',244),
  ('quantifier -> ALL','quantifier',1,'p_quantifier','parser.py',245),
  ('quantifier -> VALUE','quantifier',1,'p_quantifier','parser.py',246),
  ('quantifier -> THAT','quantifier',1,'p_quantifier','parser.py',247),
  ('quantifier_number -> MAX','quantifier_number',1,'p_quantifier_number','parser.py',252),
  ('quantifier_number -> MIN','quantifier_number',1,'p_quantifier_number','parser.py',253),
  ('quantifier_number -> EXACTLY','quantifier_number',1,'p_quantifier_number','parser.py',254),
  ('quantifier_geral -> SOME','quantifier_geral',1,'p_quantifier_geral','parser.py',259),
  ('quantifier_geral -> ALL','quantifier_geral',1,'p_quantifier_geral','parser.py',260),
  ('quantifier_geral -> VALUE','quantifier_geral',1,'p_quantifier_geral','parser.py',261),
  ('quantifier_geral -> MAX','quantifier_geral',1,'p_quantifier_geral','parser.py',262),
  ('quantifier_geral -> MIN','quantifier_geral',1,'p_quantifier_geral','parser.py',263),
  ('quantifier_geral -> EXACTLY','quantifier_geral',1,'p_quantifier_geral','parser.py',264),
  ('quantifier_geral -> THAT','quantifier_geral',1,'p_quantifier_geral','parser.py',265),
  ('sizecheck -> EQUAL CARDINALITY','sizecheck',2,'p_sizecheck','parser.py',271),
  ('sizecheck -> GREATER_THAN CARDINALITY','sizecheck',2,'p_sizecheck','parser.py',272),
  ('sizecheck -> LESS_THAN CARDINALITY','sizecheck',2,'p_sizecheck','parser.py',273),
  ('sizecheck -> GREATER_THAN EQUAL CARDINALITY','sizecheck',3,'p_sizecheck','parser.py',274),
  ('sizecheck -> LESS_THAN EQUAL CARDINALITY','sizecheck',3,'p_sizecheck','parser.py',275),
  ('namespace_type -> NAMESPACE TYPE','namespace_type',2,'p_namespace_type','parser.py',289),
  ('namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET','namespace_type',5,'p_namespace_type','parser.py',290),
  ('individuals_section -> INDIVIDUALS individuals','individuals_section',2,'p_individuals_section','parser.py',297),
  ('individuals_section -> empty','individuals_section',1,'p_individuals_section','parser.py',298),
  ('individuals -> INDIVIDUAL_NAME','individuals',1,'p_individuals','parser.py',305),
  ('individuals -> INDIVIDUAL_NAME COMMA individuals','individuals',3,'p_individuals','parser.py',306),
  ('comma_and -> COMMA','comma_and',1,'p_comma_and','parser.py',313),
  ('comma_and -> AND','comma_and',1,'p_comma_and','parser.py',314),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',319),
]
