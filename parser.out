Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CLOSE_CURLY
    DISJOINtWITH
    NOT
    ONLY
    OPEN_CURLY
    PROPERTY_IDENTIFIER_SIMPLE

Grammar

Rule 0     S' -> classes
Rule 1     classes -> defined_class
Rule 2     classes -> defined_class classes
Rule 3     classes -> primitive_class
Rule 4     classes -> primitive_class classes
Rule 5     primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section
Rule 6     subclass_section -> SUBCLASSOF def_descriptions
Rule 7     subclass_section -> empty
Rule 8     disjoint_section -> DISJOINTCLASSES disjoint_classes_list
Rule 9     disjoint_section -> empty
Rule 10    disjoint_classes_list -> CLASS_IDENTIFIER
Rule 11    disjoint_classes_list -> CLASS_IDENTIFIER COMMA disjoint_classes_list
Rule 12    defined_class -> CLASS CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions individuals_section
Rule 13    defined_class -> CLASS CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions
Rule 14    def_descriptions -> CLASS_IDENTIFIER
Rule 15    def_descriptions -> CLASS_IDENTIFIER OR def_descriptions
Rule 16    def_descriptions -> CLASS_IDENTIFIER comma_and def_descriptions
Rule 17    def_descriptions -> quantifier_aux
Rule 18    def_descriptions -> quantifier_aux comma_and def_descriptions
Rule 19    quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
Rule 20    quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type
Rule 21    quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN
Rule 22    quantifier -> SOME
Rule 23    quantifier -> ALL
Rule 24    quantifier -> VALUE
Rule 25    quantifier -> MAX
Rule 26    quantifier -> MIN
Rule 27    quantifier -> EXACTLY
Rule 28    quantifier -> THAT
Rule 29    sizecheck -> EQUAL CARDINALITY
Rule 30    sizecheck -> GREATER_THAN CARDINALITY
Rule 31    sizecheck -> LESS_THAN CARDINALITY
Rule 32    sizecheck -> GREATER_THAN EQUAL CARDINALITY
Rule 33    sizecheck -> LESS_THAN EQUAL CARDINALITY
Rule 34    namespace_type -> NAMESPACE TYPE
Rule 35    namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET
Rule 36    individuals_section -> INDIVIDUALS individuals
Rule 37    individuals_section -> empty
Rule 38    individuals -> INDIVIDUAL_NAME
Rule 39    individuals -> INDIVIDUAL_NAME COMMA individuals
Rule 40    comma_and -> COMMA
Rule 41    comma_and -> AND
Rule 42    empty -> <empty>

Terminals, with rules where they appear

ALL                  : 23
AND                  : 41
CARDINALITY          : 29 30 31 32 33
CLASS                : 5 12 13
CLASS_IDENTIFIER     : 5 10 11 12 12 13 13 14 15 16 19
CLOSE_BRACKET        : 35
CLOSE_CURLY          : 
CLOSE_PAREN          : 21
COMMA                : 11 39 40
DISJOINTCLASSES      : 8
DISJOINtWITH         : 
EQUAL                : 29 32 33
EQUIVALENTTO         : 12 13
EXACTLY              : 27
GREATER_THAN         : 30 32
INDIVIDUALS          : 36
INDIVIDUAL_NAME      : 38 39
LESS_THAN            : 31 33
MAX                  : 25
MIN                  : 26
NAMESPACE            : 34 35
NOT                  : 
ONLY                 : 
OPEN_BRACKET         : 35
OPEN_CURLY           : 
OPEN_PAREN           : 21
OR                   : 15
PROPERTY_IDENTIFIER  : 19 20
PROPERTY_IDENTIFIER_SIMPLE : 
SOME                 : 22
SUBCLASSOF           : 6
THAT                 : 28
TYPE                 : 34 35
VALUE                : 24
error                : 

Nonterminals, with rules where they appear

classes              : 2 4 0
comma_and            : 12 13 16 18
def_descriptions     : 6 12 13 15 16 18
defined_class        : 1 2
disjoint_classes_list : 8 11
disjoint_section     : 5
empty                : 7 9 37
individuals          : 36 39
individuals_section  : 5 12
namespace_type       : 20
primitive_class      : 3 4
quantifier           : 19 20
quantifier_aux       : 17 18 21
sizecheck            : 35
subclass_section     : 5

Parsing method: LALR

state 0

    (0) S' -> . classes
    (1) classes -> . defined_class
    (2) classes -> . defined_class classes
    (3) classes -> . primitive_class
    (4) classes -> . primitive_class classes
    (12) defined_class -> . CLASS CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions individuals_section
    (13) defined_class -> . CLASS CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions
    (5) primitive_class -> . CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section

    CLASS           shift and go to state 4

    classes                        shift and go to state 1
    defined_class                  shift and go to state 2
    primitive_class                shift and go to state 3

state 1

    (0) S' -> classes .



state 2

    (1) classes -> defined_class .
    (2) classes -> defined_class . classes
    (1) classes -> . defined_class
    (2) classes -> . defined_class classes
    (3) classes -> . primitive_class
    (4) classes -> . primitive_class classes
    (12) defined_class -> . CLASS CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions individuals_section
    (13) defined_class -> . CLASS CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions
    (5) primitive_class -> . CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section

    $end            reduce using rule 1 (classes -> defined_class .)
    CLASS           shift and go to state 4

    defined_class                  shift and go to state 2
    classes                        shift and go to state 5
    primitive_class                shift and go to state 3

state 3

    (3) classes -> primitive_class .
    (4) classes -> primitive_class . classes
    (1) classes -> . defined_class
    (2) classes -> . defined_class classes
    (3) classes -> . primitive_class
    (4) classes -> . primitive_class classes
    (12) defined_class -> . CLASS CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions individuals_section
    (13) defined_class -> . CLASS CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions
    (5) primitive_class -> . CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section

    $end            reduce using rule 3 (classes -> primitive_class .)
    CLASS           shift and go to state 4

    primitive_class                shift and go to state 3
    classes                        shift and go to state 6
    defined_class                  shift and go to state 2

state 4

    (12) defined_class -> CLASS . CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions individuals_section
    (13) defined_class -> CLASS . CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions
    (5) primitive_class -> CLASS . CLASS_IDENTIFIER subclass_section disjoint_section individuals_section

    CLASS_IDENTIFIER shift and go to state 7


state 5

    (2) classes -> defined_class classes .

    $end            reduce using rule 2 (classes -> defined_class classes .)


state 6

    (4) classes -> primitive_class classes .

    $end            reduce using rule 4 (classes -> primitive_class classes .)


state 7

    (12) defined_class -> CLASS CLASS_IDENTIFIER . EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions individuals_section
    (13) defined_class -> CLASS CLASS_IDENTIFIER . EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions
    (5) primitive_class -> CLASS CLASS_IDENTIFIER . subclass_section disjoint_section individuals_section
    (6) subclass_section -> . SUBCLASSOF def_descriptions
    (7) subclass_section -> . empty
    (42) empty -> .

    EQUIVALENTTO    shift and go to state 8
    SUBCLASSOF      shift and go to state 10
    DISJOINTCLASSES reduce using rule 42 (empty -> .)
    INDIVIDUALS     reduce using rule 42 (empty -> .)
    CLASS           reduce using rule 42 (empty -> .)
    $end            reduce using rule 42 (empty -> .)

    subclass_section               shift and go to state 9
    empty                          shift and go to state 11

state 8

    (12) defined_class -> CLASS CLASS_IDENTIFIER EQUIVALENTTO . CLASS_IDENTIFIER comma_and def_descriptions individuals_section
    (13) defined_class -> CLASS CLASS_IDENTIFIER EQUIVALENTTO . CLASS_IDENTIFIER comma_and def_descriptions

    CLASS_IDENTIFIER shift and go to state 12


state 9

    (5) primitive_class -> CLASS CLASS_IDENTIFIER subclass_section . disjoint_section individuals_section
    (8) disjoint_section -> . DISJOINTCLASSES disjoint_classes_list
    (9) disjoint_section -> . empty
    (42) empty -> .

    DISJOINTCLASSES shift and go to state 14
    INDIVIDUALS     reduce using rule 42 (empty -> .)
    CLASS           reduce using rule 42 (empty -> .)
    $end            reduce using rule 42 (empty -> .)

    disjoint_section               shift and go to state 13
    empty                          shift and go to state 15

state 10

    (6) subclass_section -> SUBCLASSOF . def_descriptions
    (14) def_descriptions -> . CLASS_IDENTIFIER
    (15) def_descriptions -> . CLASS_IDENTIFIER OR def_descriptions
    (16) def_descriptions -> . CLASS_IDENTIFIER comma_and def_descriptions
    (17) def_descriptions -> . quantifier_aux
    (18) def_descriptions -> . quantifier_aux comma_and def_descriptions
    (19) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (20) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (21) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN

    CLASS_IDENTIFIER shift and go to state 17
    PROPERTY_IDENTIFIER shift and go to state 19
    OPEN_PAREN      shift and go to state 20

    def_descriptions               shift and go to state 16
    quantifier_aux                 shift and go to state 18

state 11

    (7) subclass_section -> empty .

    DISJOINTCLASSES reduce using rule 7 (subclass_section -> empty .)
    INDIVIDUALS     reduce using rule 7 (subclass_section -> empty .)
    CLASS           reduce using rule 7 (subclass_section -> empty .)
    $end            reduce using rule 7 (subclass_section -> empty .)


state 12

    (12) defined_class -> CLASS CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER . comma_and def_descriptions individuals_section
    (13) defined_class -> CLASS CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER . comma_and def_descriptions
    (40) comma_and -> . COMMA
    (41) comma_and -> . AND

    COMMA           shift and go to state 22
    AND             shift and go to state 23

    comma_and                      shift and go to state 21

state 13

    (5) primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section . individuals_section
    (36) individuals_section -> . INDIVIDUALS individuals
    (37) individuals_section -> . empty
    (42) empty -> .

    INDIVIDUALS     shift and go to state 25
    CLASS           reduce using rule 42 (empty -> .)
    $end            reduce using rule 42 (empty -> .)

    individuals_section            shift and go to state 24
    empty                          shift and go to state 26

state 14

    (8) disjoint_section -> DISJOINTCLASSES . disjoint_classes_list
    (10) disjoint_classes_list -> . CLASS_IDENTIFIER
    (11) disjoint_classes_list -> . CLASS_IDENTIFIER COMMA disjoint_classes_list

    CLASS_IDENTIFIER shift and go to state 28

    disjoint_classes_list          shift and go to state 27

state 15

    (9) disjoint_section -> empty .

    INDIVIDUALS     reduce using rule 9 (disjoint_section -> empty .)
    CLASS           reduce using rule 9 (disjoint_section -> empty .)
    $end            reduce using rule 9 (disjoint_section -> empty .)


state 16

    (6) subclass_section -> SUBCLASSOF def_descriptions .

    DISJOINTCLASSES reduce using rule 6 (subclass_section -> SUBCLASSOF def_descriptions .)
    INDIVIDUALS     reduce using rule 6 (subclass_section -> SUBCLASSOF def_descriptions .)
    CLASS           reduce using rule 6 (subclass_section -> SUBCLASSOF def_descriptions .)
    $end            reduce using rule 6 (subclass_section -> SUBCLASSOF def_descriptions .)


state 17

    (14) def_descriptions -> CLASS_IDENTIFIER .
    (15) def_descriptions -> CLASS_IDENTIFIER . OR def_descriptions
    (16) def_descriptions -> CLASS_IDENTIFIER . comma_and def_descriptions
    (40) comma_and -> . COMMA
    (41) comma_and -> . AND

    DISJOINTCLASSES reduce using rule 14 (def_descriptions -> CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 14 (def_descriptions -> CLASS_IDENTIFIER .)
    CLASS           reduce using rule 14 (def_descriptions -> CLASS_IDENTIFIER .)
    $end            reduce using rule 14 (def_descriptions -> CLASS_IDENTIFIER .)
    OR              shift and go to state 29
    COMMA           shift and go to state 22
    AND             shift and go to state 23

    comma_and                      shift and go to state 30

state 18

    (17) def_descriptions -> quantifier_aux .
    (18) def_descriptions -> quantifier_aux . comma_and def_descriptions
    (40) comma_and -> . COMMA
    (41) comma_and -> . AND

    DISJOINTCLASSES reduce using rule 17 (def_descriptions -> quantifier_aux .)
    INDIVIDUALS     reduce using rule 17 (def_descriptions -> quantifier_aux .)
    CLASS           reduce using rule 17 (def_descriptions -> quantifier_aux .)
    $end            reduce using rule 17 (def_descriptions -> quantifier_aux .)
    COMMA           shift and go to state 22
    AND             shift and go to state 23

    comma_and                      shift and go to state 31

state 19

    (19) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier CLASS_IDENTIFIER
    (20) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier namespace_type
    (22) quantifier -> . SOME
    (23) quantifier -> . ALL
    (24) quantifier -> . VALUE
    (25) quantifier -> . MAX
    (26) quantifier -> . MIN
    (27) quantifier -> . EXACTLY
    (28) quantifier -> . THAT

    SOME            shift and go to state 33
    ALL             shift and go to state 34
    VALUE           shift and go to state 35
    MAX             shift and go to state 36
    MIN             shift and go to state 37
    EXACTLY         shift and go to state 38
    THAT            shift and go to state 39

    quantifier                     shift and go to state 32

state 20

    (21) quantifier_aux -> OPEN_PAREN . quantifier_aux CLOSE_PAREN
    (19) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (20) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (21) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN

    PROPERTY_IDENTIFIER shift and go to state 19
    OPEN_PAREN      shift and go to state 20

    quantifier_aux                 shift and go to state 40

state 21

    (12) defined_class -> CLASS CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER comma_and . def_descriptions individuals_section
    (13) defined_class -> CLASS CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER comma_and . def_descriptions
    (14) def_descriptions -> . CLASS_IDENTIFIER
    (15) def_descriptions -> . CLASS_IDENTIFIER OR def_descriptions
    (16) def_descriptions -> . CLASS_IDENTIFIER comma_and def_descriptions
    (17) def_descriptions -> . quantifier_aux
    (18) def_descriptions -> . quantifier_aux comma_and def_descriptions
    (19) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (20) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (21) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN

    CLASS_IDENTIFIER shift and go to state 17
    PROPERTY_IDENTIFIER shift and go to state 19
    OPEN_PAREN      shift and go to state 20

    def_descriptions               shift and go to state 41
    quantifier_aux                 shift and go to state 18

state 22

    (40) comma_and -> COMMA .

    CLASS_IDENTIFIER reduce using rule 40 (comma_and -> COMMA .)
    PROPERTY_IDENTIFIER reduce using rule 40 (comma_and -> COMMA .)
    OPEN_PAREN      reduce using rule 40 (comma_and -> COMMA .)


state 23

    (41) comma_and -> AND .

    CLASS_IDENTIFIER reduce using rule 41 (comma_and -> AND .)
    PROPERTY_IDENTIFIER reduce using rule 41 (comma_and -> AND .)
    OPEN_PAREN      reduce using rule 41 (comma_and -> AND .)


state 24

    (5) primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section .

    CLASS           reduce using rule 5 (primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section .)
    $end            reduce using rule 5 (primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section .)


state 25

    (36) individuals_section -> INDIVIDUALS . individuals
    (38) individuals -> . INDIVIDUAL_NAME
    (39) individuals -> . INDIVIDUAL_NAME COMMA individuals

    INDIVIDUAL_NAME shift and go to state 43

    individuals                    shift and go to state 42

state 26

    (37) individuals_section -> empty .

    CLASS           reduce using rule 37 (individuals_section -> empty .)
    $end            reduce using rule 37 (individuals_section -> empty .)


state 27

    (8) disjoint_section -> DISJOINTCLASSES disjoint_classes_list .

    INDIVIDUALS     reduce using rule 8 (disjoint_section -> DISJOINTCLASSES disjoint_classes_list .)
    CLASS           reduce using rule 8 (disjoint_section -> DISJOINTCLASSES disjoint_classes_list .)
    $end            reduce using rule 8 (disjoint_section -> DISJOINTCLASSES disjoint_classes_list .)


state 28

    (10) disjoint_classes_list -> CLASS_IDENTIFIER .
    (11) disjoint_classes_list -> CLASS_IDENTIFIER . COMMA disjoint_classes_list

    INDIVIDUALS     reduce using rule 10 (disjoint_classes_list -> CLASS_IDENTIFIER .)
    CLASS           reduce using rule 10 (disjoint_classes_list -> CLASS_IDENTIFIER .)
    $end            reduce using rule 10 (disjoint_classes_list -> CLASS_IDENTIFIER .)
    COMMA           shift and go to state 44


state 29

    (15) def_descriptions -> CLASS_IDENTIFIER OR . def_descriptions
    (14) def_descriptions -> . CLASS_IDENTIFIER
    (15) def_descriptions -> . CLASS_IDENTIFIER OR def_descriptions
    (16) def_descriptions -> . CLASS_IDENTIFIER comma_and def_descriptions
    (17) def_descriptions -> . quantifier_aux
    (18) def_descriptions -> . quantifier_aux comma_and def_descriptions
    (19) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (20) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (21) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN

    CLASS_IDENTIFIER shift and go to state 17
    PROPERTY_IDENTIFIER shift and go to state 19
    OPEN_PAREN      shift and go to state 20

    def_descriptions               shift and go to state 45
    quantifier_aux                 shift and go to state 18

state 30

    (16) def_descriptions -> CLASS_IDENTIFIER comma_and . def_descriptions
    (14) def_descriptions -> . CLASS_IDENTIFIER
    (15) def_descriptions -> . CLASS_IDENTIFIER OR def_descriptions
    (16) def_descriptions -> . CLASS_IDENTIFIER comma_and def_descriptions
    (17) def_descriptions -> . quantifier_aux
    (18) def_descriptions -> . quantifier_aux comma_and def_descriptions
    (19) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (20) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (21) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN

    CLASS_IDENTIFIER shift and go to state 17
    PROPERTY_IDENTIFIER shift and go to state 19
    OPEN_PAREN      shift and go to state 20

    def_descriptions               shift and go to state 46
    quantifier_aux                 shift and go to state 18

state 31

    (18) def_descriptions -> quantifier_aux comma_and . def_descriptions
    (14) def_descriptions -> . CLASS_IDENTIFIER
    (15) def_descriptions -> . CLASS_IDENTIFIER OR def_descriptions
    (16) def_descriptions -> . CLASS_IDENTIFIER comma_and def_descriptions
    (17) def_descriptions -> . quantifier_aux
    (18) def_descriptions -> . quantifier_aux comma_and def_descriptions
    (19) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (20) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (21) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN

    CLASS_IDENTIFIER shift and go to state 17
    PROPERTY_IDENTIFIER shift and go to state 19
    OPEN_PAREN      shift and go to state 20

    quantifier_aux                 shift and go to state 18
    def_descriptions               shift and go to state 47

state 32

    (19) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . CLASS_IDENTIFIER
    (20) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . namespace_type
    (34) namespace_type -> . NAMESPACE TYPE
    (35) namespace_type -> . NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET

    CLASS_IDENTIFIER shift and go to state 48
    NAMESPACE       shift and go to state 50

    namespace_type                 shift and go to state 49

state 33

    (22) quantifier -> SOME .

    CLASS_IDENTIFIER reduce using rule 22 (quantifier -> SOME .)
    NAMESPACE       reduce using rule 22 (quantifier -> SOME .)


state 34

    (23) quantifier -> ALL .

    CLASS_IDENTIFIER reduce using rule 23 (quantifier -> ALL .)
    NAMESPACE       reduce using rule 23 (quantifier -> ALL .)


state 35

    (24) quantifier -> VALUE .

    CLASS_IDENTIFIER reduce using rule 24 (quantifier -> VALUE .)
    NAMESPACE       reduce using rule 24 (quantifier -> VALUE .)


state 36

    (25) quantifier -> MAX .

    CLASS_IDENTIFIER reduce using rule 25 (quantifier -> MAX .)
    NAMESPACE       reduce using rule 25 (quantifier -> MAX .)


state 37

    (26) quantifier -> MIN .

    CLASS_IDENTIFIER reduce using rule 26 (quantifier -> MIN .)
    NAMESPACE       reduce using rule 26 (quantifier -> MIN .)


state 38

    (27) quantifier -> EXACTLY .

    CLASS_IDENTIFIER reduce using rule 27 (quantifier -> EXACTLY .)
    NAMESPACE       reduce using rule 27 (quantifier -> EXACTLY .)


state 39

    (28) quantifier -> THAT .

    CLASS_IDENTIFIER reduce using rule 28 (quantifier -> THAT .)
    NAMESPACE       reduce using rule 28 (quantifier -> THAT .)


state 40

    (21) quantifier_aux -> OPEN_PAREN quantifier_aux . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 51


state 41

    (12) defined_class -> CLASS CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions . individuals_section
    (13) defined_class -> CLASS CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions .
    (36) individuals_section -> . INDIVIDUALS individuals
    (37) individuals_section -> . empty
    (42) empty -> .

  ! reduce/reduce conflict for CLASS resolved using rule 13 (defined_class -> CLASS CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions .)
  ! reduce/reduce conflict for $end resolved using rule 13 (defined_class -> CLASS CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions .)
    CLASS           reduce using rule 13 (defined_class -> CLASS CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions .)
    $end            reduce using rule 13 (defined_class -> CLASS CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions .)
    INDIVIDUALS     shift and go to state 25

  ! CLASS           [ reduce using rule 42 (empty -> .) ]
  ! $end            [ reduce using rule 42 (empty -> .) ]

    individuals_section            shift and go to state 52
    empty                          shift and go to state 26

state 42

    (36) individuals_section -> INDIVIDUALS individuals .

    CLASS           reduce using rule 36 (individuals_section -> INDIVIDUALS individuals .)
    $end            reduce using rule 36 (individuals_section -> INDIVIDUALS individuals .)


state 43

    (38) individuals -> INDIVIDUAL_NAME .
    (39) individuals -> INDIVIDUAL_NAME . COMMA individuals

    CLASS           reduce using rule 38 (individuals -> INDIVIDUAL_NAME .)
    $end            reduce using rule 38 (individuals -> INDIVIDUAL_NAME .)
    COMMA           shift and go to state 53


state 44

    (11) disjoint_classes_list -> CLASS_IDENTIFIER COMMA . disjoint_classes_list
    (10) disjoint_classes_list -> . CLASS_IDENTIFIER
    (11) disjoint_classes_list -> . CLASS_IDENTIFIER COMMA disjoint_classes_list

    CLASS_IDENTIFIER shift and go to state 28

    disjoint_classes_list          shift and go to state 54

state 45

    (15) def_descriptions -> CLASS_IDENTIFIER OR def_descriptions .

    DISJOINTCLASSES reduce using rule 15 (def_descriptions -> CLASS_IDENTIFIER OR def_descriptions .)
    INDIVIDUALS     reduce using rule 15 (def_descriptions -> CLASS_IDENTIFIER OR def_descriptions .)
    CLASS           reduce using rule 15 (def_descriptions -> CLASS_IDENTIFIER OR def_descriptions .)
    $end            reduce using rule 15 (def_descriptions -> CLASS_IDENTIFIER OR def_descriptions .)


state 46

    (16) def_descriptions -> CLASS_IDENTIFIER comma_and def_descriptions .

    DISJOINTCLASSES reduce using rule 16 (def_descriptions -> CLASS_IDENTIFIER comma_and def_descriptions .)
    INDIVIDUALS     reduce using rule 16 (def_descriptions -> CLASS_IDENTIFIER comma_and def_descriptions .)
    CLASS           reduce using rule 16 (def_descriptions -> CLASS_IDENTIFIER comma_and def_descriptions .)
    $end            reduce using rule 16 (def_descriptions -> CLASS_IDENTIFIER comma_and def_descriptions .)


state 47

    (18) def_descriptions -> quantifier_aux comma_and def_descriptions .

    DISJOINTCLASSES reduce using rule 18 (def_descriptions -> quantifier_aux comma_and def_descriptions .)
    INDIVIDUALS     reduce using rule 18 (def_descriptions -> quantifier_aux comma_and def_descriptions .)
    CLASS           reduce using rule 18 (def_descriptions -> quantifier_aux comma_and def_descriptions .)
    $end            reduce using rule 18 (def_descriptions -> quantifier_aux comma_and def_descriptions .)


state 48

    (19) quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .

    COMMA           reduce using rule 19 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    AND             reduce using rule 19 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    DISJOINTCLASSES reduce using rule 19 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 19 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    CLASS           reduce using rule 19 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    $end            reduce using rule 19 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 19 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)


state 49

    (20) quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .

    COMMA           reduce using rule 20 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    AND             reduce using rule 20 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    DISJOINTCLASSES reduce using rule 20 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    INDIVIDUALS     reduce using rule 20 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    CLASS           reduce using rule 20 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    $end            reduce using rule 20 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    CLOSE_PAREN     reduce using rule 20 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)


state 50

    (34) namespace_type -> NAMESPACE . TYPE
    (35) namespace_type -> NAMESPACE . TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET

    TYPE            shift and go to state 55


state 51

    (21) quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .

    COMMA           reduce using rule 21 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    AND             reduce using rule 21 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    DISJOINTCLASSES reduce using rule 21 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    INDIVIDUALS     reduce using rule 21 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    CLASS           reduce using rule 21 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    $end            reduce using rule 21 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 21 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)


state 52

    (12) defined_class -> CLASS CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions individuals_section .

    CLASS           reduce using rule 12 (defined_class -> CLASS CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions individuals_section .)
    $end            reduce using rule 12 (defined_class -> CLASS CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions individuals_section .)


state 53

    (39) individuals -> INDIVIDUAL_NAME COMMA . individuals
    (38) individuals -> . INDIVIDUAL_NAME
    (39) individuals -> . INDIVIDUAL_NAME COMMA individuals

    INDIVIDUAL_NAME shift and go to state 43

    individuals                    shift and go to state 56

state 54

    (11) disjoint_classes_list -> CLASS_IDENTIFIER COMMA disjoint_classes_list .

    INDIVIDUALS     reduce using rule 11 (disjoint_classes_list -> CLASS_IDENTIFIER COMMA disjoint_classes_list .)
    CLASS           reduce using rule 11 (disjoint_classes_list -> CLASS_IDENTIFIER COMMA disjoint_classes_list .)
    $end            reduce using rule 11 (disjoint_classes_list -> CLASS_IDENTIFIER COMMA disjoint_classes_list .)


state 55

    (34) namespace_type -> NAMESPACE TYPE .
    (35) namespace_type -> NAMESPACE TYPE . OPEN_BRACKET sizecheck CLOSE_BRACKET

    COMMA           reduce using rule 34 (namespace_type -> NAMESPACE TYPE .)
    AND             reduce using rule 34 (namespace_type -> NAMESPACE TYPE .)
    DISJOINTCLASSES reduce using rule 34 (namespace_type -> NAMESPACE TYPE .)
    INDIVIDUALS     reduce using rule 34 (namespace_type -> NAMESPACE TYPE .)
    CLASS           reduce using rule 34 (namespace_type -> NAMESPACE TYPE .)
    $end            reduce using rule 34 (namespace_type -> NAMESPACE TYPE .)
    CLOSE_PAREN     reduce using rule 34 (namespace_type -> NAMESPACE TYPE .)
    OPEN_BRACKET    shift and go to state 57


state 56

    (39) individuals -> INDIVIDUAL_NAME COMMA individuals .

    CLASS           reduce using rule 39 (individuals -> INDIVIDUAL_NAME COMMA individuals .)
    $end            reduce using rule 39 (individuals -> INDIVIDUAL_NAME COMMA individuals .)


state 57

    (35) namespace_type -> NAMESPACE TYPE OPEN_BRACKET . sizecheck CLOSE_BRACKET
    (29) sizecheck -> . EQUAL CARDINALITY
    (30) sizecheck -> . GREATER_THAN CARDINALITY
    (31) sizecheck -> . LESS_THAN CARDINALITY
    (32) sizecheck -> . GREATER_THAN EQUAL CARDINALITY
    (33) sizecheck -> . LESS_THAN EQUAL CARDINALITY

    EQUAL           shift and go to state 59
    GREATER_THAN    shift and go to state 60
    LESS_THAN       shift and go to state 61

    sizecheck                      shift and go to state 58

state 58

    (35) namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 62


state 59

    (29) sizecheck -> EQUAL . CARDINALITY

    CARDINALITY     shift and go to state 63


state 60

    (30) sizecheck -> GREATER_THAN . CARDINALITY
    (32) sizecheck -> GREATER_THAN . EQUAL CARDINALITY

    CARDINALITY     shift and go to state 64
    EQUAL           shift and go to state 65


state 61

    (31) sizecheck -> LESS_THAN . CARDINALITY
    (33) sizecheck -> LESS_THAN . EQUAL CARDINALITY

    CARDINALITY     shift and go to state 66
    EQUAL           shift and go to state 67


state 62

    (35) namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .

    COMMA           reduce using rule 35 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    AND             reduce using rule 35 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    DISJOINTCLASSES reduce using rule 35 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    INDIVIDUALS     reduce using rule 35 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    CLASS           reduce using rule 35 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    $end            reduce using rule 35 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 35 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)


state 63

    (29) sizecheck -> EQUAL CARDINALITY .

    CLOSE_BRACKET   reduce using rule 29 (sizecheck -> EQUAL CARDINALITY .)


state 64

    (30) sizecheck -> GREATER_THAN CARDINALITY .

    CLOSE_BRACKET   reduce using rule 30 (sizecheck -> GREATER_THAN CARDINALITY .)


state 65

    (32) sizecheck -> GREATER_THAN EQUAL . CARDINALITY

    CARDINALITY     shift and go to state 68


state 66

    (31) sizecheck -> LESS_THAN CARDINALITY .

    CLOSE_BRACKET   reduce using rule 31 (sizecheck -> LESS_THAN CARDINALITY .)


state 67

    (33) sizecheck -> LESS_THAN EQUAL . CARDINALITY

    CARDINALITY     shift and go to state 69


state 68

    (32) sizecheck -> GREATER_THAN EQUAL CARDINALITY .

    CLOSE_BRACKET   reduce using rule 32 (sizecheck -> GREATER_THAN EQUAL CARDINALITY .)


state 69

    (33) sizecheck -> LESS_THAN EQUAL CARDINALITY .

    CLOSE_BRACKET   reduce using rule 33 (sizecheck -> LESS_THAN EQUAL CARDINALITY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 41 resolved using rule (defined_class -> CLASS CLASS_IDENTIFIER EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions)
WARNING: rejected rule (empty -> <empty>) in state 41
