Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DISJOINtWITH
    NOT
    PROPERTY_IDENTIFIER_SIMPLE

Grammar

Rule 0     S' -> classes
Rule 1     classes -> defined_class
Rule 2     classes -> defined_class classes
Rule 3     classes -> primitive_class
Rule 4     classes -> primitive_class classes
Rule 5     primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section
Rule 6     subclass_section -> SUBCLASSOF enum_class
Rule 7     subclass_section -> SUBCLASSOF CLASS_IDENTIFIER OR covered_class
Rule 8     subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions_axioma ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN
Rule 9     subclass_section -> SUBCLASSOF CLASS_IDENTIFIER
Rule 10    subclass_section -> SUBCLASSOF quantifier_aux_axioma
Rule 11    auxiliar_fechamento -> CLASS_IDENTIFIER
Rule 12    auxiliar_fechamento -> CLASS_IDENTIFIER OR auxiliar_fechamento
Rule 13    disjoint_section -> DISJOINTCLASSES quantifier_aux
Rule 14    disjoint_section -> empty
Rule 15    disjoint_classes_list -> CLASS_IDENTIFIER
Rule 16    disjoint_classes_list -> CLASS_IDENTIFIER COMMA disjoint_classes_list
Rule 17    defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
Rule 18    defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section
Rule 19    enum_class -> OPEN_CURLY individuals CLOSE_CURLY
Rule 20    covered_class -> CLASS_IDENTIFIER OR covered_class
Rule 21    covered_class -> CLASS_IDENTIFIER
Rule 22    equivalentto_section -> EQUIVALENTTO enum_class
Rule 23    equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER OR covered_class
Rule 24    equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER only_defined
Rule 25    equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER aninhada
Rule 26    def_descriptions -> quantifier_aux
Rule 27    def_descriptions_axioma -> quantifier_aux_axioma
Rule 28    aninhada -> comma_and OPEN_PAREN quantifier_aux CLOSE_PAREN
Rule 29    aninhada -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN
Rule 30    only_defined -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier_aux CLASS_IDENTIFIER CLOSE_PAREN
Rule 31    quantifier_aux -> comma_and quantifier_aux
Rule 32    quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN
Rule 33    quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
Rule 34    quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
Rule 35    quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type
Rule 36    quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
Rule 37    quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
Rule 38    quantifier_aux -> quantifier_aux comma_and quantifier_aux
Rule 39    quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux
Rule 40    quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux
Rule 41    quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux
Rule 42    quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux
Rule 43    quantifier_aux -> CLASS_IDENTIFIER
Rule 44    quantifier_aux -> PROPERTY_IDENTIFIER
Rule 45    quantifier_aux -> quantifier
Rule 46    quantifier_aux_axioma -> comma_and quantifier_aux_axioma
Rule 47    quantifier_aux_axioma -> OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN
Rule 48    quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
Rule 49    quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
Rule 50    quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER
Rule 51    quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral namespace_type
Rule 52    quantifier_aux_axioma -> quantifier_aux_axioma comma_and quantifier_aux_axioma
Rule 53    quantifier_aux_axioma -> CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma
Rule 54    quantifier_aux_axioma -> CLASS_IDENTIFIER OR quantifier_aux_axioma
Rule 55    quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma
Rule 56    quantifier_aux_axioma -> CLASS_IDENTIFIER comma_and quantifier_aux_axioma
Rule 57    quantifier_aux_axioma -> CLASS_IDENTIFIER
Rule 58    quantifier_aux_axioma -> PROPERTY_IDENTIFIER
Rule 59    quantifier -> SOME
Rule 60    quantifier -> ALL
Rule 61    quantifier -> VALUE
Rule 62    quantifier -> THAT
Rule 63    quantifier_number -> MAX
Rule 64    quantifier_number -> MIN
Rule 65    quantifier_number -> EXACTLY
Rule 66    quantifier_geral -> SOME
Rule 67    quantifier_geral -> ALL
Rule 68    quantifier_geral -> VALUE
Rule 69    quantifier_geral -> MAX
Rule 70    quantifier_geral -> MIN
Rule 71    quantifier_geral -> EXACTLY
Rule 72    quantifier_geral -> THAT
Rule 73    sizecheck -> EQUAL CARDINALITY
Rule 74    sizecheck -> GREATER_THAN CARDINALITY
Rule 75    sizecheck -> LESS_THAN CARDINALITY
Rule 76    sizecheck -> GREATER_THAN EQUAL CARDINALITY
Rule 77    sizecheck -> LESS_THAN EQUAL CARDINALITY
Rule 78    namespace_type -> NAMESPACE TYPE
Rule 79    namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET
Rule 80    individuals_section -> INDIVIDUALS individuals
Rule 81    individuals_section -> empty
Rule 82    individuals -> INDIVIDUAL_NAME
Rule 83    individuals -> INDIVIDUAL_NAME COMMA individuals
Rule 84    comma_and -> COMMA
Rule 85    comma_and -> AND
Rule 86    empty -> <empty>

Terminals, with rules where they appear

ALL                  : 60 67
AND                  : 85
CARDINALITY          : 36 37 48 49 73 74 75 76 77
CLASS                : 5 17 18
CLASS_IDENTIFIER     : 5 7 8 9 11 12 15 16 17 18 20 21 23 24 25 30 33 34 37 39 40 42 43 49 50 53 54 56 57
CLOSE_BRACKET        : 79
CLOSE_CURLY          : 19
CLOSE_PAREN          : 8 28 29 29 30 32 47
COMMA                : 16 83 84
DISJOINTCLASSES      : 13
DISJOINtWITH         : 
EQUAL                : 73 76 77
EQUIVALENTTO         : 22 23 24 25
EXACTLY              : 65 71
GREATER_THAN         : 74 76
INDIVIDUALS          : 80
INDIVIDUAL_NAME      : 82 83
LESS_THAN            : 75 77
MAX                  : 63 69
MIN                  : 64 70
NAMESPACE            : 78 79
NOT                  : 
ONLY                 : 8
OPEN_BRACKET         : 79
OPEN_CURLY           : 19
OPEN_PAREN           : 8 28 29 29 30 32 47
OR                   : 7 12 20 23 40 54
PROPERTY_IDENTIFIER  : 29 30 33 34 35 36 37 41 44 48 49 50 51 55 58
PROPERTY_IDENTIFIER_SIMPLE : 
SOME                 : 59 66
SUBCLASSOF           : 6 7 8 9 10
THAT                 : 62 72
TYPE                 : 78 79
VALUE                : 61 68
error                : 

Nonterminals, with rules where they appear

aninhada             : 25
auxiliar_fechamento  : 8 12
classes              : 2 4 0
comma_and            : 28 29 30 31 38 42 46 52 56
covered_class        : 7 20 23
def_descriptions     : 
def_descriptions_axioma : 8
defined_class        : 1 2
disjoint_classes_list : 16
disjoint_section     : 5
empty                : 14 81
enum_class           : 6 22
equivalentto_section : 17 18
individuals          : 19 80 83
individuals_section  : 5 17
namespace_type       : 35 36 48 51
only_defined         : 24
primitive_class      : 3 4
quantifier           : 29 33 34 35 39 41 45
quantifier_aux       : 13 26 28 29 30 31 32 34 38 38 39 40 41 42
quantifier_aux_axioma : 10 27 46 47 52 52 53 54 55 56
quantifier_geral     : 50 51 53 55
quantifier_number    : 36 37 48 49
sizecheck            : 79
subclass_section     : 5 17

Parsing method: LALR

state 0

    (0) S' -> . classes
    (1) classes -> . defined_class
    (2) classes -> . defined_class classes
    (3) classes -> . primitive_class
    (4) classes -> . primitive_class classes
    (17) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
    (18) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section
    (5) primitive_class -> . CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section

    CLASS           shift and go to state 4

    classes                        shift and go to state 1
    defined_class                  shift and go to state 2
    primitive_class                shift and go to state 3

state 1

    (0) S' -> classes .



state 2

    (1) classes -> defined_class .
    (2) classes -> defined_class . classes
    (1) classes -> . defined_class
    (2) classes -> . defined_class classes
    (3) classes -> . primitive_class
    (4) classes -> . primitive_class classes
    (17) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
    (18) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section
    (5) primitive_class -> . CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section

    $end            reduce using rule 1 (classes -> defined_class .)
    CLASS           shift and go to state 4

    defined_class                  shift and go to state 2
    classes                        shift and go to state 5
    primitive_class                shift and go to state 3

state 3

    (3) classes -> primitive_class .
    (4) classes -> primitive_class . classes
    (1) classes -> . defined_class
    (2) classes -> . defined_class classes
    (3) classes -> . primitive_class
    (4) classes -> . primitive_class classes
    (17) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
    (18) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section
    (5) primitive_class -> . CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section

    $end            reduce using rule 3 (classes -> primitive_class .)
    CLASS           shift and go to state 4

    primitive_class                shift and go to state 3
    classes                        shift and go to state 6
    defined_class                  shift and go to state 2

state 4

    (17) defined_class -> CLASS . CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
    (18) defined_class -> CLASS . CLASS_IDENTIFIER equivalentto_section
    (5) primitive_class -> CLASS . CLASS_IDENTIFIER subclass_section disjoint_section individuals_section

    CLASS_IDENTIFIER shift and go to state 7


state 5

    (2) classes -> defined_class classes .

    $end            reduce using rule 2 (classes -> defined_class classes .)


state 6

    (4) classes -> primitive_class classes .

    $end            reduce using rule 4 (classes -> primitive_class classes .)


state 7

    (17) defined_class -> CLASS CLASS_IDENTIFIER . equivalentto_section subclass_section individuals_section
    (18) defined_class -> CLASS CLASS_IDENTIFIER . equivalentto_section
    (5) primitive_class -> CLASS CLASS_IDENTIFIER . subclass_section disjoint_section individuals_section
    (22) equivalentto_section -> . EQUIVALENTTO enum_class
    (23) equivalentto_section -> . EQUIVALENTTO CLASS_IDENTIFIER OR covered_class
    (24) equivalentto_section -> . EQUIVALENTTO CLASS_IDENTIFIER only_defined
    (25) equivalentto_section -> . EQUIVALENTTO CLASS_IDENTIFIER aninhada
    (6) subclass_section -> . SUBCLASSOF enum_class
    (7) subclass_section -> . SUBCLASSOF CLASS_IDENTIFIER OR covered_class
    (8) subclass_section -> . SUBCLASSOF CLASS_IDENTIFIER def_descriptions_axioma ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN
    (9) subclass_section -> . SUBCLASSOF CLASS_IDENTIFIER
    (10) subclass_section -> . SUBCLASSOF quantifier_aux_axioma

    EQUIVALENTTO    shift and go to state 10
    SUBCLASSOF      shift and go to state 11

    equivalentto_section           shift and go to state 8
    subclass_section               shift and go to state 9

state 8

    (17) defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section . subclass_section individuals_section
    (18) defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section .
    (6) subclass_section -> . SUBCLASSOF enum_class
    (7) subclass_section -> . SUBCLASSOF CLASS_IDENTIFIER OR covered_class
    (8) subclass_section -> . SUBCLASSOF CLASS_IDENTIFIER def_descriptions_axioma ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN
    (9) subclass_section -> . SUBCLASSOF CLASS_IDENTIFIER
    (10) subclass_section -> . SUBCLASSOF quantifier_aux_axioma

    CLASS           reduce using rule 18 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section .)
    $end            reduce using rule 18 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section .)
    SUBCLASSOF      shift and go to state 11

    subclass_section               shift and go to state 12

state 9

    (5) primitive_class -> CLASS CLASS_IDENTIFIER subclass_section . disjoint_section individuals_section
    (13) disjoint_section -> . DISJOINTCLASSES quantifier_aux
    (14) disjoint_section -> . empty
    (86) empty -> .

    DISJOINTCLASSES shift and go to state 14
    INDIVIDUALS     reduce using rule 86 (empty -> .)
    CLASS           reduce using rule 86 (empty -> .)
    $end            reduce using rule 86 (empty -> .)

    disjoint_section               shift and go to state 13
    empty                          shift and go to state 15

state 10

    (22) equivalentto_section -> EQUIVALENTTO . enum_class
    (23) equivalentto_section -> EQUIVALENTTO . CLASS_IDENTIFIER OR covered_class
    (24) equivalentto_section -> EQUIVALENTTO . CLASS_IDENTIFIER only_defined
    (25) equivalentto_section -> EQUIVALENTTO . CLASS_IDENTIFIER aninhada
    (19) enum_class -> . OPEN_CURLY individuals CLOSE_CURLY

    CLASS_IDENTIFIER shift and go to state 17
    OPEN_CURLY      shift and go to state 18

    enum_class                     shift and go to state 16

state 11

    (6) subclass_section -> SUBCLASSOF . enum_class
    (7) subclass_section -> SUBCLASSOF . CLASS_IDENTIFIER OR covered_class
    (8) subclass_section -> SUBCLASSOF . CLASS_IDENTIFIER def_descriptions_axioma ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN
    (9) subclass_section -> SUBCLASSOF . CLASS_IDENTIFIER
    (10) subclass_section -> SUBCLASSOF . quantifier_aux_axioma
    (19) enum_class -> . OPEN_CURLY individuals CLOSE_CURLY
    (46) quantifier_aux_axioma -> . comma_and quantifier_aux_axioma
    (47) quantifier_aux_axioma -> . OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN
    (48) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (49) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (50) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER
    (51) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral namespace_type
    (52) quantifier_aux_axioma -> . quantifier_aux_axioma comma_and quantifier_aux_axioma
    (53) quantifier_aux_axioma -> . CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (54) quantifier_aux_axioma -> . CLASS_IDENTIFIER OR quantifier_aux_axioma
    (55) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (56) quantifier_aux_axioma -> . CLASS_IDENTIFIER comma_and quantifier_aux_axioma
    (57) quantifier_aux_axioma -> . CLASS_IDENTIFIER
    (58) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

    CLASS_IDENTIFIER shift and go to state 20
    OPEN_CURLY      shift and go to state 18
    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 24
    COMMA           shift and go to state 25
    AND             shift and go to state 26

    enum_class                     shift and go to state 19
    quantifier_aux_axioma          shift and go to state 22
    comma_and                      shift and go to state 23

state 12

    (17) defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section . individuals_section
    (80) individuals_section -> . INDIVIDUALS individuals
    (81) individuals_section -> . empty
    (86) empty -> .

    INDIVIDUALS     shift and go to state 28
    CLASS           reduce using rule 86 (empty -> .)
    $end            reduce using rule 86 (empty -> .)

    individuals_section            shift and go to state 27
    empty                          shift and go to state 29

state 13

    (5) primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section . individuals_section
    (80) individuals_section -> . INDIVIDUALS individuals
    (81) individuals_section -> . empty
    (86) empty -> .

    INDIVIDUALS     shift and go to state 28
    CLASS           reduce using rule 86 (empty -> .)
    $end            reduce using rule 86 (empty -> .)

    individuals_section            shift and go to state 30
    empty                          shift and go to state 29

state 14

    (13) disjoint_section -> DISJOINTCLASSES . quantifier_aux
    (31) quantifier_aux -> . comma_and quantifier_aux
    (32) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (37) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (38) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (40) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (41) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (43) quantifier_aux -> . CLASS_IDENTIFIER
    (44) quantifier_aux -> . PROPERTY_IDENTIFIER
    (45) quantifier_aux -> . quantifier
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND
    (59) quantifier -> . SOME
    (60) quantifier -> . ALL
    (61) quantifier -> . VALUE
    (62) quantifier -> . THAT

    OPEN_PAREN      shift and go to state 33
    PROPERTY_IDENTIFIER shift and go to state 34
    CLASS_IDENTIFIER shift and go to state 36
    COMMA           shift and go to state 25
    AND             shift and go to state 26
    SOME            shift and go to state 37
    ALL             shift and go to state 38
    VALUE           shift and go to state 39
    THAT            shift and go to state 40

    quantifier_aux                 shift and go to state 31
    comma_and                      shift and go to state 32
    quantifier                     shift and go to state 35

state 15

    (14) disjoint_section -> empty .

    INDIVIDUALS     reduce using rule 14 (disjoint_section -> empty .)
    CLASS           reduce using rule 14 (disjoint_section -> empty .)
    $end            reduce using rule 14 (disjoint_section -> empty .)


state 16

    (22) equivalentto_section -> EQUIVALENTTO enum_class .

    SUBCLASSOF      reduce using rule 22 (equivalentto_section -> EQUIVALENTTO enum_class .)
    CLASS           reduce using rule 22 (equivalentto_section -> EQUIVALENTTO enum_class .)
    $end            reduce using rule 22 (equivalentto_section -> EQUIVALENTTO enum_class .)


state 17

    (23) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER . OR covered_class
    (24) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER . only_defined
    (25) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER . aninhada
    (30) only_defined -> . comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier_aux CLASS_IDENTIFIER CLOSE_PAREN
    (28) aninhada -> . comma_and OPEN_PAREN quantifier_aux CLOSE_PAREN
    (29) aninhada -> . comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

    OR              shift and go to state 41
    COMMA           shift and go to state 25
    AND             shift and go to state 26

    only_defined                   shift and go to state 42
    aninhada                       shift and go to state 43
    comma_and                      shift and go to state 44

state 18

    (19) enum_class -> OPEN_CURLY . individuals CLOSE_CURLY
    (82) individuals -> . INDIVIDUAL_NAME
    (83) individuals -> . INDIVIDUAL_NAME COMMA individuals

    INDIVIDUAL_NAME shift and go to state 46

    individuals                    shift and go to state 45

state 19

    (6) subclass_section -> SUBCLASSOF enum_class .

    DISJOINTCLASSES reduce using rule 6 (subclass_section -> SUBCLASSOF enum_class .)
    INDIVIDUALS     reduce using rule 6 (subclass_section -> SUBCLASSOF enum_class .)
    CLASS           reduce using rule 6 (subclass_section -> SUBCLASSOF enum_class .)
    $end            reduce using rule 6 (subclass_section -> SUBCLASSOF enum_class .)


state 20

    (7) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER . OR covered_class
    (8) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER . def_descriptions_axioma ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN
    (9) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .
    (53) quantifier_aux_axioma -> CLASS_IDENTIFIER . quantifier_geral quantifier_aux_axioma
    (54) quantifier_aux_axioma -> CLASS_IDENTIFIER . OR quantifier_aux_axioma
    (56) quantifier_aux_axioma -> CLASS_IDENTIFIER . comma_and quantifier_aux_axioma
    (57) quantifier_aux_axioma -> CLASS_IDENTIFIER .
    (27) def_descriptions_axioma -> . quantifier_aux_axioma
    (66) quantifier_geral -> . SOME
    (67) quantifier_geral -> . ALL
    (68) quantifier_geral -> . VALUE
    (69) quantifier_geral -> . MAX
    (70) quantifier_geral -> . MIN
    (71) quantifier_geral -> . EXACTLY
    (72) quantifier_geral -> . THAT
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND
    (46) quantifier_aux_axioma -> . comma_and quantifier_aux_axioma
    (47) quantifier_aux_axioma -> . OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN
    (48) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (49) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (50) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER
    (51) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral namespace_type
    (52) quantifier_aux_axioma -> . quantifier_aux_axioma comma_and quantifier_aux_axioma
    (53) quantifier_aux_axioma -> . CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (54) quantifier_aux_axioma -> . CLASS_IDENTIFIER OR quantifier_aux_axioma
    (55) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (56) quantifier_aux_axioma -> . CLASS_IDENTIFIER comma_and quantifier_aux_axioma
    (57) quantifier_aux_axioma -> . CLASS_IDENTIFIER
    (58) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER

  ! reduce/reduce conflict for DISJOINTCLASSES resolved using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for INDIVIDUALS resolved using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    OR              shift and go to state 48
    DISJOINTCLASSES reduce using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
    CLASS           reduce using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
    $end            reduce using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
    SOME            shift and go to state 53
    ALL             shift and go to state 54
    VALUE           shift and go to state 55
    MAX             shift and go to state 56
    MIN             shift and go to state 57
    EXACTLY         shift and go to state 58
    THAT            shift and go to state 59
    COMMA           shift and go to state 25
    AND             shift and go to state 26
    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 24
    CLASS_IDENTIFIER shift and go to state 47

  ! COMMA           [ reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .) ]
  ! AND             [ reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .) ]
  ! DISJOINTCLASSES [ reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .) ]
  ! INDIVIDUALS     [ reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .) ]

    def_descriptions_axioma        shift and go to state 49
    quantifier_geral               shift and go to state 50
    quantifier_aux_axioma          shift and go to state 51
    comma_and                      shift and go to state 52

state 21

    (47) quantifier_aux_axioma -> OPEN_PAREN . quantifier_aux_axioma CLOSE_PAREN
    (46) quantifier_aux_axioma -> . comma_and quantifier_aux_axioma
    (47) quantifier_aux_axioma -> . OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN
    (48) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (49) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (50) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER
    (51) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral namespace_type
    (52) quantifier_aux_axioma -> . quantifier_aux_axioma comma_and quantifier_aux_axioma
    (53) quantifier_aux_axioma -> . CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (54) quantifier_aux_axioma -> . CLASS_IDENTIFIER OR quantifier_aux_axioma
    (55) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (56) quantifier_aux_axioma -> . CLASS_IDENTIFIER comma_and quantifier_aux_axioma
    (57) quantifier_aux_axioma -> . CLASS_IDENTIFIER
    (58) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 24
    CLASS_IDENTIFIER shift and go to state 47
    COMMA           shift and go to state 25
    AND             shift and go to state 26

    quantifier_aux_axioma          shift and go to state 60
    comma_and                      shift and go to state 23

state 22

    (10) subclass_section -> SUBCLASSOF quantifier_aux_axioma .
    (52) quantifier_aux_axioma -> quantifier_aux_axioma . comma_and quantifier_aux_axioma
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

    DISJOINTCLASSES reduce using rule 10 (subclass_section -> SUBCLASSOF quantifier_aux_axioma .)
    INDIVIDUALS     reduce using rule 10 (subclass_section -> SUBCLASSOF quantifier_aux_axioma .)
    CLASS           reduce using rule 10 (subclass_section -> SUBCLASSOF quantifier_aux_axioma .)
    $end            reduce using rule 10 (subclass_section -> SUBCLASSOF quantifier_aux_axioma .)
    COMMA           shift and go to state 25
    AND             shift and go to state 26

    comma_and                      shift and go to state 61

state 23

    (46) quantifier_aux_axioma -> comma_and . quantifier_aux_axioma
    (46) quantifier_aux_axioma -> . comma_and quantifier_aux_axioma
    (47) quantifier_aux_axioma -> . OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN
    (48) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (49) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (50) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER
    (51) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral namespace_type
    (52) quantifier_aux_axioma -> . quantifier_aux_axioma comma_and quantifier_aux_axioma
    (53) quantifier_aux_axioma -> . CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (54) quantifier_aux_axioma -> . CLASS_IDENTIFIER OR quantifier_aux_axioma
    (55) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (56) quantifier_aux_axioma -> . CLASS_IDENTIFIER comma_and quantifier_aux_axioma
    (57) quantifier_aux_axioma -> . CLASS_IDENTIFIER
    (58) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 24
    CLASS_IDENTIFIER shift and go to state 47
    COMMA           shift and go to state 25
    AND             shift and go to state 26

    comma_and                      shift and go to state 23
    quantifier_aux_axioma          shift and go to state 62

state 24

    (48) quantifier_aux_axioma -> PROPERTY_IDENTIFIER . quantifier_number CARDINALITY namespace_type
    (49) quantifier_aux_axioma -> PROPERTY_IDENTIFIER . quantifier_number CARDINALITY CLASS_IDENTIFIER
    (50) quantifier_aux_axioma -> PROPERTY_IDENTIFIER . quantifier_geral CLASS_IDENTIFIER
    (51) quantifier_aux_axioma -> PROPERTY_IDENTIFIER . quantifier_geral namespace_type
    (55) quantifier_aux_axioma -> PROPERTY_IDENTIFIER . quantifier_geral quantifier_aux_axioma
    (58) quantifier_aux_axioma -> PROPERTY_IDENTIFIER .
    (63) quantifier_number -> . MAX
    (64) quantifier_number -> . MIN
    (65) quantifier_number -> . EXACTLY
    (66) quantifier_geral -> . SOME
    (67) quantifier_geral -> . ALL
    (68) quantifier_geral -> . VALUE
    (69) quantifier_geral -> . MAX
    (70) quantifier_geral -> . MIN
    (71) quantifier_geral -> . EXACTLY
    (72) quantifier_geral -> . THAT

    COMMA           reduce using rule 58 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER .)
    AND             reduce using rule 58 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER .)
    DISJOINTCLASSES reduce using rule 58 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 58 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER .)
    CLASS           reduce using rule 58 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER .)
    $end            reduce using rule 58 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER .)
    ONLY            reduce using rule 58 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 58 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER .)
    MAX             shift and go to state 65
    MIN             shift and go to state 66
    EXACTLY         shift and go to state 67
    SOME            shift and go to state 53
    ALL             shift and go to state 54
    VALUE           shift and go to state 55
    THAT            shift and go to state 59

    quantifier_number              shift and go to state 63
    quantifier_geral               shift and go to state 64

state 25

    (84) comma_and -> COMMA .

    OPEN_PAREN      reduce using rule 84 (comma_and -> COMMA .)
    PROPERTY_IDENTIFIER reduce using rule 84 (comma_and -> COMMA .)
    CLASS_IDENTIFIER reduce using rule 84 (comma_and -> COMMA .)
    COMMA           reduce using rule 84 (comma_and -> COMMA .)
    AND             reduce using rule 84 (comma_and -> COMMA .)
    SOME            reduce using rule 84 (comma_and -> COMMA .)
    ALL             reduce using rule 84 (comma_and -> COMMA .)
    VALUE           reduce using rule 84 (comma_and -> COMMA .)
    THAT            reduce using rule 84 (comma_and -> COMMA .)


state 26

    (85) comma_and -> AND .

    OPEN_PAREN      reduce using rule 85 (comma_and -> AND .)
    PROPERTY_IDENTIFIER reduce using rule 85 (comma_and -> AND .)
    CLASS_IDENTIFIER reduce using rule 85 (comma_and -> AND .)
    COMMA           reduce using rule 85 (comma_and -> AND .)
    AND             reduce using rule 85 (comma_and -> AND .)
    SOME            reduce using rule 85 (comma_and -> AND .)
    ALL             reduce using rule 85 (comma_and -> AND .)
    VALUE           reduce using rule 85 (comma_and -> AND .)
    THAT            reduce using rule 85 (comma_and -> AND .)


state 27

    (17) defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section .

    CLASS           reduce using rule 17 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section .)
    $end            reduce using rule 17 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section .)


state 28

    (80) individuals_section -> INDIVIDUALS . individuals
    (82) individuals -> . INDIVIDUAL_NAME
    (83) individuals -> . INDIVIDUAL_NAME COMMA individuals

    INDIVIDUAL_NAME shift and go to state 46

    individuals                    shift and go to state 68

state 29

    (81) individuals_section -> empty .

    CLASS           reduce using rule 81 (individuals_section -> empty .)
    $end            reduce using rule 81 (individuals_section -> empty .)


state 30

    (5) primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section .

    CLASS           reduce using rule 5 (primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section .)
    $end            reduce using rule 5 (primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section .)


state 31

    (13) disjoint_section -> DISJOINTCLASSES quantifier_aux .
    (38) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

    INDIVIDUALS     reduce using rule 13 (disjoint_section -> DISJOINTCLASSES quantifier_aux .)
    CLASS           reduce using rule 13 (disjoint_section -> DISJOINTCLASSES quantifier_aux .)
    $end            reduce using rule 13 (disjoint_section -> DISJOINTCLASSES quantifier_aux .)
    COMMA           shift and go to state 25
    AND             shift and go to state 26

    comma_and                      shift and go to state 69

state 32

    (31) quantifier_aux -> comma_and . quantifier_aux
    (31) quantifier_aux -> . comma_and quantifier_aux
    (32) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (37) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (38) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (40) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (41) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (43) quantifier_aux -> . CLASS_IDENTIFIER
    (44) quantifier_aux -> . PROPERTY_IDENTIFIER
    (45) quantifier_aux -> . quantifier
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND
    (59) quantifier -> . SOME
    (60) quantifier -> . ALL
    (61) quantifier -> . VALUE
    (62) quantifier -> . THAT

    OPEN_PAREN      shift and go to state 33
    PROPERTY_IDENTIFIER shift and go to state 34
    CLASS_IDENTIFIER shift and go to state 36
    COMMA           shift and go to state 25
    AND             shift and go to state 26
    SOME            shift and go to state 37
    ALL             shift and go to state 38
    VALUE           shift and go to state 39
    THAT            shift and go to state 40

    comma_and                      shift and go to state 32
    quantifier_aux                 shift and go to state 70
    quantifier                     shift and go to state 35

state 33

    (32) quantifier_aux -> OPEN_PAREN . quantifier_aux CLOSE_PAREN
    (31) quantifier_aux -> . comma_and quantifier_aux
    (32) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (37) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (38) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (40) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (41) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (43) quantifier_aux -> . CLASS_IDENTIFIER
    (44) quantifier_aux -> . PROPERTY_IDENTIFIER
    (45) quantifier_aux -> . quantifier
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND
    (59) quantifier -> . SOME
    (60) quantifier -> . ALL
    (61) quantifier -> . VALUE
    (62) quantifier -> . THAT

    OPEN_PAREN      shift and go to state 33
    PROPERTY_IDENTIFIER shift and go to state 34
    CLASS_IDENTIFIER shift and go to state 36
    COMMA           shift and go to state 25
    AND             shift and go to state 26
    SOME            shift and go to state 37
    ALL             shift and go to state 38
    VALUE           shift and go to state 39
    THAT            shift and go to state 40

    quantifier_aux                 shift and go to state 71
    comma_and                      shift and go to state 32
    quantifier                     shift and go to state 35

state 34

    (33) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier CLASS_IDENTIFIER
    (34) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier CLASS_IDENTIFIER quantifier_aux
    (35) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier namespace_type
    (36) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier_number CARDINALITY namespace_type
    (37) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier_number CARDINALITY CLASS_IDENTIFIER
    (41) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier quantifier_aux
    (44) quantifier_aux -> PROPERTY_IDENTIFIER .
    (59) quantifier -> . SOME
    (60) quantifier -> . ALL
    (61) quantifier -> . VALUE
    (62) quantifier -> . THAT
    (63) quantifier_number -> . MAX
    (64) quantifier_number -> . MIN
    (65) quantifier_number -> . EXACTLY

    COMMA           reduce using rule 44 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    AND             reduce using rule 44 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 44 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    CLASS           reduce using rule 44 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    $end            reduce using rule 44 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 44 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    CLASS_IDENTIFIER reduce using rule 44 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    SOME            shift and go to state 37
    ALL             shift and go to state 38
    VALUE           shift and go to state 39
    THAT            shift and go to state 40
    MAX             shift and go to state 74
    MIN             shift and go to state 75
    EXACTLY         shift and go to state 76

    quantifier                     shift and go to state 72
    quantifier_number              shift and go to state 73

state 35

    (45) quantifier_aux -> quantifier .

    COMMA           reduce using rule 45 (quantifier_aux -> quantifier .)
    AND             reduce using rule 45 (quantifier_aux -> quantifier .)
    INDIVIDUALS     reduce using rule 45 (quantifier_aux -> quantifier .)
    CLASS           reduce using rule 45 (quantifier_aux -> quantifier .)
    $end            reduce using rule 45 (quantifier_aux -> quantifier .)
    CLOSE_PAREN     reduce using rule 45 (quantifier_aux -> quantifier .)
    CLASS_IDENTIFIER reduce using rule 45 (quantifier_aux -> quantifier .)


state 36

    (39) quantifier_aux -> CLASS_IDENTIFIER . quantifier quantifier_aux
    (40) quantifier_aux -> CLASS_IDENTIFIER . OR quantifier_aux
    (42) quantifier_aux -> CLASS_IDENTIFIER . comma_and quantifier_aux
    (43) quantifier_aux -> CLASS_IDENTIFIER .
    (59) quantifier -> . SOME
    (60) quantifier -> . ALL
    (61) quantifier -> . VALUE
    (62) quantifier -> . THAT
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    OR              shift and go to state 78
    INDIVIDUALS     reduce using rule 43 (quantifier_aux -> CLASS_IDENTIFIER .)
    CLASS           reduce using rule 43 (quantifier_aux -> CLASS_IDENTIFIER .)
    $end            reduce using rule 43 (quantifier_aux -> CLASS_IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 43 (quantifier_aux -> CLASS_IDENTIFIER .)
    CLASS_IDENTIFIER reduce using rule 43 (quantifier_aux -> CLASS_IDENTIFIER .)
    SOME            shift and go to state 37
    ALL             shift and go to state 38
    VALUE           shift and go to state 39
    THAT            shift and go to state 40
    COMMA           shift and go to state 25
    AND             shift and go to state 26

  ! COMMA           [ reduce using rule 43 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! AND             [ reduce using rule 43 (quantifier_aux -> CLASS_IDENTIFIER .) ]

    quantifier                     shift and go to state 77
    comma_and                      shift and go to state 79

state 37

    (59) quantifier -> SOME .

    COMMA           reduce using rule 59 (quantifier -> SOME .)
    AND             reduce using rule 59 (quantifier -> SOME .)
    INDIVIDUALS     reduce using rule 59 (quantifier -> SOME .)
    CLASS           reduce using rule 59 (quantifier -> SOME .)
    $end            reduce using rule 59 (quantifier -> SOME .)
    CLOSE_PAREN     reduce using rule 59 (quantifier -> SOME .)
    CLASS_IDENTIFIER reduce using rule 59 (quantifier -> SOME .)
    NAMESPACE       reduce using rule 59 (quantifier -> SOME .)
    OPEN_PAREN      reduce using rule 59 (quantifier -> SOME .)
    PROPERTY_IDENTIFIER reduce using rule 59 (quantifier -> SOME .)
    SOME            reduce using rule 59 (quantifier -> SOME .)
    ALL             reduce using rule 59 (quantifier -> SOME .)
    VALUE           reduce using rule 59 (quantifier -> SOME .)
    THAT            reduce using rule 59 (quantifier -> SOME .)


state 38

    (60) quantifier -> ALL .

    COMMA           reduce using rule 60 (quantifier -> ALL .)
    AND             reduce using rule 60 (quantifier -> ALL .)
    INDIVIDUALS     reduce using rule 60 (quantifier -> ALL .)
    CLASS           reduce using rule 60 (quantifier -> ALL .)
    $end            reduce using rule 60 (quantifier -> ALL .)
    CLOSE_PAREN     reduce using rule 60 (quantifier -> ALL .)
    CLASS_IDENTIFIER reduce using rule 60 (quantifier -> ALL .)
    NAMESPACE       reduce using rule 60 (quantifier -> ALL .)
    OPEN_PAREN      reduce using rule 60 (quantifier -> ALL .)
    PROPERTY_IDENTIFIER reduce using rule 60 (quantifier -> ALL .)
    SOME            reduce using rule 60 (quantifier -> ALL .)
    ALL             reduce using rule 60 (quantifier -> ALL .)
    VALUE           reduce using rule 60 (quantifier -> ALL .)
    THAT            reduce using rule 60 (quantifier -> ALL .)


state 39

    (61) quantifier -> VALUE .

    COMMA           reduce using rule 61 (quantifier -> VALUE .)
    AND             reduce using rule 61 (quantifier -> VALUE .)
    INDIVIDUALS     reduce using rule 61 (quantifier -> VALUE .)
    CLASS           reduce using rule 61 (quantifier -> VALUE .)
    $end            reduce using rule 61 (quantifier -> VALUE .)
    CLOSE_PAREN     reduce using rule 61 (quantifier -> VALUE .)
    CLASS_IDENTIFIER reduce using rule 61 (quantifier -> VALUE .)
    NAMESPACE       reduce using rule 61 (quantifier -> VALUE .)
    OPEN_PAREN      reduce using rule 61 (quantifier -> VALUE .)
    PROPERTY_IDENTIFIER reduce using rule 61 (quantifier -> VALUE .)
    SOME            reduce using rule 61 (quantifier -> VALUE .)
    ALL             reduce using rule 61 (quantifier -> VALUE .)
    VALUE           reduce using rule 61 (quantifier -> VALUE .)
    THAT            reduce using rule 61 (quantifier -> VALUE .)


state 40

    (62) quantifier -> THAT .

    COMMA           reduce using rule 62 (quantifier -> THAT .)
    AND             reduce using rule 62 (quantifier -> THAT .)
    INDIVIDUALS     reduce using rule 62 (quantifier -> THAT .)
    CLASS           reduce using rule 62 (quantifier -> THAT .)
    $end            reduce using rule 62 (quantifier -> THAT .)
    CLOSE_PAREN     reduce using rule 62 (quantifier -> THAT .)
    CLASS_IDENTIFIER reduce using rule 62 (quantifier -> THAT .)
    NAMESPACE       reduce using rule 62 (quantifier -> THAT .)
    OPEN_PAREN      reduce using rule 62 (quantifier -> THAT .)
    PROPERTY_IDENTIFIER reduce using rule 62 (quantifier -> THAT .)
    SOME            reduce using rule 62 (quantifier -> THAT .)
    ALL             reduce using rule 62 (quantifier -> THAT .)
    VALUE           reduce using rule 62 (quantifier -> THAT .)
    THAT            reduce using rule 62 (quantifier -> THAT .)


state 41

    (23) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER OR . covered_class
    (20) covered_class -> . CLASS_IDENTIFIER OR covered_class
    (21) covered_class -> . CLASS_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 80

    covered_class                  shift and go to state 81

state 42

    (24) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER only_defined .

    SUBCLASSOF      reduce using rule 24 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER only_defined .)
    CLASS           reduce using rule 24 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER only_defined .)
    $end            reduce using rule 24 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER only_defined .)


state 43

    (25) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER aninhada .

    SUBCLASSOF      reduce using rule 25 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER aninhada .)
    CLASS           reduce using rule 25 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER aninhada .)
    $end            reduce using rule 25 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER aninhada .)


state 44

    (30) only_defined -> comma_and . OPEN_PAREN PROPERTY_IDENTIFIER quantifier_aux CLASS_IDENTIFIER CLOSE_PAREN
    (28) aninhada -> comma_and . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (29) aninhada -> comma_and . OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN

    OPEN_PAREN      shift and go to state 82


state 45

    (19) enum_class -> OPEN_CURLY individuals . CLOSE_CURLY

    CLOSE_CURLY     shift and go to state 83


state 46

    (82) individuals -> INDIVIDUAL_NAME .
    (83) individuals -> INDIVIDUAL_NAME . COMMA individuals

    CLOSE_CURLY     reduce using rule 82 (individuals -> INDIVIDUAL_NAME .)
    CLASS           reduce using rule 82 (individuals -> INDIVIDUAL_NAME .)
    $end            reduce using rule 82 (individuals -> INDIVIDUAL_NAME .)
    COMMA           shift and go to state 84


state 47

    (53) quantifier_aux_axioma -> CLASS_IDENTIFIER . quantifier_geral quantifier_aux_axioma
    (54) quantifier_aux_axioma -> CLASS_IDENTIFIER . OR quantifier_aux_axioma
    (56) quantifier_aux_axioma -> CLASS_IDENTIFIER . comma_and quantifier_aux_axioma
    (57) quantifier_aux_axioma -> CLASS_IDENTIFIER .
    (66) quantifier_geral -> . SOME
    (67) quantifier_geral -> . ALL
    (68) quantifier_geral -> . VALUE
    (69) quantifier_geral -> . MAX
    (70) quantifier_geral -> . MIN
    (71) quantifier_geral -> . EXACTLY
    (72) quantifier_geral -> . THAT
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    OR              shift and go to state 85
    ONLY            reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .)
    DISJOINTCLASSES reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .)
    CLASS           reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .)
    $end            reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .)
    SOME            shift and go to state 53
    ALL             shift and go to state 54
    VALUE           shift and go to state 55
    MAX             shift and go to state 56
    MIN             shift and go to state 57
    EXACTLY         shift and go to state 58
    THAT            shift and go to state 59
    COMMA           shift and go to state 25
    AND             shift and go to state 26

  ! COMMA           [ reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .) ]
  ! AND             [ reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .) ]

    quantifier_geral               shift and go to state 50
    comma_and                      shift and go to state 86

state 48

    (7) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER OR . covered_class
    (54) quantifier_aux_axioma -> CLASS_IDENTIFIER OR . quantifier_aux_axioma
    (20) covered_class -> . CLASS_IDENTIFIER OR covered_class
    (21) covered_class -> . CLASS_IDENTIFIER
    (46) quantifier_aux_axioma -> . comma_and quantifier_aux_axioma
    (47) quantifier_aux_axioma -> . OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN
    (48) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (49) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (50) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER
    (51) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral namespace_type
    (52) quantifier_aux_axioma -> . quantifier_aux_axioma comma_and quantifier_aux_axioma
    (53) quantifier_aux_axioma -> . CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (54) quantifier_aux_axioma -> . CLASS_IDENTIFIER OR quantifier_aux_axioma
    (55) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (56) quantifier_aux_axioma -> . CLASS_IDENTIFIER comma_and quantifier_aux_axioma
    (57) quantifier_aux_axioma -> . CLASS_IDENTIFIER
    (58) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

    CLASS_IDENTIFIER shift and go to state 87
    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 24
    COMMA           shift and go to state 25
    AND             shift and go to state 26

    covered_class                  shift and go to state 88
    quantifier_aux_axioma          shift and go to state 89
    comma_and                      shift and go to state 23

state 49

    (8) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions_axioma . ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN

    ONLY            shift and go to state 90


state 50

    (53) quantifier_aux_axioma -> CLASS_IDENTIFIER quantifier_geral . quantifier_aux_axioma
    (46) quantifier_aux_axioma -> . comma_and quantifier_aux_axioma
    (47) quantifier_aux_axioma -> . OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN
    (48) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (49) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (50) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER
    (51) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral namespace_type
    (52) quantifier_aux_axioma -> . quantifier_aux_axioma comma_and quantifier_aux_axioma
    (53) quantifier_aux_axioma -> . CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (54) quantifier_aux_axioma -> . CLASS_IDENTIFIER OR quantifier_aux_axioma
    (55) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (56) quantifier_aux_axioma -> . CLASS_IDENTIFIER comma_and quantifier_aux_axioma
    (57) quantifier_aux_axioma -> . CLASS_IDENTIFIER
    (58) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 24
    CLASS_IDENTIFIER shift and go to state 47
    COMMA           shift and go to state 25
    AND             shift and go to state 26

    quantifier_aux_axioma          shift and go to state 91
    comma_and                      shift and go to state 23

state 51

    (27) def_descriptions_axioma -> quantifier_aux_axioma .
    (52) quantifier_aux_axioma -> quantifier_aux_axioma . comma_and quantifier_aux_axioma
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

    ONLY            reduce using rule 27 (def_descriptions_axioma -> quantifier_aux_axioma .)
    COMMA           shift and go to state 25
    AND             shift and go to state 26

    comma_and                      shift and go to state 61

state 52

    (56) quantifier_aux_axioma -> CLASS_IDENTIFIER comma_and . quantifier_aux_axioma
    (46) quantifier_aux_axioma -> comma_and . quantifier_aux_axioma
    (46) quantifier_aux_axioma -> . comma_and quantifier_aux_axioma
    (47) quantifier_aux_axioma -> . OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN
    (48) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (49) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (50) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER
    (51) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral namespace_type
    (52) quantifier_aux_axioma -> . quantifier_aux_axioma comma_and quantifier_aux_axioma
    (53) quantifier_aux_axioma -> . CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (54) quantifier_aux_axioma -> . CLASS_IDENTIFIER OR quantifier_aux_axioma
    (55) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (56) quantifier_aux_axioma -> . CLASS_IDENTIFIER comma_and quantifier_aux_axioma
    (57) quantifier_aux_axioma -> . CLASS_IDENTIFIER
    (58) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 24
    CLASS_IDENTIFIER shift and go to state 47
    COMMA           shift and go to state 25
    AND             shift and go to state 26

    comma_and                      shift and go to state 23
    quantifier_aux_axioma          shift and go to state 92

state 53

    (66) quantifier_geral -> SOME .

    OPEN_PAREN      reduce using rule 66 (quantifier_geral -> SOME .)
    PROPERTY_IDENTIFIER reduce using rule 66 (quantifier_geral -> SOME .)
    CLASS_IDENTIFIER reduce using rule 66 (quantifier_geral -> SOME .)
    COMMA           reduce using rule 66 (quantifier_geral -> SOME .)
    AND             reduce using rule 66 (quantifier_geral -> SOME .)
    NAMESPACE       reduce using rule 66 (quantifier_geral -> SOME .)


state 54

    (67) quantifier_geral -> ALL .

    OPEN_PAREN      reduce using rule 67 (quantifier_geral -> ALL .)
    PROPERTY_IDENTIFIER reduce using rule 67 (quantifier_geral -> ALL .)
    CLASS_IDENTIFIER reduce using rule 67 (quantifier_geral -> ALL .)
    COMMA           reduce using rule 67 (quantifier_geral -> ALL .)
    AND             reduce using rule 67 (quantifier_geral -> ALL .)
    NAMESPACE       reduce using rule 67 (quantifier_geral -> ALL .)


state 55

    (68) quantifier_geral -> VALUE .

    OPEN_PAREN      reduce using rule 68 (quantifier_geral -> VALUE .)
    PROPERTY_IDENTIFIER reduce using rule 68 (quantifier_geral -> VALUE .)
    CLASS_IDENTIFIER reduce using rule 68 (quantifier_geral -> VALUE .)
    COMMA           reduce using rule 68 (quantifier_geral -> VALUE .)
    AND             reduce using rule 68 (quantifier_geral -> VALUE .)
    NAMESPACE       reduce using rule 68 (quantifier_geral -> VALUE .)


state 56

    (69) quantifier_geral -> MAX .

    OPEN_PAREN      reduce using rule 69 (quantifier_geral -> MAX .)
    PROPERTY_IDENTIFIER reduce using rule 69 (quantifier_geral -> MAX .)
    CLASS_IDENTIFIER reduce using rule 69 (quantifier_geral -> MAX .)
    COMMA           reduce using rule 69 (quantifier_geral -> MAX .)
    AND             reduce using rule 69 (quantifier_geral -> MAX .)


state 57

    (70) quantifier_geral -> MIN .

    OPEN_PAREN      reduce using rule 70 (quantifier_geral -> MIN .)
    PROPERTY_IDENTIFIER reduce using rule 70 (quantifier_geral -> MIN .)
    CLASS_IDENTIFIER reduce using rule 70 (quantifier_geral -> MIN .)
    COMMA           reduce using rule 70 (quantifier_geral -> MIN .)
    AND             reduce using rule 70 (quantifier_geral -> MIN .)


state 58

    (71) quantifier_geral -> EXACTLY .

    OPEN_PAREN      reduce using rule 71 (quantifier_geral -> EXACTLY .)
    PROPERTY_IDENTIFIER reduce using rule 71 (quantifier_geral -> EXACTLY .)
    CLASS_IDENTIFIER reduce using rule 71 (quantifier_geral -> EXACTLY .)
    COMMA           reduce using rule 71 (quantifier_geral -> EXACTLY .)
    AND             reduce using rule 71 (quantifier_geral -> EXACTLY .)


state 59

    (72) quantifier_geral -> THAT .

    OPEN_PAREN      reduce using rule 72 (quantifier_geral -> THAT .)
    PROPERTY_IDENTIFIER reduce using rule 72 (quantifier_geral -> THAT .)
    CLASS_IDENTIFIER reduce using rule 72 (quantifier_geral -> THAT .)
    COMMA           reduce using rule 72 (quantifier_geral -> THAT .)
    AND             reduce using rule 72 (quantifier_geral -> THAT .)
    NAMESPACE       reduce using rule 72 (quantifier_geral -> THAT .)


state 60

    (47) quantifier_aux_axioma -> OPEN_PAREN quantifier_aux_axioma . CLOSE_PAREN
    (52) quantifier_aux_axioma -> quantifier_aux_axioma . comma_and quantifier_aux_axioma
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

    CLOSE_PAREN     shift and go to state 93
    COMMA           shift and go to state 25
    AND             shift and go to state 26

    comma_and                      shift and go to state 61

state 61

    (52) quantifier_aux_axioma -> quantifier_aux_axioma comma_and . quantifier_aux_axioma
    (46) quantifier_aux_axioma -> . comma_and quantifier_aux_axioma
    (47) quantifier_aux_axioma -> . OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN
    (48) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (49) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (50) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER
    (51) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral namespace_type
    (52) quantifier_aux_axioma -> . quantifier_aux_axioma comma_and quantifier_aux_axioma
    (53) quantifier_aux_axioma -> . CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (54) quantifier_aux_axioma -> . CLASS_IDENTIFIER OR quantifier_aux_axioma
    (55) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (56) quantifier_aux_axioma -> . CLASS_IDENTIFIER comma_and quantifier_aux_axioma
    (57) quantifier_aux_axioma -> . CLASS_IDENTIFIER
    (58) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 24
    CLASS_IDENTIFIER shift and go to state 47
    COMMA           shift and go to state 25
    AND             shift and go to state 26

    quantifier_aux_axioma          shift and go to state 94
    comma_and                      shift and go to state 23

state 62

    (46) quantifier_aux_axioma -> comma_and quantifier_aux_axioma .
    (52) quantifier_aux_axioma -> quantifier_aux_axioma . comma_and quantifier_aux_axioma
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 46 (quantifier_aux_axioma -> comma_and quantifier_aux_axioma .)
    INDIVIDUALS     reduce using rule 46 (quantifier_aux_axioma -> comma_and quantifier_aux_axioma .)
    CLASS           reduce using rule 46 (quantifier_aux_axioma -> comma_and quantifier_aux_axioma .)
    $end            reduce using rule 46 (quantifier_aux_axioma -> comma_and quantifier_aux_axioma .)
    CLOSE_PAREN     reduce using rule 46 (quantifier_aux_axioma -> comma_and quantifier_aux_axioma .)
    ONLY            reduce using rule 46 (quantifier_aux_axioma -> comma_and quantifier_aux_axioma .)
    COMMA           shift and go to state 25
    AND             shift and go to state 26

  ! COMMA           [ reduce using rule 46 (quantifier_aux_axioma -> comma_and quantifier_aux_axioma .) ]
  ! AND             [ reduce using rule 46 (quantifier_aux_axioma -> comma_and quantifier_aux_axioma .) ]

    comma_and                      shift and go to state 61

state 63

    (48) quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number . CARDINALITY namespace_type
    (49) quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number . CARDINALITY CLASS_IDENTIFIER

    CARDINALITY     shift and go to state 95


state 64

    (50) quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral . CLASS_IDENTIFIER
    (51) quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral . namespace_type
    (55) quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral . quantifier_aux_axioma
    (78) namespace_type -> . NAMESPACE TYPE
    (79) namespace_type -> . NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET
    (46) quantifier_aux_axioma -> . comma_and quantifier_aux_axioma
    (47) quantifier_aux_axioma -> . OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN
    (48) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (49) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (50) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER
    (51) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral namespace_type
    (52) quantifier_aux_axioma -> . quantifier_aux_axioma comma_and quantifier_aux_axioma
    (53) quantifier_aux_axioma -> . CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (54) quantifier_aux_axioma -> . CLASS_IDENTIFIER OR quantifier_aux_axioma
    (55) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (56) quantifier_aux_axioma -> . CLASS_IDENTIFIER comma_and quantifier_aux_axioma
    (57) quantifier_aux_axioma -> . CLASS_IDENTIFIER
    (58) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

    CLASS_IDENTIFIER shift and go to state 96
    NAMESPACE       shift and go to state 99
    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 24
    COMMA           shift and go to state 25
    AND             shift and go to state 26

    namespace_type                 shift and go to state 97
    quantifier_aux_axioma          shift and go to state 98
    comma_and                      shift and go to state 23

state 65

    (63) quantifier_number -> MAX .
    (69) quantifier_geral -> MAX .

    CARDINALITY     reduce using rule 63 (quantifier_number -> MAX .)
    CLASS_IDENTIFIER reduce using rule 69 (quantifier_geral -> MAX .)
    NAMESPACE       reduce using rule 69 (quantifier_geral -> MAX .)
    OPEN_PAREN      reduce using rule 69 (quantifier_geral -> MAX .)
    PROPERTY_IDENTIFIER reduce using rule 69 (quantifier_geral -> MAX .)
    COMMA           reduce using rule 69 (quantifier_geral -> MAX .)
    AND             reduce using rule 69 (quantifier_geral -> MAX .)


state 66

    (64) quantifier_number -> MIN .
    (70) quantifier_geral -> MIN .

    CARDINALITY     reduce using rule 64 (quantifier_number -> MIN .)
    CLASS_IDENTIFIER reduce using rule 70 (quantifier_geral -> MIN .)
    NAMESPACE       reduce using rule 70 (quantifier_geral -> MIN .)
    OPEN_PAREN      reduce using rule 70 (quantifier_geral -> MIN .)
    PROPERTY_IDENTIFIER reduce using rule 70 (quantifier_geral -> MIN .)
    COMMA           reduce using rule 70 (quantifier_geral -> MIN .)
    AND             reduce using rule 70 (quantifier_geral -> MIN .)


state 67

    (65) quantifier_number -> EXACTLY .
    (71) quantifier_geral -> EXACTLY .

    CARDINALITY     reduce using rule 65 (quantifier_number -> EXACTLY .)
    CLASS_IDENTIFIER reduce using rule 71 (quantifier_geral -> EXACTLY .)
    NAMESPACE       reduce using rule 71 (quantifier_geral -> EXACTLY .)
    OPEN_PAREN      reduce using rule 71 (quantifier_geral -> EXACTLY .)
    PROPERTY_IDENTIFIER reduce using rule 71 (quantifier_geral -> EXACTLY .)
    COMMA           reduce using rule 71 (quantifier_geral -> EXACTLY .)
    AND             reduce using rule 71 (quantifier_geral -> EXACTLY .)


state 68

    (80) individuals_section -> INDIVIDUALS individuals .

    CLASS           reduce using rule 80 (individuals_section -> INDIVIDUALS individuals .)
    $end            reduce using rule 80 (individuals_section -> INDIVIDUALS individuals .)


state 69

    (38) quantifier_aux -> quantifier_aux comma_and . quantifier_aux
    (31) quantifier_aux -> . comma_and quantifier_aux
    (32) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (37) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (38) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (40) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (41) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (43) quantifier_aux -> . CLASS_IDENTIFIER
    (44) quantifier_aux -> . PROPERTY_IDENTIFIER
    (45) quantifier_aux -> . quantifier
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND
    (59) quantifier -> . SOME
    (60) quantifier -> . ALL
    (61) quantifier -> . VALUE
    (62) quantifier -> . THAT

    OPEN_PAREN      shift and go to state 33
    PROPERTY_IDENTIFIER shift and go to state 34
    CLASS_IDENTIFIER shift and go to state 36
    COMMA           shift and go to state 25
    AND             shift and go to state 26
    SOME            shift and go to state 37
    ALL             shift and go to state 38
    VALUE           shift and go to state 39
    THAT            shift and go to state 40

    quantifier_aux                 shift and go to state 100
    comma_and                      shift and go to state 32
    quantifier                     shift and go to state 35

state 70

    (31) quantifier_aux -> comma_and quantifier_aux .
    (38) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    INDIVIDUALS     reduce using rule 31 (quantifier_aux -> comma_and quantifier_aux .)
    CLASS           reduce using rule 31 (quantifier_aux -> comma_and quantifier_aux .)
    $end            reduce using rule 31 (quantifier_aux -> comma_and quantifier_aux .)
    CLOSE_PAREN     reduce using rule 31 (quantifier_aux -> comma_and quantifier_aux .)
    CLASS_IDENTIFIER reduce using rule 31 (quantifier_aux -> comma_and quantifier_aux .)
    COMMA           shift and go to state 25
    AND             shift and go to state 26

  ! COMMA           [ reduce using rule 31 (quantifier_aux -> comma_and quantifier_aux .) ]
  ! AND             [ reduce using rule 31 (quantifier_aux -> comma_and quantifier_aux .) ]

    comma_and                      shift and go to state 69

state 71

    (32) quantifier_aux -> OPEN_PAREN quantifier_aux . CLOSE_PAREN
    (38) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

    CLOSE_PAREN     shift and go to state 101
    COMMA           shift and go to state 25
    AND             shift and go to state 26

    comma_and                      shift and go to state 69

state 72

    (33) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . CLASS_IDENTIFIER
    (34) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . CLASS_IDENTIFIER quantifier_aux
    (35) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . namespace_type
    (41) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . quantifier_aux
    (78) namespace_type -> . NAMESPACE TYPE
    (79) namespace_type -> . NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET
    (31) quantifier_aux -> . comma_and quantifier_aux
    (32) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (37) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (38) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (40) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (41) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (43) quantifier_aux -> . CLASS_IDENTIFIER
    (44) quantifier_aux -> . PROPERTY_IDENTIFIER
    (45) quantifier_aux -> . quantifier
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND
    (59) quantifier -> . SOME
    (60) quantifier -> . ALL
    (61) quantifier -> . VALUE
    (62) quantifier -> . THAT

    CLASS_IDENTIFIER shift and go to state 102
    NAMESPACE       shift and go to state 99
    OPEN_PAREN      shift and go to state 33
    PROPERTY_IDENTIFIER shift and go to state 34
    COMMA           shift and go to state 25
    AND             shift and go to state 26
    SOME            shift and go to state 37
    ALL             shift and go to state 38
    VALUE           shift and go to state 39
    THAT            shift and go to state 40

    quantifier                     shift and go to state 35
    quantifier_aux                 shift and go to state 103
    namespace_type                 shift and go to state 104
    comma_and                      shift and go to state 32

state 73

    (36) quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number . CARDINALITY namespace_type
    (37) quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number . CARDINALITY CLASS_IDENTIFIER

    CARDINALITY     shift and go to state 105


state 74

    (63) quantifier_number -> MAX .

    CARDINALITY     reduce using rule 63 (quantifier_number -> MAX .)


state 75

    (64) quantifier_number -> MIN .

    CARDINALITY     reduce using rule 64 (quantifier_number -> MIN .)


state 76

    (65) quantifier_number -> EXACTLY .

    CARDINALITY     reduce using rule 65 (quantifier_number -> EXACTLY .)


state 77

    (39) quantifier_aux -> CLASS_IDENTIFIER quantifier . quantifier_aux
    (31) quantifier_aux -> . comma_and quantifier_aux
    (32) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (37) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (38) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (40) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (41) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (43) quantifier_aux -> . CLASS_IDENTIFIER
    (44) quantifier_aux -> . PROPERTY_IDENTIFIER
    (45) quantifier_aux -> . quantifier
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND
    (59) quantifier -> . SOME
    (60) quantifier -> . ALL
    (61) quantifier -> . VALUE
    (62) quantifier -> . THAT

    OPEN_PAREN      shift and go to state 33
    PROPERTY_IDENTIFIER shift and go to state 34
    CLASS_IDENTIFIER shift and go to state 36
    COMMA           shift and go to state 25
    AND             shift and go to state 26
    SOME            shift and go to state 37
    ALL             shift and go to state 38
    VALUE           shift and go to state 39
    THAT            shift and go to state 40

    quantifier                     shift and go to state 35
    quantifier_aux                 shift and go to state 106
    comma_and                      shift and go to state 32

state 78

    (40) quantifier_aux -> CLASS_IDENTIFIER OR . quantifier_aux
    (31) quantifier_aux -> . comma_and quantifier_aux
    (32) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (37) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (38) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (40) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (41) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (43) quantifier_aux -> . CLASS_IDENTIFIER
    (44) quantifier_aux -> . PROPERTY_IDENTIFIER
    (45) quantifier_aux -> . quantifier
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND
    (59) quantifier -> . SOME
    (60) quantifier -> . ALL
    (61) quantifier -> . VALUE
    (62) quantifier -> . THAT

    OPEN_PAREN      shift and go to state 33
    PROPERTY_IDENTIFIER shift and go to state 34
    CLASS_IDENTIFIER shift and go to state 36
    COMMA           shift and go to state 25
    AND             shift and go to state 26
    SOME            shift and go to state 37
    ALL             shift and go to state 38
    VALUE           shift and go to state 39
    THAT            shift and go to state 40

    quantifier_aux                 shift and go to state 107
    comma_and                      shift and go to state 32
    quantifier                     shift and go to state 35

state 79

    (42) quantifier_aux -> CLASS_IDENTIFIER comma_and . quantifier_aux
    (31) quantifier_aux -> . comma_and quantifier_aux
    (32) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (37) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (38) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (40) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (41) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (43) quantifier_aux -> . CLASS_IDENTIFIER
    (44) quantifier_aux -> . PROPERTY_IDENTIFIER
    (45) quantifier_aux -> . quantifier
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND
    (59) quantifier -> . SOME
    (60) quantifier -> . ALL
    (61) quantifier -> . VALUE
    (62) quantifier -> . THAT

    OPEN_PAREN      shift and go to state 33
    PROPERTY_IDENTIFIER shift and go to state 34
    CLASS_IDENTIFIER shift and go to state 36
    COMMA           shift and go to state 25
    AND             shift and go to state 26
    SOME            shift and go to state 37
    ALL             shift and go to state 38
    VALUE           shift and go to state 39
    THAT            shift and go to state 40

    comma_and                      shift and go to state 32
    quantifier_aux                 shift and go to state 108
    quantifier                     shift and go to state 35

state 80

    (20) covered_class -> CLASS_IDENTIFIER . OR covered_class
    (21) covered_class -> CLASS_IDENTIFIER .

    OR              shift and go to state 109
    SUBCLASSOF      reduce using rule 21 (covered_class -> CLASS_IDENTIFIER .)
    CLASS           reduce using rule 21 (covered_class -> CLASS_IDENTIFIER .)
    $end            reduce using rule 21 (covered_class -> CLASS_IDENTIFIER .)


state 81

    (23) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER OR covered_class .

    SUBCLASSOF      reduce using rule 23 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER OR covered_class .)
    CLASS           reduce using rule 23 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER OR covered_class .)
    $end            reduce using rule 23 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER OR covered_class .)


state 82

    (30) only_defined -> comma_and OPEN_PAREN . PROPERTY_IDENTIFIER quantifier_aux CLASS_IDENTIFIER CLOSE_PAREN
    (28) aninhada -> comma_and OPEN_PAREN . quantifier_aux CLOSE_PAREN
    (29) aninhada -> comma_and OPEN_PAREN . PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN
    (31) quantifier_aux -> . comma_and quantifier_aux
    (32) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (37) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (38) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (40) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (41) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (43) quantifier_aux -> . CLASS_IDENTIFIER
    (44) quantifier_aux -> . PROPERTY_IDENTIFIER
    (45) quantifier_aux -> . quantifier
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND
    (59) quantifier -> . SOME
    (60) quantifier -> . ALL
    (61) quantifier -> . VALUE
    (62) quantifier -> . THAT

    PROPERTY_IDENTIFIER shift and go to state 110
    OPEN_PAREN      shift and go to state 33
    CLASS_IDENTIFIER shift and go to state 36
    COMMA           shift and go to state 25
    AND             shift and go to state 26
    SOME            shift and go to state 37
    ALL             shift and go to state 38
    VALUE           shift and go to state 39
    THAT            shift and go to state 40

    comma_and                      shift and go to state 32
    quantifier_aux                 shift and go to state 111
    quantifier                     shift and go to state 35

state 83

    (19) enum_class -> OPEN_CURLY individuals CLOSE_CURLY .

    SUBCLASSOF      reduce using rule 19 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)
    CLASS           reduce using rule 19 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)
    $end            reduce using rule 19 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)
    DISJOINTCLASSES reduce using rule 19 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)
    INDIVIDUALS     reduce using rule 19 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)


state 84

    (83) individuals -> INDIVIDUAL_NAME COMMA . individuals
    (82) individuals -> . INDIVIDUAL_NAME
    (83) individuals -> . INDIVIDUAL_NAME COMMA individuals

    INDIVIDUAL_NAME shift and go to state 46

    individuals                    shift and go to state 112

state 85

    (54) quantifier_aux_axioma -> CLASS_IDENTIFIER OR . quantifier_aux_axioma
    (46) quantifier_aux_axioma -> . comma_and quantifier_aux_axioma
    (47) quantifier_aux_axioma -> . OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN
    (48) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (49) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (50) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER
    (51) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral namespace_type
    (52) quantifier_aux_axioma -> . quantifier_aux_axioma comma_and quantifier_aux_axioma
    (53) quantifier_aux_axioma -> . CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (54) quantifier_aux_axioma -> . CLASS_IDENTIFIER OR quantifier_aux_axioma
    (55) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (56) quantifier_aux_axioma -> . CLASS_IDENTIFIER comma_and quantifier_aux_axioma
    (57) quantifier_aux_axioma -> . CLASS_IDENTIFIER
    (58) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 24
    CLASS_IDENTIFIER shift and go to state 47
    COMMA           shift and go to state 25
    AND             shift and go to state 26

    quantifier_aux_axioma          shift and go to state 89
    comma_and                      shift and go to state 23

state 86

    (56) quantifier_aux_axioma -> CLASS_IDENTIFIER comma_and . quantifier_aux_axioma
    (46) quantifier_aux_axioma -> . comma_and quantifier_aux_axioma
    (47) quantifier_aux_axioma -> . OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN
    (48) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (49) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (50) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER
    (51) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral namespace_type
    (52) quantifier_aux_axioma -> . quantifier_aux_axioma comma_and quantifier_aux_axioma
    (53) quantifier_aux_axioma -> . CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (54) quantifier_aux_axioma -> . CLASS_IDENTIFIER OR quantifier_aux_axioma
    (55) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (56) quantifier_aux_axioma -> . CLASS_IDENTIFIER comma_and quantifier_aux_axioma
    (57) quantifier_aux_axioma -> . CLASS_IDENTIFIER
    (58) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 24
    CLASS_IDENTIFIER shift and go to state 47
    COMMA           shift and go to state 25
    AND             shift and go to state 26

    comma_and                      shift and go to state 23
    quantifier_aux_axioma          shift and go to state 113

state 87

    (20) covered_class -> CLASS_IDENTIFIER . OR covered_class
    (21) covered_class -> CLASS_IDENTIFIER .
    (53) quantifier_aux_axioma -> CLASS_IDENTIFIER . quantifier_geral quantifier_aux_axioma
    (54) quantifier_aux_axioma -> CLASS_IDENTIFIER . OR quantifier_aux_axioma
    (56) quantifier_aux_axioma -> CLASS_IDENTIFIER . comma_and quantifier_aux_axioma
    (57) quantifier_aux_axioma -> CLASS_IDENTIFIER .
    (66) quantifier_geral -> . SOME
    (67) quantifier_geral -> . ALL
    (68) quantifier_geral -> . VALUE
    (69) quantifier_geral -> . MAX
    (70) quantifier_geral -> . MIN
    (71) quantifier_geral -> . EXACTLY
    (72) quantifier_geral -> . THAT
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

  ! reduce/reduce conflict for DISJOINTCLASSES resolved using rule 21 (covered_class -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for INDIVIDUALS resolved using rule 21 (covered_class -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 21 (covered_class -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 21 (covered_class -> CLASS_IDENTIFIER .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    OR              shift and go to state 114
    DISJOINTCLASSES reduce using rule 21 (covered_class -> CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 21 (covered_class -> CLASS_IDENTIFIER .)
    CLASS           reduce using rule 21 (covered_class -> CLASS_IDENTIFIER .)
    $end            reduce using rule 21 (covered_class -> CLASS_IDENTIFIER .)
    ONLY            reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .)
    SOME            shift and go to state 53
    ALL             shift and go to state 54
    VALUE           shift and go to state 55
    MAX             shift and go to state 56
    MIN             shift and go to state 57
    EXACTLY         shift and go to state 58
    THAT            shift and go to state 59
    COMMA           shift and go to state 25
    AND             shift and go to state 26

  ! COMMA           [ reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .) ]
  ! AND             [ reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .) ]
  ! DISJOINTCLASSES [ reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .) ]
  ! INDIVIDUALS     [ reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .) ]

    quantifier_geral               shift and go to state 50
    comma_and                      shift and go to state 86

state 88

    (7) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER OR covered_class .

    DISJOINTCLASSES reduce using rule 7 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER OR covered_class .)
    INDIVIDUALS     reduce using rule 7 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER OR covered_class .)
    CLASS           reduce using rule 7 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER OR covered_class .)
    $end            reduce using rule 7 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER OR covered_class .)


state 89

    (54) quantifier_aux_axioma -> CLASS_IDENTIFIER OR quantifier_aux_axioma .
    (52) quantifier_aux_axioma -> quantifier_aux_axioma . comma_and quantifier_aux_axioma
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 54 (quantifier_aux_axioma -> CLASS_IDENTIFIER OR quantifier_aux_axioma .)
    INDIVIDUALS     reduce using rule 54 (quantifier_aux_axioma -> CLASS_IDENTIFIER OR quantifier_aux_axioma .)
    CLASS           reduce using rule 54 (quantifier_aux_axioma -> CLASS_IDENTIFIER OR quantifier_aux_axioma .)
    $end            reduce using rule 54 (quantifier_aux_axioma -> CLASS_IDENTIFIER OR quantifier_aux_axioma .)
    ONLY            reduce using rule 54 (quantifier_aux_axioma -> CLASS_IDENTIFIER OR quantifier_aux_axioma .)
    CLOSE_PAREN     reduce using rule 54 (quantifier_aux_axioma -> CLASS_IDENTIFIER OR quantifier_aux_axioma .)
    COMMA           shift and go to state 25
    AND             shift and go to state 26

  ! COMMA           [ reduce using rule 54 (quantifier_aux_axioma -> CLASS_IDENTIFIER OR quantifier_aux_axioma .) ]
  ! AND             [ reduce using rule 54 (quantifier_aux_axioma -> CLASS_IDENTIFIER OR quantifier_aux_axioma .) ]

    comma_and                      shift and go to state 61

state 90

    (8) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions_axioma ONLY . OPEN_PAREN auxiliar_fechamento CLOSE_PAREN

    OPEN_PAREN      shift and go to state 115


state 91

    (53) quantifier_aux_axioma -> CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma .
    (52) quantifier_aux_axioma -> quantifier_aux_axioma . comma_and quantifier_aux_axioma
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 53 (quantifier_aux_axioma -> CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma .)
    INDIVIDUALS     reduce using rule 53 (quantifier_aux_axioma -> CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma .)
    CLASS           reduce using rule 53 (quantifier_aux_axioma -> CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma .)
    $end            reduce using rule 53 (quantifier_aux_axioma -> CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma .)
    ONLY            reduce using rule 53 (quantifier_aux_axioma -> CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma .)
    CLOSE_PAREN     reduce using rule 53 (quantifier_aux_axioma -> CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma .)
    COMMA           shift and go to state 25
    AND             shift and go to state 26

  ! COMMA           [ reduce using rule 53 (quantifier_aux_axioma -> CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma .) ]
  ! AND             [ reduce using rule 53 (quantifier_aux_axioma -> CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma .) ]

    comma_and                      shift and go to state 61

state 92

    (56) quantifier_aux_axioma -> CLASS_IDENTIFIER comma_and quantifier_aux_axioma .
    (46) quantifier_aux_axioma -> comma_and quantifier_aux_axioma .
    (52) quantifier_aux_axioma -> quantifier_aux_axioma . comma_and quantifier_aux_axioma
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

  ! reduce/reduce conflict for COMMA resolved using rule 46 (quantifier_aux_axioma -> comma_and quantifier_aux_axioma .)
  ! reduce/reduce conflict for AND resolved using rule 46 (quantifier_aux_axioma -> comma_and quantifier_aux_axioma .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 56 (quantifier_aux_axioma -> CLASS_IDENTIFIER comma_and quantifier_aux_axioma .)
    INDIVIDUALS     reduce using rule 56 (quantifier_aux_axioma -> CLASS_IDENTIFIER comma_and quantifier_aux_axioma .)
    CLASS           reduce using rule 56 (quantifier_aux_axioma -> CLASS_IDENTIFIER comma_and quantifier_aux_axioma .)
    $end            reduce using rule 56 (quantifier_aux_axioma -> CLASS_IDENTIFIER comma_and quantifier_aux_axioma .)
    ONLY            reduce using rule 46 (quantifier_aux_axioma -> comma_and quantifier_aux_axioma .)
    COMMA           shift and go to state 25
    AND             shift and go to state 26

  ! COMMA           [ reduce using rule 56 (quantifier_aux_axioma -> CLASS_IDENTIFIER comma_and quantifier_aux_axioma .) ]
  ! AND             [ reduce using rule 56 (quantifier_aux_axioma -> CLASS_IDENTIFIER comma_and quantifier_aux_axioma .) ]
  ! COMMA           [ reduce using rule 46 (quantifier_aux_axioma -> comma_and quantifier_aux_axioma .) ]
  ! AND             [ reduce using rule 46 (quantifier_aux_axioma -> comma_and quantifier_aux_axioma .) ]

    comma_and                      shift and go to state 61

state 93

    (47) quantifier_aux_axioma -> OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN .

    COMMA           reduce using rule 47 (quantifier_aux_axioma -> OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN .)
    AND             reduce using rule 47 (quantifier_aux_axioma -> OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN .)
    DISJOINTCLASSES reduce using rule 47 (quantifier_aux_axioma -> OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN .)
    INDIVIDUALS     reduce using rule 47 (quantifier_aux_axioma -> OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN .)
    CLASS           reduce using rule 47 (quantifier_aux_axioma -> OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN .)
    $end            reduce using rule 47 (quantifier_aux_axioma -> OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN .)
    ONLY            reduce using rule 47 (quantifier_aux_axioma -> OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 47 (quantifier_aux_axioma -> OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN .)


state 94

    (52) quantifier_aux_axioma -> quantifier_aux_axioma comma_and quantifier_aux_axioma .
    (52) quantifier_aux_axioma -> quantifier_aux_axioma . comma_and quantifier_aux_axioma
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 52 (quantifier_aux_axioma -> quantifier_aux_axioma comma_and quantifier_aux_axioma .)
    INDIVIDUALS     reduce using rule 52 (quantifier_aux_axioma -> quantifier_aux_axioma comma_and quantifier_aux_axioma .)
    CLASS           reduce using rule 52 (quantifier_aux_axioma -> quantifier_aux_axioma comma_and quantifier_aux_axioma .)
    $end            reduce using rule 52 (quantifier_aux_axioma -> quantifier_aux_axioma comma_and quantifier_aux_axioma .)
    ONLY            reduce using rule 52 (quantifier_aux_axioma -> quantifier_aux_axioma comma_and quantifier_aux_axioma .)
    CLOSE_PAREN     reduce using rule 52 (quantifier_aux_axioma -> quantifier_aux_axioma comma_and quantifier_aux_axioma .)
    COMMA           shift and go to state 25
    AND             shift and go to state 26

  ! COMMA           [ reduce using rule 52 (quantifier_aux_axioma -> quantifier_aux_axioma comma_and quantifier_aux_axioma .) ]
  ! AND             [ reduce using rule 52 (quantifier_aux_axioma -> quantifier_aux_axioma comma_and quantifier_aux_axioma .) ]

    comma_and                      shift and go to state 61

state 95

    (48) quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY . namespace_type
    (49) quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY . CLASS_IDENTIFIER
    (78) namespace_type -> . NAMESPACE TYPE
    (79) namespace_type -> . NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET

    CLASS_IDENTIFIER shift and go to state 117
    NAMESPACE       shift and go to state 99

    namespace_type                 shift and go to state 116

state 96

    (50) quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER .
    (53) quantifier_aux_axioma -> CLASS_IDENTIFIER . quantifier_geral quantifier_aux_axioma
    (54) quantifier_aux_axioma -> CLASS_IDENTIFIER . OR quantifier_aux_axioma
    (56) quantifier_aux_axioma -> CLASS_IDENTIFIER . comma_and quantifier_aux_axioma
    (57) quantifier_aux_axioma -> CLASS_IDENTIFIER .
    (66) quantifier_geral -> . SOME
    (67) quantifier_geral -> . ALL
    (68) quantifier_geral -> . VALUE
    (69) quantifier_geral -> . MAX
    (70) quantifier_geral -> . MIN
    (71) quantifier_geral -> . EXACTLY
    (72) quantifier_geral -> . THAT
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

  ! reduce/reduce conflict for COMMA resolved using rule 50 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for AND resolved using rule 50 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for DISJOINTCLASSES resolved using rule 50 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for INDIVIDUALS resolved using rule 50 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 50 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 50 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for CLOSE_PAREN resolved using rule 50 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for ONLY resolved using rule 50 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 50 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 50 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER .)
    CLASS           reduce using rule 50 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER .)
    $end            reduce using rule 50 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER .)
    ONLY            reduce using rule 50 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 50 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER .)
    OR              shift and go to state 85
    SOME            shift and go to state 53
    ALL             shift and go to state 54
    VALUE           shift and go to state 55
    MAX             shift and go to state 56
    MIN             shift and go to state 57
    EXACTLY         shift and go to state 58
    THAT            shift and go to state 59
    COMMA           shift and go to state 25
    AND             shift and go to state 26

  ! COMMA           [ reduce using rule 50 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER .) ]
  ! AND             [ reduce using rule 50 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .) ]
  ! AND             [ reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .) ]
  ! DISJOINTCLASSES [ reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .) ]
  ! INDIVIDUALS     [ reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .) ]
  ! CLOSE_PAREN     [ reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .) ]
  ! ONLY            [ reduce using rule 57 (quantifier_aux_axioma -> CLASS_IDENTIFIER .) ]

    quantifier_geral               shift and go to state 50
    comma_and                      shift and go to state 86

state 97

    (51) quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral namespace_type .

    COMMA           reduce using rule 51 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral namespace_type .)
    AND             reduce using rule 51 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral namespace_type .)
    DISJOINTCLASSES reduce using rule 51 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral namespace_type .)
    INDIVIDUALS     reduce using rule 51 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral namespace_type .)
    CLASS           reduce using rule 51 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral namespace_type .)
    $end            reduce using rule 51 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral namespace_type .)
    ONLY            reduce using rule 51 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral namespace_type .)
    CLOSE_PAREN     reduce using rule 51 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral namespace_type .)


state 98

    (55) quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma .
    (52) quantifier_aux_axioma -> quantifier_aux_axioma . comma_and quantifier_aux_axioma
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 55 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma .)
    INDIVIDUALS     reduce using rule 55 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma .)
    CLASS           reduce using rule 55 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma .)
    $end            reduce using rule 55 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma .)
    ONLY            reduce using rule 55 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma .)
    CLOSE_PAREN     reduce using rule 55 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma .)
    COMMA           shift and go to state 25
    AND             shift and go to state 26

  ! COMMA           [ reduce using rule 55 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma .) ]
  ! AND             [ reduce using rule 55 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma .) ]

    comma_and                      shift and go to state 61

state 99

    (78) namespace_type -> NAMESPACE . TYPE
    (79) namespace_type -> NAMESPACE . TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET

    TYPE            shift and go to state 118


state 100

    (38) quantifier_aux -> quantifier_aux comma_and quantifier_aux .
    (38) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    INDIVIDUALS     reduce using rule 38 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    CLASS           reduce using rule 38 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    $end            reduce using rule 38 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    CLOSE_PAREN     reduce using rule 38 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    CLASS_IDENTIFIER reduce using rule 38 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    COMMA           shift and go to state 25
    AND             shift and go to state 26

  ! COMMA           [ reduce using rule 38 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .) ]
  ! AND             [ reduce using rule 38 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .) ]

    comma_and                      shift and go to state 69

state 101

    (32) quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .

    COMMA           reduce using rule 32 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    AND             reduce using rule 32 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    INDIVIDUALS     reduce using rule 32 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    CLASS           reduce using rule 32 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    $end            reduce using rule 32 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 32 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    CLASS_IDENTIFIER reduce using rule 32 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)


state 102

    (33) quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .
    (34) quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER . quantifier_aux
    (39) quantifier_aux -> CLASS_IDENTIFIER . quantifier quantifier_aux
    (40) quantifier_aux -> CLASS_IDENTIFIER . OR quantifier_aux
    (42) quantifier_aux -> CLASS_IDENTIFIER . comma_and quantifier_aux
    (43) quantifier_aux -> CLASS_IDENTIFIER .
    (31) quantifier_aux -> . comma_and quantifier_aux
    (32) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (37) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (38) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (40) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (41) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (43) quantifier_aux -> . CLASS_IDENTIFIER
    (44) quantifier_aux -> . PROPERTY_IDENTIFIER
    (45) quantifier_aux -> . quantifier
    (59) quantifier -> . SOME
    (60) quantifier -> . ALL
    (61) quantifier -> . VALUE
    (62) quantifier -> . THAT
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

  ! reduce/reduce conflict for COMMA resolved using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for AND resolved using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for INDIVIDUALS resolved using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for CLOSE_PAREN resolved using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for CLASS_IDENTIFIER resolved using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! shift/reduce conflict for CLASS_IDENTIFIER resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    INDIVIDUALS     reduce using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    CLASS           reduce using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    $end            reduce using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    OR              shift and go to state 78
    OPEN_PAREN      shift and go to state 33
    PROPERTY_IDENTIFIER shift and go to state 34
    CLASS_IDENTIFIER shift and go to state 36
    SOME            shift and go to state 37
    ALL             shift and go to state 38
    VALUE           shift and go to state 39
    THAT            shift and go to state 40
    COMMA           shift and go to state 25
    AND             shift and go to state 26

  ! COMMA           [ reduce using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .) ]
  ! AND             [ reduce using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .) ]
  ! CLASS_IDENTIFIER [ reduce using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 43 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! AND             [ reduce using rule 43 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! INDIVIDUALS     [ reduce using rule 43 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 43 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 43 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! CLOSE_PAREN     [ reduce using rule 43 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! CLASS_IDENTIFIER [ reduce using rule 43 (quantifier_aux -> CLASS_IDENTIFIER .) ]

    quantifier                     shift and go to state 119
    quantifier_aux                 shift and go to state 120
    comma_and                      shift and go to state 121

state 103

    (41) quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .
    (38) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    INDIVIDUALS     reduce using rule 41 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .)
    CLASS           reduce using rule 41 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .)
    $end            reduce using rule 41 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .)
    CLOSE_PAREN     reduce using rule 41 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .)
    CLASS_IDENTIFIER reduce using rule 41 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .)
    COMMA           shift and go to state 25
    AND             shift and go to state 26

  ! COMMA           [ reduce using rule 41 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .) ]
  ! AND             [ reduce using rule 41 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .) ]

    comma_and                      shift and go to state 69

state 104

    (35) quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .

    COMMA           reduce using rule 35 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    AND             reduce using rule 35 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    INDIVIDUALS     reduce using rule 35 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    CLASS           reduce using rule 35 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    $end            reduce using rule 35 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    CLOSE_PAREN     reduce using rule 35 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    CLASS_IDENTIFIER reduce using rule 35 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)


state 105

    (36) quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY . namespace_type
    (37) quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY . CLASS_IDENTIFIER
    (78) namespace_type -> . NAMESPACE TYPE
    (79) namespace_type -> . NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET

    CLASS_IDENTIFIER shift and go to state 123
    NAMESPACE       shift and go to state 99

    namespace_type                 shift and go to state 122

state 106

    (39) quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .
    (38) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    INDIVIDUALS     reduce using rule 39 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .)
    CLASS           reduce using rule 39 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .)
    $end            reduce using rule 39 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .)
    CLOSE_PAREN     reduce using rule 39 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .)
    CLASS_IDENTIFIER reduce using rule 39 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .)
    COMMA           shift and go to state 25
    AND             shift and go to state 26

  ! COMMA           [ reduce using rule 39 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .) ]
  ! AND             [ reduce using rule 39 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .) ]

    comma_and                      shift and go to state 69

state 107

    (40) quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .
    (38) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    INDIVIDUALS     reduce using rule 40 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .)
    CLASS           reduce using rule 40 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .)
    $end            reduce using rule 40 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .)
    CLOSE_PAREN     reduce using rule 40 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .)
    CLASS_IDENTIFIER reduce using rule 40 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .)
    COMMA           shift and go to state 25
    AND             shift and go to state 26

  ! COMMA           [ reduce using rule 40 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .) ]
  ! AND             [ reduce using rule 40 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .) ]

    comma_and                      shift and go to state 69

state 108

    (42) quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .
    (38) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    INDIVIDUALS     reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    CLASS           reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    $end            reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    CLOSE_PAREN     reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    CLASS_IDENTIFIER reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    COMMA           shift and go to state 25
    AND             shift and go to state 26

  ! COMMA           [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]
  ! AND             [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]

    comma_and                      shift and go to state 69

state 109

    (20) covered_class -> CLASS_IDENTIFIER OR . covered_class
    (20) covered_class -> . CLASS_IDENTIFIER OR covered_class
    (21) covered_class -> . CLASS_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 80

    covered_class                  shift and go to state 124

state 110

    (30) only_defined -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER . quantifier_aux CLASS_IDENTIFIER CLOSE_PAREN
    (29) aninhada -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER . quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN
    (33) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier CLASS_IDENTIFIER
    (34) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier CLASS_IDENTIFIER quantifier_aux
    (35) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier namespace_type
    (36) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier_number CARDINALITY namespace_type
    (37) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier_number CARDINALITY CLASS_IDENTIFIER
    (41) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier quantifier_aux
    (44) quantifier_aux -> PROPERTY_IDENTIFIER .
    (31) quantifier_aux -> . comma_and quantifier_aux
    (32) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (37) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (38) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (40) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (41) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (43) quantifier_aux -> . CLASS_IDENTIFIER
    (44) quantifier_aux -> . PROPERTY_IDENTIFIER
    (45) quantifier_aux -> . quantifier
    (59) quantifier -> . SOME
    (60) quantifier -> . ALL
    (61) quantifier -> . VALUE
    (62) quantifier -> . THAT
    (63) quantifier_number -> . MAX
    (64) quantifier_number -> . MIN
    (65) quantifier_number -> . EXACTLY
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    CLOSE_PAREN     reduce using rule 44 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    OPEN_PAREN      shift and go to state 33
    PROPERTY_IDENTIFIER shift and go to state 34
    CLASS_IDENTIFIER shift and go to state 36
    SOME            shift and go to state 37
    ALL             shift and go to state 38
    VALUE           shift and go to state 39
    THAT            shift and go to state 40
    MAX             shift and go to state 74
    MIN             shift and go to state 75
    EXACTLY         shift and go to state 76
    COMMA           shift and go to state 25
    AND             shift and go to state 26

  ! COMMA           [ reduce using rule 44 (quantifier_aux -> PROPERTY_IDENTIFIER .) ]
  ! AND             [ reduce using rule 44 (quantifier_aux -> PROPERTY_IDENTIFIER .) ]

    comma_and                      shift and go to state 32
    quantifier_aux                 shift and go to state 125
    quantifier                     shift and go to state 126
    quantifier_number              shift and go to state 73

state 111

    (28) aninhada -> comma_and OPEN_PAREN quantifier_aux . CLOSE_PAREN
    (38) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

    CLOSE_PAREN     shift and go to state 127
    COMMA           shift and go to state 25
    AND             shift and go to state 26

    comma_and                      shift and go to state 69

state 112

    (83) individuals -> INDIVIDUAL_NAME COMMA individuals .

    CLOSE_CURLY     reduce using rule 83 (individuals -> INDIVIDUAL_NAME COMMA individuals .)
    CLASS           reduce using rule 83 (individuals -> INDIVIDUAL_NAME COMMA individuals .)
    $end            reduce using rule 83 (individuals -> INDIVIDUAL_NAME COMMA individuals .)


state 113

    (56) quantifier_aux_axioma -> CLASS_IDENTIFIER comma_and quantifier_aux_axioma .
    (52) quantifier_aux_axioma -> quantifier_aux_axioma . comma_and quantifier_aux_axioma
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    ONLY            reduce using rule 56 (quantifier_aux_axioma -> CLASS_IDENTIFIER comma_and quantifier_aux_axioma .)
    CLOSE_PAREN     reduce using rule 56 (quantifier_aux_axioma -> CLASS_IDENTIFIER comma_and quantifier_aux_axioma .)
    DISJOINTCLASSES reduce using rule 56 (quantifier_aux_axioma -> CLASS_IDENTIFIER comma_and quantifier_aux_axioma .)
    INDIVIDUALS     reduce using rule 56 (quantifier_aux_axioma -> CLASS_IDENTIFIER comma_and quantifier_aux_axioma .)
    CLASS           reduce using rule 56 (quantifier_aux_axioma -> CLASS_IDENTIFIER comma_and quantifier_aux_axioma .)
    $end            reduce using rule 56 (quantifier_aux_axioma -> CLASS_IDENTIFIER comma_and quantifier_aux_axioma .)
    COMMA           shift and go to state 25
    AND             shift and go to state 26

  ! COMMA           [ reduce using rule 56 (quantifier_aux_axioma -> CLASS_IDENTIFIER comma_and quantifier_aux_axioma .) ]
  ! AND             [ reduce using rule 56 (quantifier_aux_axioma -> CLASS_IDENTIFIER comma_and quantifier_aux_axioma .) ]

    comma_and                      shift and go to state 61

state 114

    (20) covered_class -> CLASS_IDENTIFIER OR . covered_class
    (54) quantifier_aux_axioma -> CLASS_IDENTIFIER OR . quantifier_aux_axioma
    (20) covered_class -> . CLASS_IDENTIFIER OR covered_class
    (21) covered_class -> . CLASS_IDENTIFIER
    (46) quantifier_aux_axioma -> . comma_and quantifier_aux_axioma
    (47) quantifier_aux_axioma -> . OPEN_PAREN quantifier_aux_axioma CLOSE_PAREN
    (48) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (49) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (50) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER
    (51) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral namespace_type
    (52) quantifier_aux_axioma -> . quantifier_aux_axioma comma_and quantifier_aux_axioma
    (53) quantifier_aux_axioma -> . CLASS_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (54) quantifier_aux_axioma -> . CLASS_IDENTIFIER OR quantifier_aux_axioma
    (55) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER quantifier_geral quantifier_aux_axioma
    (56) quantifier_aux_axioma -> . CLASS_IDENTIFIER comma_and quantifier_aux_axioma
    (57) quantifier_aux_axioma -> . CLASS_IDENTIFIER
    (58) quantifier_aux_axioma -> . PROPERTY_IDENTIFIER
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

    CLASS_IDENTIFIER shift and go to state 87
    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 24
    COMMA           shift and go to state 25
    AND             shift and go to state 26

    covered_class                  shift and go to state 124
    quantifier_aux_axioma          shift and go to state 89
    comma_and                      shift and go to state 23

state 115

    (8) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions_axioma ONLY OPEN_PAREN . auxiliar_fechamento CLOSE_PAREN
    (11) auxiliar_fechamento -> . CLASS_IDENTIFIER
    (12) auxiliar_fechamento -> . CLASS_IDENTIFIER OR auxiliar_fechamento

    CLASS_IDENTIFIER shift and go to state 128

    auxiliar_fechamento            shift and go to state 129

state 116

    (48) quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .

    COMMA           reduce using rule 48 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)
    AND             reduce using rule 48 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)
    DISJOINTCLASSES reduce using rule 48 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)
    INDIVIDUALS     reduce using rule 48 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)
    CLASS           reduce using rule 48 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)
    $end            reduce using rule 48 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)
    ONLY            reduce using rule 48 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)
    CLOSE_PAREN     reduce using rule 48 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)


state 117

    (49) quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .

    COMMA           reduce using rule 49 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)
    AND             reduce using rule 49 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)
    DISJOINTCLASSES reduce using rule 49 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 49 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)
    CLASS           reduce using rule 49 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)
    $end            reduce using rule 49 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)
    ONLY            reduce using rule 49 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 49 (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)


state 118

    (78) namespace_type -> NAMESPACE TYPE .
    (79) namespace_type -> NAMESPACE TYPE . OPEN_BRACKET sizecheck CLOSE_BRACKET

    COMMA           reduce using rule 78 (namespace_type -> NAMESPACE TYPE .)
    AND             reduce using rule 78 (namespace_type -> NAMESPACE TYPE .)
    DISJOINTCLASSES reduce using rule 78 (namespace_type -> NAMESPACE TYPE .)
    INDIVIDUALS     reduce using rule 78 (namespace_type -> NAMESPACE TYPE .)
    CLASS           reduce using rule 78 (namespace_type -> NAMESPACE TYPE .)
    $end            reduce using rule 78 (namespace_type -> NAMESPACE TYPE .)
    ONLY            reduce using rule 78 (namespace_type -> NAMESPACE TYPE .)
    CLOSE_PAREN     reduce using rule 78 (namespace_type -> NAMESPACE TYPE .)
    CLASS_IDENTIFIER reduce using rule 78 (namespace_type -> NAMESPACE TYPE .)
    OPEN_BRACKET    shift and go to state 130


state 119

    (39) quantifier_aux -> CLASS_IDENTIFIER quantifier . quantifier_aux
    (45) quantifier_aux -> quantifier .
    (31) quantifier_aux -> . comma_and quantifier_aux
    (32) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (37) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (38) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (40) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (41) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (43) quantifier_aux -> . CLASS_IDENTIFIER
    (44) quantifier_aux -> . PROPERTY_IDENTIFIER
    (45) quantifier_aux -> . quantifier
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND
    (59) quantifier -> . SOME
    (60) quantifier -> . ALL
    (61) quantifier -> . VALUE
    (62) quantifier -> . THAT

  ! shift/reduce conflict for CLASS_IDENTIFIER resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    INDIVIDUALS     reduce using rule 45 (quantifier_aux -> quantifier .)
    CLASS           reduce using rule 45 (quantifier_aux -> quantifier .)
    $end            reduce using rule 45 (quantifier_aux -> quantifier .)
    CLOSE_PAREN     reduce using rule 45 (quantifier_aux -> quantifier .)
    OPEN_PAREN      shift and go to state 33
    PROPERTY_IDENTIFIER shift and go to state 34
    CLASS_IDENTIFIER shift and go to state 36
    COMMA           shift and go to state 25
    AND             shift and go to state 26
    SOME            shift and go to state 37
    ALL             shift and go to state 38
    VALUE           shift and go to state 39
    THAT            shift and go to state 40

  ! COMMA           [ reduce using rule 45 (quantifier_aux -> quantifier .) ]
  ! AND             [ reduce using rule 45 (quantifier_aux -> quantifier .) ]
  ! CLASS_IDENTIFIER [ reduce using rule 45 (quantifier_aux -> quantifier .) ]

    quantifier                     shift and go to state 35
    quantifier_aux                 shift and go to state 106
    comma_and                      shift and go to state 32

state 120

    (34) quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux .
    (38) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    INDIVIDUALS     reduce using rule 34 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux .)
    CLASS           reduce using rule 34 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux .)
    $end            reduce using rule 34 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux .)
    CLOSE_PAREN     reduce using rule 34 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux .)
    CLASS_IDENTIFIER reduce using rule 34 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux .)
    COMMA           shift and go to state 25
    AND             shift and go to state 26

  ! COMMA           [ reduce using rule 34 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux .) ]
  ! AND             [ reduce using rule 34 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux .) ]

    comma_and                      shift and go to state 69

state 121

    (42) quantifier_aux -> CLASS_IDENTIFIER comma_and . quantifier_aux
    (31) quantifier_aux -> comma_and . quantifier_aux
    (31) quantifier_aux -> . comma_and quantifier_aux
    (32) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (37) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (38) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (40) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (41) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (43) quantifier_aux -> . CLASS_IDENTIFIER
    (44) quantifier_aux -> . PROPERTY_IDENTIFIER
    (45) quantifier_aux -> . quantifier
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND
    (59) quantifier -> . SOME
    (60) quantifier -> . ALL
    (61) quantifier -> . VALUE
    (62) quantifier -> . THAT

    OPEN_PAREN      shift and go to state 33
    PROPERTY_IDENTIFIER shift and go to state 34
    CLASS_IDENTIFIER shift and go to state 36
    COMMA           shift and go to state 25
    AND             shift and go to state 26
    SOME            shift and go to state 37
    ALL             shift and go to state 38
    VALUE           shift and go to state 39
    THAT            shift and go to state 40

    comma_and                      shift and go to state 32
    quantifier_aux                 shift and go to state 131
    quantifier                     shift and go to state 35

state 122

    (36) quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .

    COMMA           reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)
    AND             reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)
    INDIVIDUALS     reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)
    CLASS           reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)
    $end            reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)
    CLOSE_PAREN     reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)
    CLASS_IDENTIFIER reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)


state 123

    (37) quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .

    COMMA           reduce using rule 37 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)
    AND             reduce using rule 37 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 37 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)
    CLASS           reduce using rule 37 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)
    $end            reduce using rule 37 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 37 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)
    CLASS_IDENTIFIER reduce using rule 37 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)


state 124

    (20) covered_class -> CLASS_IDENTIFIER OR covered_class .

    SUBCLASSOF      reduce using rule 20 (covered_class -> CLASS_IDENTIFIER OR covered_class .)
    CLASS           reduce using rule 20 (covered_class -> CLASS_IDENTIFIER OR covered_class .)
    $end            reduce using rule 20 (covered_class -> CLASS_IDENTIFIER OR covered_class .)
    DISJOINTCLASSES reduce using rule 20 (covered_class -> CLASS_IDENTIFIER OR covered_class .)
    INDIVIDUALS     reduce using rule 20 (covered_class -> CLASS_IDENTIFIER OR covered_class .)


state 125

    (30) only_defined -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier_aux . CLASS_IDENTIFIER CLOSE_PAREN
    (38) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

    CLASS_IDENTIFIER shift and go to state 132
    COMMA           shift and go to state 25
    AND             shift and go to state 26

    comma_and                      shift and go to state 69

state 126

    (29) aninhada -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier . OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN
    (33) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . CLASS_IDENTIFIER
    (34) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . CLASS_IDENTIFIER quantifier_aux
    (35) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . namespace_type
    (41) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . quantifier_aux
    (45) quantifier_aux -> quantifier .
    (78) namespace_type -> . NAMESPACE TYPE
    (79) namespace_type -> . NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET
    (31) quantifier_aux -> . comma_and quantifier_aux
    (32) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (37) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (38) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (40) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (41) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (43) quantifier_aux -> . CLASS_IDENTIFIER
    (44) quantifier_aux -> . PROPERTY_IDENTIFIER
    (45) quantifier_aux -> . quantifier
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND
    (59) quantifier -> . SOME
    (60) quantifier -> . ALL
    (61) quantifier -> . VALUE
    (62) quantifier -> . THAT

  ! shift/reduce conflict for CLASS_IDENTIFIER resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    OPEN_PAREN      shift and go to state 133
    CLASS_IDENTIFIER shift and go to state 102
    NAMESPACE       shift and go to state 99
    PROPERTY_IDENTIFIER shift and go to state 34
    COMMA           shift and go to state 25
    AND             shift and go to state 26
    SOME            shift and go to state 37
    ALL             shift and go to state 38
    VALUE           shift and go to state 39
    THAT            shift and go to state 40

  ! CLASS_IDENTIFIER [ reduce using rule 45 (quantifier_aux -> quantifier .) ]
  ! COMMA           [ reduce using rule 45 (quantifier_aux -> quantifier .) ]
  ! AND             [ reduce using rule 45 (quantifier_aux -> quantifier .) ]

    comma_and                      shift and go to state 32
    quantifier                     shift and go to state 35
    quantifier_aux                 shift and go to state 103
    namespace_type                 shift and go to state 104

state 127

    (28) aninhada -> comma_and OPEN_PAREN quantifier_aux CLOSE_PAREN .

    SUBCLASSOF      reduce using rule 28 (aninhada -> comma_and OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    CLASS           reduce using rule 28 (aninhada -> comma_and OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    $end            reduce using rule 28 (aninhada -> comma_and OPEN_PAREN quantifier_aux CLOSE_PAREN .)


state 128

    (11) auxiliar_fechamento -> CLASS_IDENTIFIER .
    (12) auxiliar_fechamento -> CLASS_IDENTIFIER . OR auxiliar_fechamento

    CLOSE_PAREN     reduce using rule 11 (auxiliar_fechamento -> CLASS_IDENTIFIER .)
    OR              shift and go to state 134


state 129

    (8) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions_axioma ONLY OPEN_PAREN auxiliar_fechamento . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 135


state 130

    (79) namespace_type -> NAMESPACE TYPE OPEN_BRACKET . sizecheck CLOSE_BRACKET
    (73) sizecheck -> . EQUAL CARDINALITY
    (74) sizecheck -> . GREATER_THAN CARDINALITY
    (75) sizecheck -> . LESS_THAN CARDINALITY
    (76) sizecheck -> . GREATER_THAN EQUAL CARDINALITY
    (77) sizecheck -> . LESS_THAN EQUAL CARDINALITY

    EQUAL           shift and go to state 137
    GREATER_THAN    shift and go to state 138
    LESS_THAN       shift and go to state 139

    sizecheck                      shift and go to state 136

state 131

    (42) quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .
    (31) quantifier_aux -> comma_and quantifier_aux .
    (38) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

  ! reduce/reduce conflict for COMMA resolved using rule 31 (quantifier_aux -> comma_and quantifier_aux .)
  ! reduce/reduce conflict for AND resolved using rule 31 (quantifier_aux -> comma_and quantifier_aux .)
  ! reduce/reduce conflict for INDIVIDUALS resolved using rule 31 (quantifier_aux -> comma_and quantifier_aux .)
  ! reduce/reduce conflict for CLASS resolved using rule 31 (quantifier_aux -> comma_and quantifier_aux .)
  ! reduce/reduce conflict for $end resolved using rule 31 (quantifier_aux -> comma_and quantifier_aux .)
  ! reduce/reduce conflict for CLOSE_PAREN resolved using rule 31 (quantifier_aux -> comma_and quantifier_aux .)
  ! reduce/reduce conflict for CLASS_IDENTIFIER resolved using rule 31 (quantifier_aux -> comma_and quantifier_aux .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    INDIVIDUALS     reduce using rule 31 (quantifier_aux -> comma_and quantifier_aux .)
    CLASS           reduce using rule 31 (quantifier_aux -> comma_and quantifier_aux .)
    $end            reduce using rule 31 (quantifier_aux -> comma_and quantifier_aux .)
    CLOSE_PAREN     reduce using rule 31 (quantifier_aux -> comma_and quantifier_aux .)
    CLASS_IDENTIFIER reduce using rule 31 (quantifier_aux -> comma_and quantifier_aux .)
    COMMA           shift and go to state 25
    AND             shift and go to state 26

  ! COMMA           [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]
  ! AND             [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]
  ! INDIVIDUALS     [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]
  ! CLASS           [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]
  ! $end            [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]
  ! CLOSE_PAREN     [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]
  ! CLASS_IDENTIFIER [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]
  ! COMMA           [ reduce using rule 31 (quantifier_aux -> comma_and quantifier_aux .) ]
  ! AND             [ reduce using rule 31 (quantifier_aux -> comma_and quantifier_aux .) ]

    comma_and                      shift and go to state 69

state 132

    (30) only_defined -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier_aux CLASS_IDENTIFIER . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 140


state 133

    (29) aninhada -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN . quantifier_aux CLOSE_PAREN CLOSE_PAREN
    (32) quantifier_aux -> OPEN_PAREN . quantifier_aux CLOSE_PAREN
    (31) quantifier_aux -> . comma_and quantifier_aux
    (32) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (37) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (38) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (40) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (41) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (43) quantifier_aux -> . CLASS_IDENTIFIER
    (44) quantifier_aux -> . PROPERTY_IDENTIFIER
    (45) quantifier_aux -> . quantifier
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND
    (59) quantifier -> . SOME
    (60) quantifier -> . ALL
    (61) quantifier -> . VALUE
    (62) quantifier -> . THAT

    OPEN_PAREN      shift and go to state 33
    PROPERTY_IDENTIFIER shift and go to state 34
    CLASS_IDENTIFIER shift and go to state 36
    COMMA           shift and go to state 25
    AND             shift and go to state 26
    SOME            shift and go to state 37
    ALL             shift and go to state 38
    VALUE           shift and go to state 39
    THAT            shift and go to state 40

    comma_and                      shift and go to state 32
    quantifier                     shift and go to state 35
    quantifier_aux                 shift and go to state 141

state 134

    (12) auxiliar_fechamento -> CLASS_IDENTIFIER OR . auxiliar_fechamento
    (11) auxiliar_fechamento -> . CLASS_IDENTIFIER
    (12) auxiliar_fechamento -> . CLASS_IDENTIFIER OR auxiliar_fechamento

    CLASS_IDENTIFIER shift and go to state 128

    auxiliar_fechamento            shift and go to state 142

state 135

    (8) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions_axioma ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN .

    DISJOINTCLASSES reduce using rule 8 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions_axioma ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN .)
    INDIVIDUALS     reduce using rule 8 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions_axioma ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN .)
    CLASS           reduce using rule 8 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions_axioma ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN .)
    $end            reduce using rule 8 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions_axioma ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN .)


state 136

    (79) namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 143


state 137

    (73) sizecheck -> EQUAL . CARDINALITY

    CARDINALITY     shift and go to state 144


state 138

    (74) sizecheck -> GREATER_THAN . CARDINALITY
    (76) sizecheck -> GREATER_THAN . EQUAL CARDINALITY

    CARDINALITY     shift and go to state 145
    EQUAL           shift and go to state 146


state 139

    (75) sizecheck -> LESS_THAN . CARDINALITY
    (77) sizecheck -> LESS_THAN . EQUAL CARDINALITY

    CARDINALITY     shift and go to state 147
    EQUAL           shift and go to state 148


state 140

    (30) only_defined -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier_aux CLASS_IDENTIFIER CLOSE_PAREN .

    SUBCLASSOF      reduce using rule 30 (only_defined -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier_aux CLASS_IDENTIFIER CLOSE_PAREN .)
    CLASS           reduce using rule 30 (only_defined -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier_aux CLASS_IDENTIFIER CLOSE_PAREN .)
    $end            reduce using rule 30 (only_defined -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier_aux CLASS_IDENTIFIER CLOSE_PAREN .)


state 141

    (29) aninhada -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux . CLOSE_PAREN CLOSE_PAREN
    (32) quantifier_aux -> OPEN_PAREN quantifier_aux . CLOSE_PAREN
    (38) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (84) comma_and -> . COMMA
    (85) comma_and -> . AND

    CLOSE_PAREN     shift and go to state 149
    COMMA           shift and go to state 25
    AND             shift and go to state 26

    comma_and                      shift and go to state 69

state 142

    (12) auxiliar_fechamento -> CLASS_IDENTIFIER OR auxiliar_fechamento .

    CLOSE_PAREN     reduce using rule 12 (auxiliar_fechamento -> CLASS_IDENTIFIER OR auxiliar_fechamento .)


state 143

    (79) namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .

    COMMA           reduce using rule 79 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    AND             reduce using rule 79 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    DISJOINTCLASSES reduce using rule 79 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    INDIVIDUALS     reduce using rule 79 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    CLASS           reduce using rule 79 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    $end            reduce using rule 79 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    ONLY            reduce using rule 79 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 79 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    CLASS_IDENTIFIER reduce using rule 79 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)


state 144

    (73) sizecheck -> EQUAL CARDINALITY .

    CLOSE_BRACKET   reduce using rule 73 (sizecheck -> EQUAL CARDINALITY .)


state 145

    (74) sizecheck -> GREATER_THAN CARDINALITY .

    CLOSE_BRACKET   reduce using rule 74 (sizecheck -> GREATER_THAN CARDINALITY .)


state 146

    (76) sizecheck -> GREATER_THAN EQUAL . CARDINALITY

    CARDINALITY     shift and go to state 150


state 147

    (75) sizecheck -> LESS_THAN CARDINALITY .

    CLOSE_BRACKET   reduce using rule 75 (sizecheck -> LESS_THAN CARDINALITY .)


state 148

    (77) sizecheck -> LESS_THAN EQUAL . CARDINALITY

    CARDINALITY     shift and go to state 151


state 149

    (29) aninhada -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN . CLOSE_PAREN
    (32) quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .

  ! shift/reduce conflict for CLOSE_PAREN resolved as shift
    CLOSE_PAREN     shift and go to state 152
    COMMA           reduce using rule 32 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    AND             reduce using rule 32 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    CLASS_IDENTIFIER reduce using rule 32 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)

  ! CLOSE_PAREN     [ reduce using rule 32 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .) ]


state 150

    (76) sizecheck -> GREATER_THAN EQUAL CARDINALITY .

    CLOSE_BRACKET   reduce using rule 76 (sizecheck -> GREATER_THAN EQUAL CARDINALITY .)


state 151

    (77) sizecheck -> LESS_THAN EQUAL CARDINALITY .

    CLOSE_BRACKET   reduce using rule 77 (sizecheck -> LESS_THAN EQUAL CARDINALITY .)


state 152

    (29) aninhada -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN .

    SUBCLASSOF      reduce using rule 29 (aninhada -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN .)
    CLASS           reduce using rule 29 (aninhada -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN .)
    $end            reduce using rule 29 (aninhada -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 20 resolved as shift
WARNING: shift/reduce conflict for AND in state 20 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 36 resolved as shift
WARNING: shift/reduce conflict for AND in state 36 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 47 resolved as shift
WARNING: shift/reduce conflict for AND in state 47 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 62 resolved as shift
WARNING: shift/reduce conflict for AND in state 62 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 70 resolved as shift
WARNING: shift/reduce conflict for AND in state 70 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 87 resolved as shift
WARNING: shift/reduce conflict for AND in state 87 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 89 resolved as shift
WARNING: shift/reduce conflict for AND in state 89 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 91 resolved as shift
WARNING: shift/reduce conflict for AND in state 91 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 92 resolved as shift
WARNING: shift/reduce conflict for AND in state 92 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 94 resolved as shift
WARNING: shift/reduce conflict for AND in state 94 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 96 resolved as shift
WARNING: shift/reduce conflict for AND in state 96 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 98 resolved as shift
WARNING: shift/reduce conflict for AND in state 98 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 100 resolved as shift
WARNING: shift/reduce conflict for AND in state 100 resolved as shift
WARNING: shift/reduce conflict for CLASS_IDENTIFIER in state 102 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 102 resolved as shift
WARNING: shift/reduce conflict for AND in state 102 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 103 resolved as shift
WARNING: shift/reduce conflict for AND in state 103 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 106 resolved as shift
WARNING: shift/reduce conflict for AND in state 106 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 107 resolved as shift
WARNING: shift/reduce conflict for AND in state 107 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 108 resolved as shift
WARNING: shift/reduce conflict for AND in state 108 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 110 resolved as shift
WARNING: shift/reduce conflict for AND in state 110 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 113 resolved as shift
WARNING: shift/reduce conflict for AND in state 113 resolved as shift
WARNING: shift/reduce conflict for CLASS_IDENTIFIER in state 119 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 119 resolved as shift
WARNING: shift/reduce conflict for AND in state 119 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 120 resolved as shift
WARNING: shift/reduce conflict for AND in state 120 resolved as shift
WARNING: shift/reduce conflict for CLASS_IDENTIFIER in state 126 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 126 resolved as shift
WARNING: shift/reduce conflict for AND in state 126 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 131 resolved as shift
WARNING: shift/reduce conflict for AND in state 131 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PAREN in state 149 resolved as shift
WARNING: reduce/reduce conflict in state 20 resolved using rule (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER)
WARNING: rejected rule (quantifier_aux_axioma -> CLASS_IDENTIFIER) in state 20
WARNING: reduce/reduce conflict in state 87 resolved using rule (covered_class -> CLASS_IDENTIFIER)
WARNING: rejected rule (quantifier_aux_axioma -> CLASS_IDENTIFIER) in state 87
WARNING: reduce/reduce conflict in state 92 resolved using rule (quantifier_aux_axioma -> comma_and quantifier_aux_axioma)
WARNING: rejected rule (quantifier_aux_axioma -> CLASS_IDENTIFIER comma_and quantifier_aux_axioma) in state 92
WARNING: reduce/reduce conflict in state 96 resolved using rule (quantifier_aux_axioma -> PROPERTY_IDENTIFIER quantifier_geral CLASS_IDENTIFIER)
WARNING: rejected rule (quantifier_aux_axioma -> CLASS_IDENTIFIER) in state 96
WARNING: reduce/reduce conflict in state 102 resolved using rule (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER)
WARNING: rejected rule (quantifier_aux -> CLASS_IDENTIFIER) in state 102
WARNING: reduce/reduce conflict in state 131 resolved using rule (quantifier_aux -> comma_and quantifier_aux)
WARNING: rejected rule (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux) in state 131
