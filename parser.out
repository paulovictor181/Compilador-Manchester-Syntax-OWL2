Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DISJOINtWITH
    NOT
    PROPERTY_IDENTIFIER_SIMPLE

Grammar

Rule 0     S' -> classes
Rule 1     classes -> defined_class
Rule 2     classes -> defined_class classes
Rule 3     classes -> primitive_class
Rule 4     classes -> primitive_class classes
Rule 5     primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section
Rule 6     subclass_section -> SUBCLASSOF quantifier_aux
Rule 7     subclass_section -> SUBCLASSOF enum_class
Rule 8     subclass_section -> SUBCLASSOF OR covered_class
Rule 9     subclass_section -> SUBCLASSOF CLASS_IDENTIFIER
Rule 10    subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions ONLY def_descriptions
Rule 11    disjoint_section -> DISJOINTCLASSES quantifier_aux
Rule 12    disjoint_section -> empty
Rule 13    disjoint_classes_list -> CLASS_IDENTIFIER
Rule 14    disjoint_classes_list -> CLASS_IDENTIFIER COMMA disjoint_classes_list
Rule 15    defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
Rule 16    defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section
Rule 17    enum_class -> OPEN_CURLY individuals CLOSE_CURLY
Rule 18    covered_class -> CLASS_IDENTIFIER OR covered_class
Rule 19    covered_class -> CLASS_IDENTIFIER
Rule 20    aux_fechamento -> OPEN_PAREN PROPERTY_IDENTIFIER aux_fechamento
Rule 21    aux_fechamento -> OR PROPERTY_IDENTIFIER aux_fechamento
Rule 22    aux_fechamento -> PROPERTY_IDENTIFIER CLOSE_PAREN
Rule 23    equivalentto_section -> EQUIVALENTTO enum_class
Rule 24    equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER OR covered_class
Rule 25    equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER def_descriptions
Rule 26    def_descriptions -> quantifier_aux
Rule 27    aninhada -> PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN
Rule 28    quantifier_aux -> comma_and OPEN_PAREN aninhada CLOSE_PAREN
Rule 29    quantifier_aux -> comma_and quantifier_aux
Rule 30    quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN
Rule 31    quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
Rule 32    quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type
Rule 33    quantifier_aux -> quantifier_aux comma_and quantifier_aux
Rule 34    quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux
Rule 35    quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux
Rule 36    quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux
Rule 37    quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux
Rule 38    quantifier_aux -> CLASS_IDENTIFIER
Rule 39    quantifier_aux -> PROPERTY_IDENTIFIER
Rule 40    quantifier -> SOME
Rule 41    quantifier -> ALL
Rule 42    quantifier -> VALUE
Rule 43    quantifier -> MAX
Rule 44    quantifier -> MIN
Rule 45    quantifier -> EXACTLY
Rule 46    quantifier -> THAT
Rule 47    sizecheck -> EQUAL CARDINALITY
Rule 48    sizecheck -> GREATER_THAN CARDINALITY
Rule 49    sizecheck -> LESS_THAN CARDINALITY
Rule 50    sizecheck -> GREATER_THAN EQUAL CARDINALITY
Rule 51    sizecheck -> LESS_THAN EQUAL CARDINALITY
Rule 52    namespace_type -> NAMESPACE TYPE
Rule 53    namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET
Rule 54    individuals_section -> INDIVIDUALS individuals
Rule 55    individuals_section -> empty
Rule 56    individuals -> INDIVIDUAL_NAME
Rule 57    individuals -> INDIVIDUAL_NAME COMMA individuals
Rule 58    comma_and -> COMMA
Rule 59    comma_and -> AND
Rule 60    empty -> <empty>

Terminals, with rules where they appear

ALL                  : 41
AND                  : 59
CARDINALITY          : 47 48 49 50 51
CLASS                : 5 15 16
CLASS_IDENTIFIER     : 5 9 10 13 14 15 16 18 19 24 25 31 34 35 37 38
CLOSE_BRACKET        : 53
CLOSE_CURLY          : 17
CLOSE_PAREN          : 22 27 28 30
COMMA                : 14 57 58
DISJOINTCLASSES      : 11
DISJOINtWITH         : 
EQUAL                : 47 50 51
EQUIVALENTTO         : 23 24 25
EXACTLY              : 45
GREATER_THAN         : 48 50
INDIVIDUALS          : 54
INDIVIDUAL_NAME      : 56 57
LESS_THAN            : 49 51
MAX                  : 43
MIN                  : 44
NAMESPACE            : 52 53
NOT                  : 
ONLY                 : 10
OPEN_BRACKET         : 53
OPEN_CURLY           : 17
OPEN_PAREN           : 20 27 28 30
OR                   : 8 18 21 24 35
PROPERTY_IDENTIFIER  : 20 21 22 27 31 32 36 39
PROPERTY_IDENTIFIER_SIMPLE : 
SOME                 : 40
SUBCLASSOF           : 6 7 8 9 10
THAT                 : 46
TYPE                 : 52 53
VALUE                : 42
error                : 

Nonterminals, with rules where they appear

aninhada             : 28
aux_fechamento       : 20 21
classes              : 2 4 0
comma_and            : 28 29 33 37
covered_class        : 8 18 24
def_descriptions     : 10 10 25
defined_class        : 1 2
disjoint_classes_list : 14
disjoint_section     : 5
empty                : 12 55
enum_class           : 7 23
equivalentto_section : 15 16
individuals          : 17 54 57
individuals_section  : 5 15
namespace_type       : 32
primitive_class      : 3 4
quantifier           : 27 31 32 34 36
quantifier_aux       : 6 11 26 27 29 30 33 33 34 35 36 37
sizecheck            : 53
subclass_section     : 5 15

Parsing method: LALR

state 0

    (0) S' -> . classes
    (1) classes -> . defined_class
    (2) classes -> . defined_class classes
    (3) classes -> . primitive_class
    (4) classes -> . primitive_class classes
    (15) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
    (16) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section
    (5) primitive_class -> . CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section

    CLASS           shift and go to state 4

    classes                        shift and go to state 1
    defined_class                  shift and go to state 2
    primitive_class                shift and go to state 3

state 1

    (0) S' -> classes .



state 2

    (1) classes -> defined_class .
    (2) classes -> defined_class . classes
    (1) classes -> . defined_class
    (2) classes -> . defined_class classes
    (3) classes -> . primitive_class
    (4) classes -> . primitive_class classes
    (15) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
    (16) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section
    (5) primitive_class -> . CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section

    $end            reduce using rule 1 (classes -> defined_class .)
    CLASS           shift and go to state 4

    defined_class                  shift and go to state 2
    classes                        shift and go to state 5
    primitive_class                shift and go to state 3

state 3

    (3) classes -> primitive_class .
    (4) classes -> primitive_class . classes
    (1) classes -> . defined_class
    (2) classes -> . defined_class classes
    (3) classes -> . primitive_class
    (4) classes -> . primitive_class classes
    (15) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
    (16) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section
    (5) primitive_class -> . CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section

    $end            reduce using rule 3 (classes -> primitive_class .)
    CLASS           shift and go to state 4

    primitive_class                shift and go to state 3
    classes                        shift and go to state 6
    defined_class                  shift and go to state 2

state 4

    (15) defined_class -> CLASS . CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
    (16) defined_class -> CLASS . CLASS_IDENTIFIER equivalentto_section
    (5) primitive_class -> CLASS . CLASS_IDENTIFIER subclass_section disjoint_section individuals_section

    CLASS_IDENTIFIER shift and go to state 7


state 5

    (2) classes -> defined_class classes .

    $end            reduce using rule 2 (classes -> defined_class classes .)


state 6

    (4) classes -> primitive_class classes .

    $end            reduce using rule 4 (classes -> primitive_class classes .)


state 7

    (15) defined_class -> CLASS CLASS_IDENTIFIER . equivalentto_section subclass_section individuals_section
    (16) defined_class -> CLASS CLASS_IDENTIFIER . equivalentto_section
    (5) primitive_class -> CLASS CLASS_IDENTIFIER . subclass_section disjoint_section individuals_section
    (23) equivalentto_section -> . EQUIVALENTTO enum_class
    (24) equivalentto_section -> . EQUIVALENTTO CLASS_IDENTIFIER OR covered_class
    (25) equivalentto_section -> . EQUIVALENTTO CLASS_IDENTIFIER def_descriptions
    (6) subclass_section -> . SUBCLASSOF quantifier_aux
    (7) subclass_section -> . SUBCLASSOF enum_class
    (8) subclass_section -> . SUBCLASSOF OR covered_class
    (9) subclass_section -> . SUBCLASSOF CLASS_IDENTIFIER
    (10) subclass_section -> . SUBCLASSOF CLASS_IDENTIFIER def_descriptions ONLY def_descriptions

    EQUIVALENTTO    shift and go to state 10
    SUBCLASSOF      shift and go to state 11

    equivalentto_section           shift and go to state 8
    subclass_section               shift and go to state 9

state 8

    (15) defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section . subclass_section individuals_section
    (16) defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section .
    (6) subclass_section -> . SUBCLASSOF quantifier_aux
    (7) subclass_section -> . SUBCLASSOF enum_class
    (8) subclass_section -> . SUBCLASSOF OR covered_class
    (9) subclass_section -> . SUBCLASSOF CLASS_IDENTIFIER
    (10) subclass_section -> . SUBCLASSOF CLASS_IDENTIFIER def_descriptions ONLY def_descriptions

    CLASS           reduce using rule 16 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section .)
    $end            reduce using rule 16 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section .)
    SUBCLASSOF      shift and go to state 11

    subclass_section               shift and go to state 12

state 9

    (5) primitive_class -> CLASS CLASS_IDENTIFIER subclass_section . disjoint_section individuals_section
    (11) disjoint_section -> . DISJOINTCLASSES quantifier_aux
    (12) disjoint_section -> . empty
    (60) empty -> .

    DISJOINTCLASSES shift and go to state 14
    INDIVIDUALS     reduce using rule 60 (empty -> .)
    CLASS           reduce using rule 60 (empty -> .)
    $end            reduce using rule 60 (empty -> .)

    disjoint_section               shift and go to state 13
    empty                          shift and go to state 15

state 10

    (23) equivalentto_section -> EQUIVALENTTO . enum_class
    (24) equivalentto_section -> EQUIVALENTTO . CLASS_IDENTIFIER OR covered_class
    (25) equivalentto_section -> EQUIVALENTTO . CLASS_IDENTIFIER def_descriptions
    (17) enum_class -> . OPEN_CURLY individuals CLOSE_CURLY

    CLASS_IDENTIFIER shift and go to state 17
    OPEN_CURLY      shift and go to state 18

    enum_class                     shift and go to state 16

state 11

    (6) subclass_section -> SUBCLASSOF . quantifier_aux
    (7) subclass_section -> SUBCLASSOF . enum_class
    (8) subclass_section -> SUBCLASSOF . OR covered_class
    (9) subclass_section -> SUBCLASSOF . CLASS_IDENTIFIER
    (10) subclass_section -> SUBCLASSOF . CLASS_IDENTIFIER def_descriptions ONLY def_descriptions
    (28) quantifier_aux -> . comma_and OPEN_PAREN aninhada CLOSE_PAREN
    (29) quantifier_aux -> . comma_and quantifier_aux
    (30) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (31) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (33) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (34) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (35) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (37) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER
    (17) enum_class -> . OPEN_CURLY individuals CLOSE_CURLY
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

    OR              shift and go to state 21
    CLASS_IDENTIFIER shift and go to state 22
    OPEN_PAREN      shift and go to state 24
    PROPERTY_IDENTIFIER shift and go to state 25
    OPEN_CURLY      shift and go to state 18
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    quantifier_aux                 shift and go to state 19
    enum_class                     shift and go to state 20
    comma_and                      shift and go to state 23

state 12

    (15) defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section . individuals_section
    (54) individuals_section -> . INDIVIDUALS individuals
    (55) individuals_section -> . empty
    (60) empty -> .

    INDIVIDUALS     shift and go to state 29
    CLASS           reduce using rule 60 (empty -> .)
    $end            reduce using rule 60 (empty -> .)

    individuals_section            shift and go to state 28
    empty                          shift and go to state 30

state 13

    (5) primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section . individuals_section
    (54) individuals_section -> . INDIVIDUALS individuals
    (55) individuals_section -> . empty
    (60) empty -> .

    INDIVIDUALS     shift and go to state 29
    CLASS           reduce using rule 60 (empty -> .)
    $end            reduce using rule 60 (empty -> .)

    individuals_section            shift and go to state 31
    empty                          shift and go to state 30

state 14

    (11) disjoint_section -> DISJOINTCLASSES . quantifier_aux
    (28) quantifier_aux -> . comma_and OPEN_PAREN aninhada CLOSE_PAREN
    (29) quantifier_aux -> . comma_and quantifier_aux
    (30) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (31) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (33) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (34) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (35) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (37) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

    OPEN_PAREN      shift and go to state 24
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    quantifier_aux                 shift and go to state 32
    comma_and                      shift and go to state 23

state 15

    (12) disjoint_section -> empty .

    INDIVIDUALS     reduce using rule 12 (disjoint_section -> empty .)
    CLASS           reduce using rule 12 (disjoint_section -> empty .)
    $end            reduce using rule 12 (disjoint_section -> empty .)


state 16

    (23) equivalentto_section -> EQUIVALENTTO enum_class .

    SUBCLASSOF      reduce using rule 23 (equivalentto_section -> EQUIVALENTTO enum_class .)
    CLASS           reduce using rule 23 (equivalentto_section -> EQUIVALENTTO enum_class .)
    $end            reduce using rule 23 (equivalentto_section -> EQUIVALENTTO enum_class .)


state 17

    (24) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER . OR covered_class
    (25) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER . def_descriptions
    (26) def_descriptions -> . quantifier_aux
    (28) quantifier_aux -> . comma_and OPEN_PAREN aninhada CLOSE_PAREN
    (29) quantifier_aux -> . comma_and quantifier_aux
    (30) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (31) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (33) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (34) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (35) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (37) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

    OR              shift and go to state 34
    OPEN_PAREN      shift and go to state 24
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    def_descriptions               shift and go to state 35
    quantifier_aux                 shift and go to state 36
    comma_and                      shift and go to state 23

state 18

    (17) enum_class -> OPEN_CURLY . individuals CLOSE_CURLY
    (56) individuals -> . INDIVIDUAL_NAME
    (57) individuals -> . INDIVIDUAL_NAME COMMA individuals

    INDIVIDUAL_NAME shift and go to state 38

    individuals                    shift and go to state 37

state 19

    (6) subclass_section -> SUBCLASSOF quantifier_aux .
    (33) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

    DISJOINTCLASSES reduce using rule 6 (subclass_section -> SUBCLASSOF quantifier_aux .)
    INDIVIDUALS     reduce using rule 6 (subclass_section -> SUBCLASSOF quantifier_aux .)
    CLASS           reduce using rule 6 (subclass_section -> SUBCLASSOF quantifier_aux .)
    $end            reduce using rule 6 (subclass_section -> SUBCLASSOF quantifier_aux .)
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 39

state 20

    (7) subclass_section -> SUBCLASSOF enum_class .

    DISJOINTCLASSES reduce using rule 7 (subclass_section -> SUBCLASSOF enum_class .)
    INDIVIDUALS     reduce using rule 7 (subclass_section -> SUBCLASSOF enum_class .)
    CLASS           reduce using rule 7 (subclass_section -> SUBCLASSOF enum_class .)
    $end            reduce using rule 7 (subclass_section -> SUBCLASSOF enum_class .)


state 21

    (8) subclass_section -> SUBCLASSOF OR . covered_class
    (18) covered_class -> . CLASS_IDENTIFIER OR covered_class
    (19) covered_class -> . CLASS_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 41

    covered_class                  shift and go to state 40

state 22

    (9) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .
    (10) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER . def_descriptions ONLY def_descriptions
    (34) quantifier_aux -> CLASS_IDENTIFIER . quantifier quantifier_aux
    (35) quantifier_aux -> CLASS_IDENTIFIER . OR quantifier_aux
    (37) quantifier_aux -> CLASS_IDENTIFIER . comma_and quantifier_aux
    (38) quantifier_aux -> CLASS_IDENTIFIER .
    (26) def_descriptions -> . quantifier_aux
    (40) quantifier -> . SOME
    (41) quantifier -> . ALL
    (42) quantifier -> . VALUE
    (43) quantifier -> . MAX
    (44) quantifier -> . MIN
    (45) quantifier -> . EXACTLY
    (46) quantifier -> . THAT
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND
    (28) quantifier_aux -> . comma_and OPEN_PAREN aninhada CLOSE_PAREN
    (29) quantifier_aux -> . comma_and quantifier_aux
    (30) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (31) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (33) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (34) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (35) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (37) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER

  ! reduce/reduce conflict for DISJOINTCLASSES resolved using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for INDIVIDUALS resolved using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
    CLASS           reduce using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
    $end            reduce using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
    OR              shift and go to state 44
    SOME            shift and go to state 46
    ALL             shift and go to state 47
    VALUE           shift and go to state 48
    MAX             shift and go to state 49
    MIN             shift and go to state 50
    EXACTLY         shift and go to state 51
    THAT            shift and go to state 52
    COMMA           shift and go to state 26
    AND             shift and go to state 27
    OPEN_PAREN      shift and go to state 24
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33

  ! COMMA           [ reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! AND             [ reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! DISJOINTCLASSES [ reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! INDIVIDUALS     [ reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .) ]

    def_descriptions               shift and go to state 42
    quantifier                     shift and go to state 43
    quantifier_aux                 shift and go to state 36
    comma_and                      shift and go to state 45

state 23

    (28) quantifier_aux -> comma_and . OPEN_PAREN aninhada CLOSE_PAREN
    (29) quantifier_aux -> comma_and . quantifier_aux
    (28) quantifier_aux -> . comma_and OPEN_PAREN aninhada CLOSE_PAREN
    (29) quantifier_aux -> . comma_and quantifier_aux
    (30) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (31) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (33) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (34) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (35) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (37) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

    OPEN_PAREN      shift and go to state 53
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 23
    quantifier_aux                 shift and go to state 54

state 24

    (30) quantifier_aux -> OPEN_PAREN . quantifier_aux CLOSE_PAREN
    (28) quantifier_aux -> . comma_and OPEN_PAREN aninhada CLOSE_PAREN
    (29) quantifier_aux -> . comma_and quantifier_aux
    (30) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (31) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (33) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (34) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (35) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (37) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

    OPEN_PAREN      shift and go to state 24
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    quantifier_aux                 shift and go to state 55
    comma_and                      shift and go to state 23

state 25

    (31) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier CLASS_IDENTIFIER
    (32) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier namespace_type
    (36) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier quantifier_aux
    (39) quantifier_aux -> PROPERTY_IDENTIFIER .
    (40) quantifier -> . SOME
    (41) quantifier -> . ALL
    (42) quantifier -> . VALUE
    (43) quantifier -> . MAX
    (44) quantifier -> . MIN
    (45) quantifier -> . EXACTLY
    (46) quantifier -> . THAT

    COMMA           reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    AND             reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    DISJOINTCLASSES reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    CLASS           reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    $end            reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    SUBCLASSOF      reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    ONLY            reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    SOME            shift and go to state 46
    ALL             shift and go to state 47
    VALUE           shift and go to state 48
    MAX             shift and go to state 49
    MIN             shift and go to state 50
    EXACTLY         shift and go to state 51
    THAT            shift and go to state 52

    quantifier                     shift and go to state 56

state 26

    (58) comma_and -> COMMA .

    OPEN_PAREN      reduce using rule 58 (comma_and -> COMMA .)
    PROPERTY_IDENTIFIER reduce using rule 58 (comma_and -> COMMA .)
    CLASS_IDENTIFIER reduce using rule 58 (comma_and -> COMMA .)
    COMMA           reduce using rule 58 (comma_and -> COMMA .)
    AND             reduce using rule 58 (comma_and -> COMMA .)


state 27

    (59) comma_and -> AND .

    OPEN_PAREN      reduce using rule 59 (comma_and -> AND .)
    PROPERTY_IDENTIFIER reduce using rule 59 (comma_and -> AND .)
    CLASS_IDENTIFIER reduce using rule 59 (comma_and -> AND .)
    COMMA           reduce using rule 59 (comma_and -> AND .)
    AND             reduce using rule 59 (comma_and -> AND .)


state 28

    (15) defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section .

    CLASS           reduce using rule 15 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section .)
    $end            reduce using rule 15 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section .)


state 29

    (54) individuals_section -> INDIVIDUALS . individuals
    (56) individuals -> . INDIVIDUAL_NAME
    (57) individuals -> . INDIVIDUAL_NAME COMMA individuals

    INDIVIDUAL_NAME shift and go to state 38

    individuals                    shift and go to state 57

state 30

    (55) individuals_section -> empty .

    CLASS           reduce using rule 55 (individuals_section -> empty .)
    $end            reduce using rule 55 (individuals_section -> empty .)


state 31

    (5) primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section .

    CLASS           reduce using rule 5 (primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section .)
    $end            reduce using rule 5 (primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section .)


state 32

    (11) disjoint_section -> DISJOINTCLASSES quantifier_aux .
    (33) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

    INDIVIDUALS     reduce using rule 11 (disjoint_section -> DISJOINTCLASSES quantifier_aux .)
    CLASS           reduce using rule 11 (disjoint_section -> DISJOINTCLASSES quantifier_aux .)
    $end            reduce using rule 11 (disjoint_section -> DISJOINTCLASSES quantifier_aux .)
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 39

state 33

    (34) quantifier_aux -> CLASS_IDENTIFIER . quantifier quantifier_aux
    (35) quantifier_aux -> CLASS_IDENTIFIER . OR quantifier_aux
    (37) quantifier_aux -> CLASS_IDENTIFIER . comma_and quantifier_aux
    (38) quantifier_aux -> CLASS_IDENTIFIER .
    (40) quantifier -> . SOME
    (41) quantifier -> . ALL
    (42) quantifier -> . VALUE
    (43) quantifier -> . MAX
    (44) quantifier -> . MIN
    (45) quantifier -> . EXACTLY
    (46) quantifier -> . THAT
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    OR              shift and go to state 44
    INDIVIDUALS     reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .)
    CLASS           reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .)
    $end            reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .)
    SUBCLASSOF      reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .)
    ONLY            reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .)
    DISJOINTCLASSES reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .)
    SOME            shift and go to state 46
    ALL             shift and go to state 47
    VALUE           shift and go to state 48
    MAX             shift and go to state 49
    MIN             shift and go to state 50
    EXACTLY         shift and go to state 51
    THAT            shift and go to state 52
    COMMA           shift and go to state 26
    AND             shift and go to state 27

  ! COMMA           [ reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! AND             [ reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .) ]

    quantifier                     shift and go to state 43
    comma_and                      shift and go to state 58

state 34

    (24) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER OR . covered_class
    (18) covered_class -> . CLASS_IDENTIFIER OR covered_class
    (19) covered_class -> . CLASS_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 41

    covered_class                  shift and go to state 59

state 35

    (25) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER def_descriptions .

    SUBCLASSOF      reduce using rule 25 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER def_descriptions .)
    CLASS           reduce using rule 25 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER def_descriptions .)
    $end            reduce using rule 25 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER def_descriptions .)


state 36

    (26) def_descriptions -> quantifier_aux .
    (33) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

    SUBCLASSOF      reduce using rule 26 (def_descriptions -> quantifier_aux .)
    CLASS           reduce using rule 26 (def_descriptions -> quantifier_aux .)
    $end            reduce using rule 26 (def_descriptions -> quantifier_aux .)
    ONLY            reduce using rule 26 (def_descriptions -> quantifier_aux .)
    DISJOINTCLASSES reduce using rule 26 (def_descriptions -> quantifier_aux .)
    INDIVIDUALS     reduce using rule 26 (def_descriptions -> quantifier_aux .)
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 39

state 37

    (17) enum_class -> OPEN_CURLY individuals . CLOSE_CURLY

    CLOSE_CURLY     shift and go to state 60


state 38

    (56) individuals -> INDIVIDUAL_NAME .
    (57) individuals -> INDIVIDUAL_NAME . COMMA individuals

    CLOSE_CURLY     reduce using rule 56 (individuals -> INDIVIDUAL_NAME .)
    CLASS           reduce using rule 56 (individuals -> INDIVIDUAL_NAME .)
    $end            reduce using rule 56 (individuals -> INDIVIDUAL_NAME .)
    COMMA           shift and go to state 61


state 39

    (33) quantifier_aux -> quantifier_aux comma_and . quantifier_aux
    (28) quantifier_aux -> . comma_and OPEN_PAREN aninhada CLOSE_PAREN
    (29) quantifier_aux -> . comma_and quantifier_aux
    (30) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (31) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (33) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (34) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (35) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (37) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

    OPEN_PAREN      shift and go to state 24
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    quantifier_aux                 shift and go to state 62
    comma_and                      shift and go to state 23

state 40

    (8) subclass_section -> SUBCLASSOF OR covered_class .

    DISJOINTCLASSES reduce using rule 8 (subclass_section -> SUBCLASSOF OR covered_class .)
    INDIVIDUALS     reduce using rule 8 (subclass_section -> SUBCLASSOF OR covered_class .)
    CLASS           reduce using rule 8 (subclass_section -> SUBCLASSOF OR covered_class .)
    $end            reduce using rule 8 (subclass_section -> SUBCLASSOF OR covered_class .)


state 41

    (18) covered_class -> CLASS_IDENTIFIER . OR covered_class
    (19) covered_class -> CLASS_IDENTIFIER .

    OR              shift and go to state 63
    DISJOINTCLASSES reduce using rule 19 (covered_class -> CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 19 (covered_class -> CLASS_IDENTIFIER .)
    CLASS           reduce using rule 19 (covered_class -> CLASS_IDENTIFIER .)
    $end            reduce using rule 19 (covered_class -> CLASS_IDENTIFIER .)
    SUBCLASSOF      reduce using rule 19 (covered_class -> CLASS_IDENTIFIER .)


state 42

    (10) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions . ONLY def_descriptions

    ONLY            shift and go to state 64


state 43

    (34) quantifier_aux -> CLASS_IDENTIFIER quantifier . quantifier_aux
    (28) quantifier_aux -> . comma_and OPEN_PAREN aninhada CLOSE_PAREN
    (29) quantifier_aux -> . comma_and quantifier_aux
    (30) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (31) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (33) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (34) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (35) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (37) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

    OPEN_PAREN      shift and go to state 24
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    quantifier_aux                 shift and go to state 65
    comma_and                      shift and go to state 23

state 44

    (35) quantifier_aux -> CLASS_IDENTIFIER OR . quantifier_aux
    (28) quantifier_aux -> . comma_and OPEN_PAREN aninhada CLOSE_PAREN
    (29) quantifier_aux -> . comma_and quantifier_aux
    (30) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (31) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (33) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (34) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (35) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (37) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

    OPEN_PAREN      shift and go to state 24
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    quantifier_aux                 shift and go to state 66
    comma_and                      shift and go to state 23

state 45

    (37) quantifier_aux -> CLASS_IDENTIFIER comma_and . quantifier_aux
    (28) quantifier_aux -> comma_and . OPEN_PAREN aninhada CLOSE_PAREN
    (29) quantifier_aux -> comma_and . quantifier_aux
    (28) quantifier_aux -> . comma_and OPEN_PAREN aninhada CLOSE_PAREN
    (29) quantifier_aux -> . comma_and quantifier_aux
    (30) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (31) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (33) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (34) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (35) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (37) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

    OPEN_PAREN      shift and go to state 53
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 23
    quantifier_aux                 shift and go to state 67

state 46

    (40) quantifier -> SOME .

    OPEN_PAREN      reduce using rule 40 (quantifier -> SOME .)
    PROPERTY_IDENTIFIER reduce using rule 40 (quantifier -> SOME .)
    CLASS_IDENTIFIER reduce using rule 40 (quantifier -> SOME .)
    COMMA           reduce using rule 40 (quantifier -> SOME .)
    AND             reduce using rule 40 (quantifier -> SOME .)
    NAMESPACE       reduce using rule 40 (quantifier -> SOME .)


state 47

    (41) quantifier -> ALL .

    OPEN_PAREN      reduce using rule 41 (quantifier -> ALL .)
    PROPERTY_IDENTIFIER reduce using rule 41 (quantifier -> ALL .)
    CLASS_IDENTIFIER reduce using rule 41 (quantifier -> ALL .)
    COMMA           reduce using rule 41 (quantifier -> ALL .)
    AND             reduce using rule 41 (quantifier -> ALL .)
    NAMESPACE       reduce using rule 41 (quantifier -> ALL .)


state 48

    (42) quantifier -> VALUE .

    OPEN_PAREN      reduce using rule 42 (quantifier -> VALUE .)
    PROPERTY_IDENTIFIER reduce using rule 42 (quantifier -> VALUE .)
    CLASS_IDENTIFIER reduce using rule 42 (quantifier -> VALUE .)
    COMMA           reduce using rule 42 (quantifier -> VALUE .)
    AND             reduce using rule 42 (quantifier -> VALUE .)
    NAMESPACE       reduce using rule 42 (quantifier -> VALUE .)


state 49

    (43) quantifier -> MAX .

    OPEN_PAREN      reduce using rule 43 (quantifier -> MAX .)
    PROPERTY_IDENTIFIER reduce using rule 43 (quantifier -> MAX .)
    CLASS_IDENTIFIER reduce using rule 43 (quantifier -> MAX .)
    COMMA           reduce using rule 43 (quantifier -> MAX .)
    AND             reduce using rule 43 (quantifier -> MAX .)
    NAMESPACE       reduce using rule 43 (quantifier -> MAX .)


state 50

    (44) quantifier -> MIN .

    OPEN_PAREN      reduce using rule 44 (quantifier -> MIN .)
    PROPERTY_IDENTIFIER reduce using rule 44 (quantifier -> MIN .)
    CLASS_IDENTIFIER reduce using rule 44 (quantifier -> MIN .)
    COMMA           reduce using rule 44 (quantifier -> MIN .)
    AND             reduce using rule 44 (quantifier -> MIN .)
    NAMESPACE       reduce using rule 44 (quantifier -> MIN .)


state 51

    (45) quantifier -> EXACTLY .

    OPEN_PAREN      reduce using rule 45 (quantifier -> EXACTLY .)
    PROPERTY_IDENTIFIER reduce using rule 45 (quantifier -> EXACTLY .)
    CLASS_IDENTIFIER reduce using rule 45 (quantifier -> EXACTLY .)
    COMMA           reduce using rule 45 (quantifier -> EXACTLY .)
    AND             reduce using rule 45 (quantifier -> EXACTLY .)
    NAMESPACE       reduce using rule 45 (quantifier -> EXACTLY .)


state 52

    (46) quantifier -> THAT .

    OPEN_PAREN      reduce using rule 46 (quantifier -> THAT .)
    PROPERTY_IDENTIFIER reduce using rule 46 (quantifier -> THAT .)
    CLASS_IDENTIFIER reduce using rule 46 (quantifier -> THAT .)
    COMMA           reduce using rule 46 (quantifier -> THAT .)
    AND             reduce using rule 46 (quantifier -> THAT .)
    NAMESPACE       reduce using rule 46 (quantifier -> THAT .)


state 53

    (28) quantifier_aux -> comma_and OPEN_PAREN . aninhada CLOSE_PAREN
    (30) quantifier_aux -> OPEN_PAREN . quantifier_aux CLOSE_PAREN
    (27) aninhada -> . PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN
    (28) quantifier_aux -> . comma_and OPEN_PAREN aninhada CLOSE_PAREN
    (29) quantifier_aux -> . comma_and quantifier_aux
    (30) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (31) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (33) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (34) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (35) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (37) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

    PROPERTY_IDENTIFIER shift and go to state 69
    OPEN_PAREN      shift and go to state 24
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 23
    aninhada                       shift and go to state 68
    quantifier_aux                 shift and go to state 55

state 54

    (29) quantifier_aux -> comma_and quantifier_aux .
    (33) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 29 (quantifier_aux -> comma_and quantifier_aux .)
    INDIVIDUALS     reduce using rule 29 (quantifier_aux -> comma_and quantifier_aux .)
    CLASS           reduce using rule 29 (quantifier_aux -> comma_and quantifier_aux .)
    $end            reduce using rule 29 (quantifier_aux -> comma_and quantifier_aux .)
    SUBCLASSOF      reduce using rule 29 (quantifier_aux -> comma_and quantifier_aux .)
    CLOSE_PAREN     reduce using rule 29 (quantifier_aux -> comma_and quantifier_aux .)
    ONLY            reduce using rule 29 (quantifier_aux -> comma_and quantifier_aux .)
    COMMA           shift and go to state 26
    AND             shift and go to state 27

  ! COMMA           [ reduce using rule 29 (quantifier_aux -> comma_and quantifier_aux .) ]
  ! AND             [ reduce using rule 29 (quantifier_aux -> comma_and quantifier_aux .) ]

    comma_and                      shift and go to state 39

state 55

    (30) quantifier_aux -> OPEN_PAREN quantifier_aux . CLOSE_PAREN
    (33) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

    CLOSE_PAREN     shift and go to state 70
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 39

state 56

    (31) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . CLASS_IDENTIFIER
    (32) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . namespace_type
    (36) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . quantifier_aux
    (52) namespace_type -> . NAMESPACE TYPE
    (53) namespace_type -> . NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET
    (28) quantifier_aux -> . comma_and OPEN_PAREN aninhada CLOSE_PAREN
    (29) quantifier_aux -> . comma_and quantifier_aux
    (30) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (31) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (33) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (34) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (35) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (37) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

    CLASS_IDENTIFIER shift and go to state 71
    NAMESPACE       shift and go to state 74
    OPEN_PAREN      shift and go to state 24
    PROPERTY_IDENTIFIER shift and go to state 25
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    namespace_type                 shift and go to state 72
    quantifier_aux                 shift and go to state 73
    comma_and                      shift and go to state 23

state 57

    (54) individuals_section -> INDIVIDUALS individuals .

    CLASS           reduce using rule 54 (individuals_section -> INDIVIDUALS individuals .)
    $end            reduce using rule 54 (individuals_section -> INDIVIDUALS individuals .)


state 58

    (37) quantifier_aux -> CLASS_IDENTIFIER comma_and . quantifier_aux
    (28) quantifier_aux -> . comma_and OPEN_PAREN aninhada CLOSE_PAREN
    (29) quantifier_aux -> . comma_and quantifier_aux
    (30) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (31) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (33) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (34) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (35) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (37) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

    OPEN_PAREN      shift and go to state 24
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 23
    quantifier_aux                 shift and go to state 75

state 59

    (24) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER OR covered_class .

    SUBCLASSOF      reduce using rule 24 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER OR covered_class .)
    CLASS           reduce using rule 24 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER OR covered_class .)
    $end            reduce using rule 24 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER OR covered_class .)


state 60

    (17) enum_class -> OPEN_CURLY individuals CLOSE_CURLY .

    SUBCLASSOF      reduce using rule 17 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)
    CLASS           reduce using rule 17 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)
    $end            reduce using rule 17 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)
    DISJOINTCLASSES reduce using rule 17 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)
    INDIVIDUALS     reduce using rule 17 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)


state 61

    (57) individuals -> INDIVIDUAL_NAME COMMA . individuals
    (56) individuals -> . INDIVIDUAL_NAME
    (57) individuals -> . INDIVIDUAL_NAME COMMA individuals

    INDIVIDUAL_NAME shift and go to state 38

    individuals                    shift and go to state 76

state 62

    (33) quantifier_aux -> quantifier_aux comma_and quantifier_aux .
    (33) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 33 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    INDIVIDUALS     reduce using rule 33 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    CLASS           reduce using rule 33 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    $end            reduce using rule 33 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    SUBCLASSOF      reduce using rule 33 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    ONLY            reduce using rule 33 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    CLOSE_PAREN     reduce using rule 33 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    COMMA           shift and go to state 26
    AND             shift and go to state 27

  ! COMMA           [ reduce using rule 33 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .) ]
  ! AND             [ reduce using rule 33 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .) ]

    comma_and                      shift and go to state 39

state 63

    (18) covered_class -> CLASS_IDENTIFIER OR . covered_class
    (18) covered_class -> . CLASS_IDENTIFIER OR covered_class
    (19) covered_class -> . CLASS_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 41

    covered_class                  shift and go to state 77

state 64

    (10) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions ONLY . def_descriptions
    (26) def_descriptions -> . quantifier_aux
    (28) quantifier_aux -> . comma_and OPEN_PAREN aninhada CLOSE_PAREN
    (29) quantifier_aux -> . comma_and quantifier_aux
    (30) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (31) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (33) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (34) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (35) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (37) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

    OPEN_PAREN      shift and go to state 24
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    def_descriptions               shift and go to state 78
    quantifier_aux                 shift and go to state 36
    comma_and                      shift and go to state 23

state 65

    (34) quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .
    (33) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 34 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .)
    INDIVIDUALS     reduce using rule 34 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .)
    CLASS           reduce using rule 34 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .)
    $end            reduce using rule 34 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .)
    SUBCLASSOF      reduce using rule 34 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .)
    ONLY            reduce using rule 34 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .)
    CLOSE_PAREN     reduce using rule 34 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .)
    COMMA           shift and go to state 26
    AND             shift and go to state 27

  ! COMMA           [ reduce using rule 34 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .) ]
  ! AND             [ reduce using rule 34 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .) ]

    comma_and                      shift and go to state 39

state 66

    (35) quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .
    (33) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 35 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .)
    INDIVIDUALS     reduce using rule 35 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .)
    CLASS           reduce using rule 35 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .)
    $end            reduce using rule 35 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .)
    SUBCLASSOF      reduce using rule 35 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .)
    ONLY            reduce using rule 35 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .)
    CLOSE_PAREN     reduce using rule 35 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .)
    COMMA           shift and go to state 26
    AND             shift and go to state 27

  ! COMMA           [ reduce using rule 35 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .) ]
  ! AND             [ reduce using rule 35 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .) ]

    comma_and                      shift and go to state 39

state 67

    (37) quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .
    (29) quantifier_aux -> comma_and quantifier_aux .
    (33) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

  ! reduce/reduce conflict for COMMA resolved using rule 29 (quantifier_aux -> comma_and quantifier_aux .)
  ! reduce/reduce conflict for AND resolved using rule 29 (quantifier_aux -> comma_and quantifier_aux .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 37 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    INDIVIDUALS     reduce using rule 37 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    CLASS           reduce using rule 37 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    $end            reduce using rule 37 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    ONLY            reduce using rule 29 (quantifier_aux -> comma_and quantifier_aux .)
    COMMA           shift and go to state 26
    AND             shift and go to state 27

  ! COMMA           [ reduce using rule 37 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]
  ! AND             [ reduce using rule 37 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]
  ! COMMA           [ reduce using rule 29 (quantifier_aux -> comma_and quantifier_aux .) ]
  ! AND             [ reduce using rule 29 (quantifier_aux -> comma_and quantifier_aux .) ]

    comma_and                      shift and go to state 39

state 68

    (28) quantifier_aux -> comma_and OPEN_PAREN aninhada . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 79


state 69

    (27) aninhada -> PROPERTY_IDENTIFIER . quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN
    (31) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier CLASS_IDENTIFIER
    (32) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier namespace_type
    (36) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier quantifier_aux
    (39) quantifier_aux -> PROPERTY_IDENTIFIER .
    (40) quantifier -> . SOME
    (41) quantifier -> . ALL
    (42) quantifier -> . VALUE
    (43) quantifier -> . MAX
    (44) quantifier -> . MIN
    (45) quantifier -> . EXACTLY
    (46) quantifier -> . THAT

    CLOSE_PAREN     reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    COMMA           reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    AND             reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    SOME            shift and go to state 46
    ALL             shift and go to state 47
    VALUE           shift and go to state 48
    MAX             shift and go to state 49
    MIN             shift and go to state 50
    EXACTLY         shift and go to state 51
    THAT            shift and go to state 52

    quantifier                     shift and go to state 80

state 70

    (30) quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .

    COMMA           reduce using rule 30 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    AND             reduce using rule 30 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    DISJOINTCLASSES reduce using rule 30 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    INDIVIDUALS     reduce using rule 30 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    CLASS           reduce using rule 30 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    $end            reduce using rule 30 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    SUBCLASSOF      reduce using rule 30 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    ONLY            reduce using rule 30 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 30 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)


state 71

    (31) quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .
    (34) quantifier_aux -> CLASS_IDENTIFIER . quantifier quantifier_aux
    (35) quantifier_aux -> CLASS_IDENTIFIER . OR quantifier_aux
    (37) quantifier_aux -> CLASS_IDENTIFIER . comma_and quantifier_aux
    (38) quantifier_aux -> CLASS_IDENTIFIER .
    (40) quantifier -> . SOME
    (41) quantifier -> . ALL
    (42) quantifier -> . VALUE
    (43) quantifier -> . MAX
    (44) quantifier -> . MIN
    (45) quantifier -> . EXACTLY
    (46) quantifier -> . THAT
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

  ! reduce/reduce conflict for COMMA resolved using rule 31 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for AND resolved using rule 31 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for DISJOINTCLASSES resolved using rule 31 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for INDIVIDUALS resolved using rule 31 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 31 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 31 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for SUBCLASSOF resolved using rule 31 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for CLOSE_PAREN resolved using rule 31 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for ONLY resolved using rule 31 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 31 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 31 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    CLASS           reduce using rule 31 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    $end            reduce using rule 31 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    SUBCLASSOF      reduce using rule 31 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    ONLY            reduce using rule 31 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 31 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    OR              shift and go to state 44
    SOME            shift and go to state 46
    ALL             shift and go to state 47
    VALUE           shift and go to state 48
    MAX             shift and go to state 49
    MIN             shift and go to state 50
    EXACTLY         shift and go to state 51
    THAT            shift and go to state 52
    COMMA           shift and go to state 26
    AND             shift and go to state 27

  ! COMMA           [ reduce using rule 31 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .) ]
  ! AND             [ reduce using rule 31 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! AND             [ reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! DISJOINTCLASSES [ reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! INDIVIDUALS     [ reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! SUBCLASSOF      [ reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! CLOSE_PAREN     [ reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! ONLY            [ reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER .) ]

    quantifier                     shift and go to state 43
    comma_and                      shift and go to state 58

state 72

    (32) quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .

    COMMA           reduce using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    AND             reduce using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    DISJOINTCLASSES reduce using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    INDIVIDUALS     reduce using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    CLASS           reduce using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    $end            reduce using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    SUBCLASSOF      reduce using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    ONLY            reduce using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    CLOSE_PAREN     reduce using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)


state 73

    (36) quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .
    (33) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .)
    INDIVIDUALS     reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .)
    CLASS           reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .)
    $end            reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .)
    SUBCLASSOF      reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .)
    ONLY            reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .)
    CLOSE_PAREN     reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .)
    COMMA           shift and go to state 26
    AND             shift and go to state 27

  ! COMMA           [ reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .) ]
  ! AND             [ reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .) ]

    comma_and                      shift and go to state 39

state 74

    (52) namespace_type -> NAMESPACE . TYPE
    (53) namespace_type -> NAMESPACE . TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET

    TYPE            shift and go to state 81


state 75

    (37) quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .
    (33) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    INDIVIDUALS     reduce using rule 37 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    CLASS           reduce using rule 37 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    $end            reduce using rule 37 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    SUBCLASSOF      reduce using rule 37 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    ONLY            reduce using rule 37 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    DISJOINTCLASSES reduce using rule 37 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    CLOSE_PAREN     reduce using rule 37 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    COMMA           shift and go to state 26
    AND             shift and go to state 27

  ! COMMA           [ reduce using rule 37 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]
  ! AND             [ reduce using rule 37 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]

    comma_and                      shift and go to state 39

state 76

    (57) individuals -> INDIVIDUAL_NAME COMMA individuals .

    CLOSE_CURLY     reduce using rule 57 (individuals -> INDIVIDUAL_NAME COMMA individuals .)
    CLASS           reduce using rule 57 (individuals -> INDIVIDUAL_NAME COMMA individuals .)
    $end            reduce using rule 57 (individuals -> INDIVIDUAL_NAME COMMA individuals .)


state 77

    (18) covered_class -> CLASS_IDENTIFIER OR covered_class .

    DISJOINTCLASSES reduce using rule 18 (covered_class -> CLASS_IDENTIFIER OR covered_class .)
    INDIVIDUALS     reduce using rule 18 (covered_class -> CLASS_IDENTIFIER OR covered_class .)
    CLASS           reduce using rule 18 (covered_class -> CLASS_IDENTIFIER OR covered_class .)
    $end            reduce using rule 18 (covered_class -> CLASS_IDENTIFIER OR covered_class .)
    SUBCLASSOF      reduce using rule 18 (covered_class -> CLASS_IDENTIFIER OR covered_class .)


state 78

    (10) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions ONLY def_descriptions .

    DISJOINTCLASSES reduce using rule 10 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions ONLY def_descriptions .)
    INDIVIDUALS     reduce using rule 10 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions ONLY def_descriptions .)
    CLASS           reduce using rule 10 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions ONLY def_descriptions .)
    $end            reduce using rule 10 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions ONLY def_descriptions .)


state 79

    (28) quantifier_aux -> comma_and OPEN_PAREN aninhada CLOSE_PAREN .

    COMMA           reduce using rule 28 (quantifier_aux -> comma_and OPEN_PAREN aninhada CLOSE_PAREN .)
    AND             reduce using rule 28 (quantifier_aux -> comma_and OPEN_PAREN aninhada CLOSE_PAREN .)
    DISJOINTCLASSES reduce using rule 28 (quantifier_aux -> comma_and OPEN_PAREN aninhada CLOSE_PAREN .)
    INDIVIDUALS     reduce using rule 28 (quantifier_aux -> comma_and OPEN_PAREN aninhada CLOSE_PAREN .)
    CLASS           reduce using rule 28 (quantifier_aux -> comma_and OPEN_PAREN aninhada CLOSE_PAREN .)
    $end            reduce using rule 28 (quantifier_aux -> comma_and OPEN_PAREN aninhada CLOSE_PAREN .)
    SUBCLASSOF      reduce using rule 28 (quantifier_aux -> comma_and OPEN_PAREN aninhada CLOSE_PAREN .)
    ONLY            reduce using rule 28 (quantifier_aux -> comma_and OPEN_PAREN aninhada CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 28 (quantifier_aux -> comma_and OPEN_PAREN aninhada CLOSE_PAREN .)


state 80

    (27) aninhada -> PROPERTY_IDENTIFIER quantifier . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (31) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . CLASS_IDENTIFIER
    (32) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . namespace_type
    (36) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . quantifier_aux
    (52) namespace_type -> . NAMESPACE TYPE
    (53) namespace_type -> . NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET
    (28) quantifier_aux -> . comma_and OPEN_PAREN aninhada CLOSE_PAREN
    (29) quantifier_aux -> . comma_and quantifier_aux
    (30) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (31) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (33) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (34) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (35) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (37) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

    OPEN_PAREN      shift and go to state 82
    CLASS_IDENTIFIER shift and go to state 71
    NAMESPACE       shift and go to state 74
    PROPERTY_IDENTIFIER shift and go to state 25
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    quantifier_aux                 shift and go to state 73
    namespace_type                 shift and go to state 72
    comma_and                      shift and go to state 23

state 81

    (52) namespace_type -> NAMESPACE TYPE .
    (53) namespace_type -> NAMESPACE TYPE . OPEN_BRACKET sizecheck CLOSE_BRACKET

    COMMA           reduce using rule 52 (namespace_type -> NAMESPACE TYPE .)
    AND             reduce using rule 52 (namespace_type -> NAMESPACE TYPE .)
    DISJOINTCLASSES reduce using rule 52 (namespace_type -> NAMESPACE TYPE .)
    INDIVIDUALS     reduce using rule 52 (namespace_type -> NAMESPACE TYPE .)
    CLASS           reduce using rule 52 (namespace_type -> NAMESPACE TYPE .)
    $end            reduce using rule 52 (namespace_type -> NAMESPACE TYPE .)
    SUBCLASSOF      reduce using rule 52 (namespace_type -> NAMESPACE TYPE .)
    ONLY            reduce using rule 52 (namespace_type -> NAMESPACE TYPE .)
    CLOSE_PAREN     reduce using rule 52 (namespace_type -> NAMESPACE TYPE .)
    OPEN_BRACKET    shift and go to state 83


state 82

    (27) aninhada -> PROPERTY_IDENTIFIER quantifier OPEN_PAREN . quantifier_aux CLOSE_PAREN
    (30) quantifier_aux -> OPEN_PAREN . quantifier_aux CLOSE_PAREN
    (28) quantifier_aux -> . comma_and OPEN_PAREN aninhada CLOSE_PAREN
    (29) quantifier_aux -> . comma_and quantifier_aux
    (30) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (31) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (33) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (34) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (35) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (37) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

    OPEN_PAREN      shift and go to state 24
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    quantifier_aux                 shift and go to state 84
    comma_and                      shift and go to state 23

state 83

    (53) namespace_type -> NAMESPACE TYPE OPEN_BRACKET . sizecheck CLOSE_BRACKET
    (47) sizecheck -> . EQUAL CARDINALITY
    (48) sizecheck -> . GREATER_THAN CARDINALITY
    (49) sizecheck -> . LESS_THAN CARDINALITY
    (50) sizecheck -> . GREATER_THAN EQUAL CARDINALITY
    (51) sizecheck -> . LESS_THAN EQUAL CARDINALITY

    EQUAL           shift and go to state 86
    GREATER_THAN    shift and go to state 87
    LESS_THAN       shift and go to state 88

    sizecheck                      shift and go to state 85

state 84

    (27) aninhada -> PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux . CLOSE_PAREN
    (30) quantifier_aux -> OPEN_PAREN quantifier_aux . CLOSE_PAREN
    (33) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (58) comma_and -> . COMMA
    (59) comma_and -> . AND

    CLOSE_PAREN     shift and go to state 89
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 39

state 85

    (53) namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 90


state 86

    (47) sizecheck -> EQUAL . CARDINALITY

    CARDINALITY     shift and go to state 91


state 87

    (48) sizecheck -> GREATER_THAN . CARDINALITY
    (50) sizecheck -> GREATER_THAN . EQUAL CARDINALITY

    CARDINALITY     shift and go to state 92
    EQUAL           shift and go to state 93


state 88

    (49) sizecheck -> LESS_THAN . CARDINALITY
    (51) sizecheck -> LESS_THAN . EQUAL CARDINALITY

    CARDINALITY     shift and go to state 94
    EQUAL           shift and go to state 95


state 89

    (27) aninhada -> PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN .
    (30) quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .

  ! reduce/reduce conflict for CLOSE_PAREN resolved using rule 27 (aninhada -> PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 27 (aninhada -> PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    COMMA           reduce using rule 30 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    AND             reduce using rule 30 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)

  ! CLOSE_PAREN     [ reduce using rule 30 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .) ]


state 90

    (53) namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .

    COMMA           reduce using rule 53 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    AND             reduce using rule 53 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    DISJOINTCLASSES reduce using rule 53 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    INDIVIDUALS     reduce using rule 53 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    CLASS           reduce using rule 53 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    $end            reduce using rule 53 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    SUBCLASSOF      reduce using rule 53 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    ONLY            reduce using rule 53 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 53 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)


state 91

    (47) sizecheck -> EQUAL CARDINALITY .

    CLOSE_BRACKET   reduce using rule 47 (sizecheck -> EQUAL CARDINALITY .)


state 92

    (48) sizecheck -> GREATER_THAN CARDINALITY .

    CLOSE_BRACKET   reduce using rule 48 (sizecheck -> GREATER_THAN CARDINALITY .)


state 93

    (50) sizecheck -> GREATER_THAN EQUAL . CARDINALITY

    CARDINALITY     shift and go to state 96


state 94

    (49) sizecheck -> LESS_THAN CARDINALITY .

    CLOSE_BRACKET   reduce using rule 49 (sizecheck -> LESS_THAN CARDINALITY .)


state 95

    (51) sizecheck -> LESS_THAN EQUAL . CARDINALITY

    CARDINALITY     shift and go to state 97


state 96

    (50) sizecheck -> GREATER_THAN EQUAL CARDINALITY .

    CLOSE_BRACKET   reduce using rule 50 (sizecheck -> GREATER_THAN EQUAL CARDINALITY .)


state 97

    (51) sizecheck -> LESS_THAN EQUAL CARDINALITY .

    CLOSE_BRACKET   reduce using rule 51 (sizecheck -> LESS_THAN EQUAL CARDINALITY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 22 resolved as shift
WARNING: shift/reduce conflict for AND in state 22 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 33 resolved as shift
WARNING: shift/reduce conflict for AND in state 33 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 54 resolved as shift
WARNING: shift/reduce conflict for AND in state 54 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 62 resolved as shift
WARNING: shift/reduce conflict for AND in state 62 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 65 resolved as shift
WARNING: shift/reduce conflict for AND in state 65 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 66 resolved as shift
WARNING: shift/reduce conflict for AND in state 66 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 67 resolved as shift
WARNING: shift/reduce conflict for AND in state 67 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 71 resolved as shift
WARNING: shift/reduce conflict for AND in state 71 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 73 resolved as shift
WARNING: shift/reduce conflict for AND in state 73 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 75 resolved as shift
WARNING: shift/reduce conflict for AND in state 75 resolved as shift
WARNING: reduce/reduce conflict in state 22 resolved using rule (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER)
WARNING: rejected rule (quantifier_aux -> CLASS_IDENTIFIER) in state 22
WARNING: reduce/reduce conflict in state 67 resolved using rule (quantifier_aux -> comma_and quantifier_aux)
WARNING: rejected rule (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux) in state 67
WARNING: reduce/reduce conflict in state 71 resolved using rule (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER)
WARNING: rejected rule (quantifier_aux -> CLASS_IDENTIFIER) in state 71
WARNING: reduce/reduce conflict in state 89 resolved using rule (aninhada -> PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN)
WARNING: rejected rule (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN) in state 89
