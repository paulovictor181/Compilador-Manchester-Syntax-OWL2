Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DISJOINtWITH
    NOT
    PROPERTY_IDENTIFIER_SIMPLE

Grammar

Rule 0     S' -> classes
Rule 1     classes -> defined_class
Rule 2     classes -> defined_class classes
Rule 3     classes -> primitive_class
Rule 4     classes -> primitive_class classes
Rule 5     primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section
Rule 6     subclass_section -> SUBCLASSOF enum_class
Rule 7     subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN
Rule 8     subclass_section -> SUBCLASSOF OR covered_class
Rule 9     subclass_section -> SUBCLASSOF CLASS_IDENTIFIER
Rule 10    subclass_section -> SUBCLASSOF quantifier_aux
Rule 11    auxiliar_fechamento -> CLASS_IDENTIFIER
Rule 12    auxiliar_fechamento -> CLASS_IDENTIFIER OR auxiliar_fechamento
Rule 13    disjoint_section -> DISJOINTCLASSES quantifier_aux
Rule 14    disjoint_section -> empty
Rule 15    disjoint_classes_list -> CLASS_IDENTIFIER
Rule 16    disjoint_classes_list -> CLASS_IDENTIFIER COMMA disjoint_classes_list
Rule 17    defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
Rule 18    defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section
Rule 19    enum_class -> OPEN_CURLY individuals CLOSE_CURLY
Rule 20    covered_class -> CLASS_IDENTIFIER OR covered_class
Rule 21    covered_class -> CLASS_IDENTIFIER
Rule 22    equivalentto_section -> EQUIVALENTTO enum_class
Rule 23    equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER OR covered_class
Rule 24    equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER aninhada
Rule 25    equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER only_defined
Rule 26    def_descriptions -> quantifier_aux
Rule 27    only_defined -> comma_and quantifier_aux
Rule 28    aninhada -> comma_and OPEN_PAREN OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN
Rule 29    aninhada -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN
Rule 30    quantifier_aux -> comma_and quantifier_aux
Rule 31    quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN
Rule 32    quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
Rule 33    quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
Rule 34    quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type
Rule 35    quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
Rule 36    quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
Rule 37    quantifier_aux -> quantifier_aux comma_and quantifier_aux
Rule 38    quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux
Rule 39    quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux
Rule 40    quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux
Rule 41    quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux
Rule 42    quantifier_aux -> CLASS_IDENTIFIER
Rule 43    quantifier_aux -> PROPERTY_IDENTIFIER
Rule 44    quantifier -> SOME
Rule 45    quantifier -> ALL
Rule 46    quantifier -> VALUE
Rule 47    quantifier -> THAT
Rule 48    quantifier -> MAX
Rule 49    quantifier -> MIN
Rule 50    quantifier -> EXACTLY
Rule 51    quantifier_number -> MAX
Rule 52    quantifier_number -> MIN
Rule 53    quantifier_number -> EXACTLY
Rule 54    sizecheck -> EQUAL CARDINALITY
Rule 55    sizecheck -> GREATER_THAN CARDINALITY
Rule 56    sizecheck -> LESS_THAN CARDINALITY
Rule 57    sizecheck -> GREATER_THAN EQUAL CARDINALITY
Rule 58    sizecheck -> LESS_THAN EQUAL CARDINALITY
Rule 59    namespace_type -> NAMESPACE TYPE
Rule 60    namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET
Rule 61    individuals_section -> INDIVIDUALS individuals
Rule 62    individuals_section -> empty
Rule 63    individuals -> INDIVIDUAL_NAME
Rule 64    individuals -> INDIVIDUAL_NAME COMMA individuals
Rule 65    comma_and -> COMMA
Rule 66    comma_and -> AND
Rule 67    empty -> <empty>

Terminals, with rules where they appear

ALL                  : 45
AND                  : 66
CARDINALITY          : 35 36 54 55 56 57 58
CLASS                : 5 17 18
CLASS_IDENTIFIER     : 5 7 9 11 12 15 16 17 18 20 21 23 24 25 32 33 36 38 39 41 42
CLOSE_BRACKET        : 60
CLOSE_CURLY          : 19
CLOSE_PAREN          : 7 28 28 29 29 31
COMMA                : 16 64 65
DISJOINTCLASSES      : 13
DISJOINtWITH         : 
EQUAL                : 54 57 58
EQUIVALENTTO         : 22 23 24 25
EXACTLY              : 50 53
GREATER_THAN         : 55 57
INDIVIDUALS          : 61
INDIVIDUAL_NAME      : 63 64
LESS_THAN            : 56 58
MAX                  : 48 51
MIN                  : 49 52
NAMESPACE            : 59 60
NOT                  : 
ONLY                 : 7
OPEN_BRACKET         : 60
OPEN_CURLY           : 19
OPEN_PAREN           : 7 28 28 29 29 31
OR                   : 8 12 20 23 39
PROPERTY_IDENTIFIER  : 29 32 33 34 35 36 40 43
PROPERTY_IDENTIFIER_SIMPLE : 
SOME                 : 44
SUBCLASSOF           : 6 7 8 9 10
THAT                 : 47
TYPE                 : 59 60
VALUE                : 46
error                : 

Nonterminals, with rules where they appear

aninhada             : 24
auxiliar_fechamento  : 7 12
classes              : 2 4 0
comma_and            : 27 28 29 30 37 41
covered_class        : 8 20 23
def_descriptions     : 7
defined_class        : 1 2
disjoint_classes_list : 16
disjoint_section     : 5
empty                : 14 62
enum_class           : 6 22
equivalentto_section : 17 18
individuals          : 19 61 64
individuals_section  : 5 17
namespace_type       : 34 35
only_defined         : 25
primitive_class      : 3 4
quantifier           : 29 32 33 34 38 40
quantifier_aux       : 10 13 26 27 28 29 30 31 33 37 37 38 39 40 41
quantifier_number    : 35 36
sizecheck            : 60
subclass_section     : 5 17

Parsing method: LALR

state 0

    (0) S' -> . classes
    (1) classes -> . defined_class
    (2) classes -> . defined_class classes
    (3) classes -> . primitive_class
    (4) classes -> . primitive_class classes
    (17) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
    (18) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section
    (5) primitive_class -> . CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section

    CLASS           shift and go to state 4

    classes                        shift and go to state 1
    defined_class                  shift and go to state 2
    primitive_class                shift and go to state 3

state 1

    (0) S' -> classes .



state 2

    (1) classes -> defined_class .
    (2) classes -> defined_class . classes
    (1) classes -> . defined_class
    (2) classes -> . defined_class classes
    (3) classes -> . primitive_class
    (4) classes -> . primitive_class classes
    (17) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
    (18) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section
    (5) primitive_class -> . CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section

    $end            reduce using rule 1 (classes -> defined_class .)
    CLASS           shift and go to state 4

    defined_class                  shift and go to state 2
    classes                        shift and go to state 5
    primitive_class                shift and go to state 3

state 3

    (3) classes -> primitive_class .
    (4) classes -> primitive_class . classes
    (1) classes -> . defined_class
    (2) classes -> . defined_class classes
    (3) classes -> . primitive_class
    (4) classes -> . primitive_class classes
    (17) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
    (18) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section
    (5) primitive_class -> . CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section

    $end            reduce using rule 3 (classes -> primitive_class .)
    CLASS           shift and go to state 4

    primitive_class                shift and go to state 3
    classes                        shift and go to state 6
    defined_class                  shift and go to state 2

state 4

    (17) defined_class -> CLASS . CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
    (18) defined_class -> CLASS . CLASS_IDENTIFIER equivalentto_section
    (5) primitive_class -> CLASS . CLASS_IDENTIFIER subclass_section disjoint_section individuals_section

    CLASS_IDENTIFIER shift and go to state 7


state 5

    (2) classes -> defined_class classes .

    $end            reduce using rule 2 (classes -> defined_class classes .)


state 6

    (4) classes -> primitive_class classes .

    $end            reduce using rule 4 (classes -> primitive_class classes .)


state 7

    (17) defined_class -> CLASS CLASS_IDENTIFIER . equivalentto_section subclass_section individuals_section
    (18) defined_class -> CLASS CLASS_IDENTIFIER . equivalentto_section
    (5) primitive_class -> CLASS CLASS_IDENTIFIER . subclass_section disjoint_section individuals_section
    (22) equivalentto_section -> . EQUIVALENTTO enum_class
    (23) equivalentto_section -> . EQUIVALENTTO CLASS_IDENTIFIER OR covered_class
    (24) equivalentto_section -> . EQUIVALENTTO CLASS_IDENTIFIER aninhada
    (25) equivalentto_section -> . EQUIVALENTTO CLASS_IDENTIFIER only_defined
    (6) subclass_section -> . SUBCLASSOF enum_class
    (7) subclass_section -> . SUBCLASSOF CLASS_IDENTIFIER def_descriptions ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN
    (8) subclass_section -> . SUBCLASSOF OR covered_class
    (9) subclass_section -> . SUBCLASSOF CLASS_IDENTIFIER
    (10) subclass_section -> . SUBCLASSOF quantifier_aux

    EQUIVALENTTO    shift and go to state 10
    SUBCLASSOF      shift and go to state 11

    equivalentto_section           shift and go to state 8
    subclass_section               shift and go to state 9

state 8

    (17) defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section . subclass_section individuals_section
    (18) defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section .
    (6) subclass_section -> . SUBCLASSOF enum_class
    (7) subclass_section -> . SUBCLASSOF CLASS_IDENTIFIER def_descriptions ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN
    (8) subclass_section -> . SUBCLASSOF OR covered_class
    (9) subclass_section -> . SUBCLASSOF CLASS_IDENTIFIER
    (10) subclass_section -> . SUBCLASSOF quantifier_aux

    CLASS           reduce using rule 18 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section .)
    $end            reduce using rule 18 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section .)
    SUBCLASSOF      shift and go to state 11

    subclass_section               shift and go to state 12

state 9

    (5) primitive_class -> CLASS CLASS_IDENTIFIER subclass_section . disjoint_section individuals_section
    (13) disjoint_section -> . DISJOINTCLASSES quantifier_aux
    (14) disjoint_section -> . empty
    (67) empty -> .

    DISJOINTCLASSES shift and go to state 14
    INDIVIDUALS     reduce using rule 67 (empty -> .)
    CLASS           reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)

    disjoint_section               shift and go to state 13
    empty                          shift and go to state 15

state 10

    (22) equivalentto_section -> EQUIVALENTTO . enum_class
    (23) equivalentto_section -> EQUIVALENTTO . CLASS_IDENTIFIER OR covered_class
    (24) equivalentto_section -> EQUIVALENTTO . CLASS_IDENTIFIER aninhada
    (25) equivalentto_section -> EQUIVALENTTO . CLASS_IDENTIFIER only_defined
    (19) enum_class -> . OPEN_CURLY individuals CLOSE_CURLY

    CLASS_IDENTIFIER shift and go to state 17
    OPEN_CURLY      shift and go to state 18

    enum_class                     shift and go to state 16

state 11

    (6) subclass_section -> SUBCLASSOF . enum_class
    (7) subclass_section -> SUBCLASSOF . CLASS_IDENTIFIER def_descriptions ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN
    (8) subclass_section -> SUBCLASSOF . OR covered_class
    (9) subclass_section -> SUBCLASSOF . CLASS_IDENTIFIER
    (10) subclass_section -> SUBCLASSOF . quantifier_aux
    (19) enum_class -> . OPEN_CURLY individuals CLOSE_CURLY
    (30) quantifier_aux -> . comma_and quantifier_aux
    (31) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (37) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (41) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER
    (43) quantifier_aux -> . PROPERTY_IDENTIFIER
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    CLASS_IDENTIFIER shift and go to state 20
    OR              shift and go to state 22
    OPEN_CURLY      shift and go to state 18
    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 25
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    enum_class                     shift and go to state 19
    quantifier_aux                 shift and go to state 23
    comma_and                      shift and go to state 24

state 12

    (17) defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section . individuals_section
    (61) individuals_section -> . INDIVIDUALS individuals
    (62) individuals_section -> . empty
    (67) empty -> .

    INDIVIDUALS     shift and go to state 29
    CLASS           reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)

    individuals_section            shift and go to state 28
    empty                          shift and go to state 30

state 13

    (5) primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section . individuals_section
    (61) individuals_section -> . INDIVIDUALS individuals
    (62) individuals_section -> . empty
    (67) empty -> .

    INDIVIDUALS     shift and go to state 29
    CLASS           reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)

    individuals_section            shift and go to state 31
    empty                          shift and go to state 30

state 14

    (13) disjoint_section -> DISJOINTCLASSES . quantifier_aux
    (30) quantifier_aux -> . comma_and quantifier_aux
    (31) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (37) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (41) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER
    (43) quantifier_aux -> . PROPERTY_IDENTIFIER
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    quantifier_aux                 shift and go to state 32
    comma_and                      shift and go to state 24

state 15

    (14) disjoint_section -> empty .

    INDIVIDUALS     reduce using rule 14 (disjoint_section -> empty .)
    CLASS           reduce using rule 14 (disjoint_section -> empty .)
    $end            reduce using rule 14 (disjoint_section -> empty .)


state 16

    (22) equivalentto_section -> EQUIVALENTTO enum_class .

    SUBCLASSOF      reduce using rule 22 (equivalentto_section -> EQUIVALENTTO enum_class .)
    CLASS           reduce using rule 22 (equivalentto_section -> EQUIVALENTTO enum_class .)
    $end            reduce using rule 22 (equivalentto_section -> EQUIVALENTTO enum_class .)


state 17

    (23) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER . OR covered_class
    (24) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER . aninhada
    (25) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER . only_defined
    (28) aninhada -> . comma_and OPEN_PAREN OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN
    (29) aninhada -> . comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN
    (27) only_defined -> . comma_and quantifier_aux
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    OR              shift and go to state 34
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    aninhada                       shift and go to state 35
    only_defined                   shift and go to state 36
    comma_and                      shift and go to state 37

state 18

    (19) enum_class -> OPEN_CURLY . individuals CLOSE_CURLY
    (63) individuals -> . INDIVIDUAL_NAME
    (64) individuals -> . INDIVIDUAL_NAME COMMA individuals

    INDIVIDUAL_NAME shift and go to state 39

    individuals                    shift and go to state 38

state 19

    (6) subclass_section -> SUBCLASSOF enum_class .

    DISJOINTCLASSES reduce using rule 6 (subclass_section -> SUBCLASSOF enum_class .)
    INDIVIDUALS     reduce using rule 6 (subclass_section -> SUBCLASSOF enum_class .)
    CLASS           reduce using rule 6 (subclass_section -> SUBCLASSOF enum_class .)
    $end            reduce using rule 6 (subclass_section -> SUBCLASSOF enum_class .)


state 20

    (7) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER . def_descriptions ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN
    (9) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .
    (38) quantifier_aux -> CLASS_IDENTIFIER . quantifier quantifier_aux
    (39) quantifier_aux -> CLASS_IDENTIFIER . OR quantifier_aux
    (41) quantifier_aux -> CLASS_IDENTIFIER . comma_and quantifier_aux
    (42) quantifier_aux -> CLASS_IDENTIFIER .
    (26) def_descriptions -> . quantifier_aux
    (44) quantifier -> . SOME
    (45) quantifier -> . ALL
    (46) quantifier -> . VALUE
    (47) quantifier -> . THAT
    (48) quantifier -> . MAX
    (49) quantifier -> . MIN
    (50) quantifier -> . EXACTLY
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND
    (30) quantifier_aux -> . comma_and quantifier_aux
    (31) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (37) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (41) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER
    (43) quantifier_aux -> . PROPERTY_IDENTIFIER

  ! reduce/reduce conflict for DISJOINTCLASSES resolved using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for INDIVIDUALS resolved using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
    CLASS           reduce using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
    $end            reduce using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
    OR              shift and go to state 43
    SOME            shift and go to state 45
    ALL             shift and go to state 46
    VALUE           shift and go to state 47
    THAT            shift and go to state 48
    MAX             shift and go to state 49
    MIN             shift and go to state 50
    EXACTLY         shift and go to state 51
    COMMA           shift and go to state 26
    AND             shift and go to state 27
    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33

  ! COMMA           [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! AND             [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! DISJOINTCLASSES [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! INDIVIDUALS     [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .) ]

    def_descriptions               shift and go to state 40
    quantifier                     shift and go to state 41
    quantifier_aux                 shift and go to state 42
    comma_and                      shift and go to state 44

state 21

    (31) quantifier_aux -> OPEN_PAREN . quantifier_aux CLOSE_PAREN
    (30) quantifier_aux -> . comma_and quantifier_aux
    (31) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (37) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (41) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER
    (43) quantifier_aux -> . PROPERTY_IDENTIFIER
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    quantifier_aux                 shift and go to state 52
    comma_and                      shift and go to state 24

state 22

    (8) subclass_section -> SUBCLASSOF OR . covered_class
    (20) covered_class -> . CLASS_IDENTIFIER OR covered_class
    (21) covered_class -> . CLASS_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 54

    covered_class                  shift and go to state 53

state 23

    (10) subclass_section -> SUBCLASSOF quantifier_aux .
    (37) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    DISJOINTCLASSES reduce using rule 10 (subclass_section -> SUBCLASSOF quantifier_aux .)
    INDIVIDUALS     reduce using rule 10 (subclass_section -> SUBCLASSOF quantifier_aux .)
    CLASS           reduce using rule 10 (subclass_section -> SUBCLASSOF quantifier_aux .)
    $end            reduce using rule 10 (subclass_section -> SUBCLASSOF quantifier_aux .)
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 55

state 24

    (30) quantifier_aux -> comma_and . quantifier_aux
    (30) quantifier_aux -> . comma_and quantifier_aux
    (31) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (37) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (41) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER
    (43) quantifier_aux -> . PROPERTY_IDENTIFIER
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 24
    quantifier_aux                 shift and go to state 56

state 25

    (32) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier CLASS_IDENTIFIER
    (33) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier CLASS_IDENTIFIER quantifier_aux
    (34) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier namespace_type
    (35) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier_number CARDINALITY namespace_type
    (36) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier_number CARDINALITY CLASS_IDENTIFIER
    (40) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier quantifier_aux
    (43) quantifier_aux -> PROPERTY_IDENTIFIER .
    (44) quantifier -> . SOME
    (45) quantifier -> . ALL
    (46) quantifier -> . VALUE
    (47) quantifier -> . THAT
    (48) quantifier -> . MAX
    (49) quantifier -> . MIN
    (50) quantifier -> . EXACTLY
    (51) quantifier_number -> . MAX
    (52) quantifier_number -> . MIN
    (53) quantifier_number -> . EXACTLY

    COMMA           reduce using rule 43 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    AND             reduce using rule 43 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    DISJOINTCLASSES reduce using rule 43 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 43 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    CLASS           reduce using rule 43 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    $end            reduce using rule 43 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    ONLY            reduce using rule 43 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 43 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    SUBCLASSOF      reduce using rule 43 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    SOME            shift and go to state 45
    ALL             shift and go to state 46
    VALUE           shift and go to state 47
    THAT            shift and go to state 48
    MAX             shift and go to state 59
    MIN             shift and go to state 60
    EXACTLY         shift and go to state 61

    quantifier                     shift and go to state 57
    quantifier_number              shift and go to state 58

state 26

    (65) comma_and -> COMMA .

    OPEN_PAREN      reduce using rule 65 (comma_and -> COMMA .)
    PROPERTY_IDENTIFIER reduce using rule 65 (comma_and -> COMMA .)
    CLASS_IDENTIFIER reduce using rule 65 (comma_and -> COMMA .)
    COMMA           reduce using rule 65 (comma_and -> COMMA .)
    AND             reduce using rule 65 (comma_and -> COMMA .)


state 27

    (66) comma_and -> AND .

    OPEN_PAREN      reduce using rule 66 (comma_and -> AND .)
    PROPERTY_IDENTIFIER reduce using rule 66 (comma_and -> AND .)
    CLASS_IDENTIFIER reduce using rule 66 (comma_and -> AND .)
    COMMA           reduce using rule 66 (comma_and -> AND .)
    AND             reduce using rule 66 (comma_and -> AND .)


state 28

    (17) defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section .

    CLASS           reduce using rule 17 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section .)
    $end            reduce using rule 17 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section .)


state 29

    (61) individuals_section -> INDIVIDUALS . individuals
    (63) individuals -> . INDIVIDUAL_NAME
    (64) individuals -> . INDIVIDUAL_NAME COMMA individuals

    INDIVIDUAL_NAME shift and go to state 39

    individuals                    shift and go to state 62

state 30

    (62) individuals_section -> empty .

    CLASS           reduce using rule 62 (individuals_section -> empty .)
    $end            reduce using rule 62 (individuals_section -> empty .)


state 31

    (5) primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section .

    CLASS           reduce using rule 5 (primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section .)
    $end            reduce using rule 5 (primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section .)


state 32

    (13) disjoint_section -> DISJOINTCLASSES quantifier_aux .
    (37) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    INDIVIDUALS     reduce using rule 13 (disjoint_section -> DISJOINTCLASSES quantifier_aux .)
    CLASS           reduce using rule 13 (disjoint_section -> DISJOINTCLASSES quantifier_aux .)
    $end            reduce using rule 13 (disjoint_section -> DISJOINTCLASSES quantifier_aux .)
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 55

state 33

    (38) quantifier_aux -> CLASS_IDENTIFIER . quantifier quantifier_aux
    (39) quantifier_aux -> CLASS_IDENTIFIER . OR quantifier_aux
    (41) quantifier_aux -> CLASS_IDENTIFIER . comma_and quantifier_aux
    (42) quantifier_aux -> CLASS_IDENTIFIER .
    (44) quantifier -> . SOME
    (45) quantifier -> . ALL
    (46) quantifier -> . VALUE
    (47) quantifier -> . THAT
    (48) quantifier -> . MAX
    (49) quantifier -> . MIN
    (50) quantifier -> . EXACTLY
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    OR              shift and go to state 43
    INDIVIDUALS     reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .)
    CLASS           reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .)
    $end            reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .)
    ONLY            reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .)
    DISJOINTCLASSES reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .)
    SUBCLASSOF      reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .)
    SOME            shift and go to state 45
    ALL             shift and go to state 46
    VALUE           shift and go to state 47
    THAT            shift and go to state 48
    MAX             shift and go to state 49
    MIN             shift and go to state 50
    EXACTLY         shift and go to state 51
    COMMA           shift and go to state 26
    AND             shift and go to state 27

  ! COMMA           [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! AND             [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .) ]

    quantifier                     shift and go to state 41
    comma_and                      shift and go to state 63

state 34

    (23) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER OR . covered_class
    (20) covered_class -> . CLASS_IDENTIFIER OR covered_class
    (21) covered_class -> . CLASS_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 54

    covered_class                  shift and go to state 64

state 35

    (24) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER aninhada .

    SUBCLASSOF      reduce using rule 24 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER aninhada .)
    CLASS           reduce using rule 24 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER aninhada .)
    $end            reduce using rule 24 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER aninhada .)


state 36

    (25) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER only_defined .

    SUBCLASSOF      reduce using rule 25 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER only_defined .)
    CLASS           reduce using rule 25 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER only_defined .)
    $end            reduce using rule 25 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER only_defined .)


state 37

    (28) aninhada -> comma_and . OPEN_PAREN OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN
    (29) aninhada -> comma_and . OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN
    (27) only_defined -> comma_and . quantifier_aux
    (30) quantifier_aux -> . comma_and quantifier_aux
    (31) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (37) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (41) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER
    (43) quantifier_aux -> . PROPERTY_IDENTIFIER
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    OPEN_PAREN      shift and go to state 65
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 24
    quantifier_aux                 shift and go to state 66

state 38

    (19) enum_class -> OPEN_CURLY individuals . CLOSE_CURLY

    CLOSE_CURLY     shift and go to state 67


state 39

    (63) individuals -> INDIVIDUAL_NAME .
    (64) individuals -> INDIVIDUAL_NAME . COMMA individuals

    CLOSE_CURLY     reduce using rule 63 (individuals -> INDIVIDUAL_NAME .)
    CLASS           reduce using rule 63 (individuals -> INDIVIDUAL_NAME .)
    $end            reduce using rule 63 (individuals -> INDIVIDUAL_NAME .)
    COMMA           shift and go to state 68


state 40

    (7) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions . ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN

    ONLY            shift and go to state 69


state 41

    (38) quantifier_aux -> CLASS_IDENTIFIER quantifier . quantifier_aux
    (30) quantifier_aux -> . comma_and quantifier_aux
    (31) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (37) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (41) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER
    (43) quantifier_aux -> . PROPERTY_IDENTIFIER
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    quantifier_aux                 shift and go to state 70
    comma_and                      shift and go to state 24

state 42

    (26) def_descriptions -> quantifier_aux .
    (37) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    ONLY            reduce using rule 26 (def_descriptions -> quantifier_aux .)
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 55

state 43

    (39) quantifier_aux -> CLASS_IDENTIFIER OR . quantifier_aux
    (30) quantifier_aux -> . comma_and quantifier_aux
    (31) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (37) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (41) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER
    (43) quantifier_aux -> . PROPERTY_IDENTIFIER
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    quantifier_aux                 shift and go to state 71
    comma_and                      shift and go to state 24

state 44

    (41) quantifier_aux -> CLASS_IDENTIFIER comma_and . quantifier_aux
    (30) quantifier_aux -> comma_and . quantifier_aux
    (30) quantifier_aux -> . comma_and quantifier_aux
    (31) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (37) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (41) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER
    (43) quantifier_aux -> . PROPERTY_IDENTIFIER
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 24
    quantifier_aux                 shift and go to state 72

state 45

    (44) quantifier -> SOME .

    OPEN_PAREN      reduce using rule 44 (quantifier -> SOME .)
    PROPERTY_IDENTIFIER reduce using rule 44 (quantifier -> SOME .)
    CLASS_IDENTIFIER reduce using rule 44 (quantifier -> SOME .)
    COMMA           reduce using rule 44 (quantifier -> SOME .)
    AND             reduce using rule 44 (quantifier -> SOME .)
    NAMESPACE       reduce using rule 44 (quantifier -> SOME .)


state 46

    (45) quantifier -> ALL .

    OPEN_PAREN      reduce using rule 45 (quantifier -> ALL .)
    PROPERTY_IDENTIFIER reduce using rule 45 (quantifier -> ALL .)
    CLASS_IDENTIFIER reduce using rule 45 (quantifier -> ALL .)
    COMMA           reduce using rule 45 (quantifier -> ALL .)
    AND             reduce using rule 45 (quantifier -> ALL .)
    NAMESPACE       reduce using rule 45 (quantifier -> ALL .)


state 47

    (46) quantifier -> VALUE .

    OPEN_PAREN      reduce using rule 46 (quantifier -> VALUE .)
    PROPERTY_IDENTIFIER reduce using rule 46 (quantifier -> VALUE .)
    CLASS_IDENTIFIER reduce using rule 46 (quantifier -> VALUE .)
    COMMA           reduce using rule 46 (quantifier -> VALUE .)
    AND             reduce using rule 46 (quantifier -> VALUE .)
    NAMESPACE       reduce using rule 46 (quantifier -> VALUE .)


state 48

    (47) quantifier -> THAT .

    OPEN_PAREN      reduce using rule 47 (quantifier -> THAT .)
    PROPERTY_IDENTIFIER reduce using rule 47 (quantifier -> THAT .)
    CLASS_IDENTIFIER reduce using rule 47 (quantifier -> THAT .)
    COMMA           reduce using rule 47 (quantifier -> THAT .)
    AND             reduce using rule 47 (quantifier -> THAT .)
    NAMESPACE       reduce using rule 47 (quantifier -> THAT .)


state 49

    (48) quantifier -> MAX .

    OPEN_PAREN      reduce using rule 48 (quantifier -> MAX .)
    PROPERTY_IDENTIFIER reduce using rule 48 (quantifier -> MAX .)
    CLASS_IDENTIFIER reduce using rule 48 (quantifier -> MAX .)
    COMMA           reduce using rule 48 (quantifier -> MAX .)
    AND             reduce using rule 48 (quantifier -> MAX .)


state 50

    (49) quantifier -> MIN .

    OPEN_PAREN      reduce using rule 49 (quantifier -> MIN .)
    PROPERTY_IDENTIFIER reduce using rule 49 (quantifier -> MIN .)
    CLASS_IDENTIFIER reduce using rule 49 (quantifier -> MIN .)
    COMMA           reduce using rule 49 (quantifier -> MIN .)
    AND             reduce using rule 49 (quantifier -> MIN .)


state 51

    (50) quantifier -> EXACTLY .

    OPEN_PAREN      reduce using rule 50 (quantifier -> EXACTLY .)
    PROPERTY_IDENTIFIER reduce using rule 50 (quantifier -> EXACTLY .)
    CLASS_IDENTIFIER reduce using rule 50 (quantifier -> EXACTLY .)
    COMMA           reduce using rule 50 (quantifier -> EXACTLY .)
    AND             reduce using rule 50 (quantifier -> EXACTLY .)


state 52

    (31) quantifier_aux -> OPEN_PAREN quantifier_aux . CLOSE_PAREN
    (37) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    CLOSE_PAREN     shift and go to state 73
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 55

state 53

    (8) subclass_section -> SUBCLASSOF OR covered_class .

    DISJOINTCLASSES reduce using rule 8 (subclass_section -> SUBCLASSOF OR covered_class .)
    INDIVIDUALS     reduce using rule 8 (subclass_section -> SUBCLASSOF OR covered_class .)
    CLASS           reduce using rule 8 (subclass_section -> SUBCLASSOF OR covered_class .)
    $end            reduce using rule 8 (subclass_section -> SUBCLASSOF OR covered_class .)


state 54

    (20) covered_class -> CLASS_IDENTIFIER . OR covered_class
    (21) covered_class -> CLASS_IDENTIFIER .

    OR              shift and go to state 74
    DISJOINTCLASSES reduce using rule 21 (covered_class -> CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 21 (covered_class -> CLASS_IDENTIFIER .)
    CLASS           reduce using rule 21 (covered_class -> CLASS_IDENTIFIER .)
    $end            reduce using rule 21 (covered_class -> CLASS_IDENTIFIER .)
    SUBCLASSOF      reduce using rule 21 (covered_class -> CLASS_IDENTIFIER .)


state 55

    (37) quantifier_aux -> quantifier_aux comma_and . quantifier_aux
    (30) quantifier_aux -> . comma_and quantifier_aux
    (31) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (37) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (41) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER
    (43) quantifier_aux -> . PROPERTY_IDENTIFIER
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    quantifier_aux                 shift and go to state 75
    comma_and                      shift and go to state 24

state 56

    (30) quantifier_aux -> comma_and quantifier_aux .
    (37) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
    INDIVIDUALS     reduce using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
    CLASS           reduce using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
    $end            reduce using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
    CLOSE_PAREN     reduce using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
    SUBCLASSOF      reduce using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
    ONLY            reduce using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
    COMMA           shift and go to state 26
    AND             shift and go to state 27

  ! COMMA           [ reduce using rule 30 (quantifier_aux -> comma_and quantifier_aux .) ]
  ! AND             [ reduce using rule 30 (quantifier_aux -> comma_and quantifier_aux .) ]

    comma_and                      shift and go to state 55

state 57

    (32) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . CLASS_IDENTIFIER
    (33) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . CLASS_IDENTIFIER quantifier_aux
    (34) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . namespace_type
    (40) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . quantifier_aux
    (59) namespace_type -> . NAMESPACE TYPE
    (60) namespace_type -> . NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET
    (30) quantifier_aux -> . comma_and quantifier_aux
    (31) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (37) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (41) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER
    (43) quantifier_aux -> . PROPERTY_IDENTIFIER
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    CLASS_IDENTIFIER shift and go to state 76
    NAMESPACE       shift and go to state 79
    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 25
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    quantifier_aux                 shift and go to state 77
    namespace_type                 shift and go to state 78
    comma_and                      shift and go to state 24

state 58

    (35) quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number . CARDINALITY namespace_type
    (36) quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number . CARDINALITY CLASS_IDENTIFIER

    CARDINALITY     shift and go to state 80


state 59

    (48) quantifier -> MAX .
    (51) quantifier_number -> MAX .

    CLASS_IDENTIFIER reduce using rule 48 (quantifier -> MAX .)
    NAMESPACE       reduce using rule 48 (quantifier -> MAX .)
    OPEN_PAREN      reduce using rule 48 (quantifier -> MAX .)
    PROPERTY_IDENTIFIER reduce using rule 48 (quantifier -> MAX .)
    COMMA           reduce using rule 48 (quantifier -> MAX .)
    AND             reduce using rule 48 (quantifier -> MAX .)
    CARDINALITY     reduce using rule 51 (quantifier_number -> MAX .)


state 60

    (49) quantifier -> MIN .
    (52) quantifier_number -> MIN .

    CLASS_IDENTIFIER reduce using rule 49 (quantifier -> MIN .)
    NAMESPACE       reduce using rule 49 (quantifier -> MIN .)
    OPEN_PAREN      reduce using rule 49 (quantifier -> MIN .)
    PROPERTY_IDENTIFIER reduce using rule 49 (quantifier -> MIN .)
    COMMA           reduce using rule 49 (quantifier -> MIN .)
    AND             reduce using rule 49 (quantifier -> MIN .)
    CARDINALITY     reduce using rule 52 (quantifier_number -> MIN .)


state 61

    (50) quantifier -> EXACTLY .
    (53) quantifier_number -> EXACTLY .

    CLASS_IDENTIFIER reduce using rule 50 (quantifier -> EXACTLY .)
    NAMESPACE       reduce using rule 50 (quantifier -> EXACTLY .)
    OPEN_PAREN      reduce using rule 50 (quantifier -> EXACTLY .)
    PROPERTY_IDENTIFIER reduce using rule 50 (quantifier -> EXACTLY .)
    COMMA           reduce using rule 50 (quantifier -> EXACTLY .)
    AND             reduce using rule 50 (quantifier -> EXACTLY .)
    CARDINALITY     reduce using rule 53 (quantifier_number -> EXACTLY .)


state 62

    (61) individuals_section -> INDIVIDUALS individuals .

    CLASS           reduce using rule 61 (individuals_section -> INDIVIDUALS individuals .)
    $end            reduce using rule 61 (individuals_section -> INDIVIDUALS individuals .)


state 63

    (41) quantifier_aux -> CLASS_IDENTIFIER comma_and . quantifier_aux
    (30) quantifier_aux -> . comma_and quantifier_aux
    (31) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (37) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (41) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER
    (43) quantifier_aux -> . PROPERTY_IDENTIFIER
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 24
    quantifier_aux                 shift and go to state 81

state 64

    (23) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER OR covered_class .

    SUBCLASSOF      reduce using rule 23 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER OR covered_class .)
    CLASS           reduce using rule 23 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER OR covered_class .)
    $end            reduce using rule 23 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER OR covered_class .)


state 65

    (28) aninhada -> comma_and OPEN_PAREN . OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN
    (29) aninhada -> comma_and OPEN_PAREN . PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN
    (31) quantifier_aux -> OPEN_PAREN . quantifier_aux CLOSE_PAREN
    (30) quantifier_aux -> . comma_and quantifier_aux
    (31) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (37) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (41) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER
    (43) quantifier_aux -> . PROPERTY_IDENTIFIER
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    OPEN_PAREN      shift and go to state 82
    PROPERTY_IDENTIFIER shift and go to state 83
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 24
    quantifier_aux                 shift and go to state 52

state 66

    (27) only_defined -> comma_and quantifier_aux .
    (37) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    SUBCLASSOF      reduce using rule 27 (only_defined -> comma_and quantifier_aux .)
    CLASS           reduce using rule 27 (only_defined -> comma_and quantifier_aux .)
    $end            reduce using rule 27 (only_defined -> comma_and quantifier_aux .)
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 55

state 67

    (19) enum_class -> OPEN_CURLY individuals CLOSE_CURLY .

    SUBCLASSOF      reduce using rule 19 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)
    CLASS           reduce using rule 19 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)
    $end            reduce using rule 19 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)
    DISJOINTCLASSES reduce using rule 19 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)
    INDIVIDUALS     reduce using rule 19 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)


state 68

    (64) individuals -> INDIVIDUAL_NAME COMMA . individuals
    (63) individuals -> . INDIVIDUAL_NAME
    (64) individuals -> . INDIVIDUAL_NAME COMMA individuals

    INDIVIDUAL_NAME shift and go to state 39

    individuals                    shift and go to state 84

state 69

    (7) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions ONLY . OPEN_PAREN auxiliar_fechamento CLOSE_PAREN

    OPEN_PAREN      shift and go to state 85


state 70

    (38) quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .
    (37) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .)
    INDIVIDUALS     reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .)
    CLASS           reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .)
    $end            reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .)
    ONLY            reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .)
    CLOSE_PAREN     reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .)
    SUBCLASSOF      reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .)
    COMMA           shift and go to state 26
    AND             shift and go to state 27

  ! COMMA           [ reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .) ]
  ! AND             [ reduce using rule 38 (quantifier_aux -> CLASS_IDENTIFIER quantifier quantifier_aux .) ]

    comma_and                      shift and go to state 55

state 71

    (39) quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .
    (37) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 39 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .)
    INDIVIDUALS     reduce using rule 39 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .)
    CLASS           reduce using rule 39 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .)
    $end            reduce using rule 39 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .)
    ONLY            reduce using rule 39 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .)
    CLOSE_PAREN     reduce using rule 39 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .)
    SUBCLASSOF      reduce using rule 39 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .)
    COMMA           shift and go to state 26
    AND             shift and go to state 27

  ! COMMA           [ reduce using rule 39 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .) ]
  ! AND             [ reduce using rule 39 (quantifier_aux -> CLASS_IDENTIFIER OR quantifier_aux .) ]

    comma_and                      shift and go to state 55

state 72

    (41) quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .
    (30) quantifier_aux -> comma_and quantifier_aux .
    (37) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

  ! reduce/reduce conflict for COMMA resolved using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
  ! reduce/reduce conflict for AND resolved using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
  ! reduce/reduce conflict for ONLY resolved using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
  ! reduce/reduce conflict for DISJOINTCLASSES resolved using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
  ! reduce/reduce conflict for INDIVIDUALS resolved using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
  ! reduce/reduce conflict for CLASS resolved using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
  ! reduce/reduce conflict for $end resolved using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
  ! reduce/reduce conflict for CLOSE_PAREN resolved using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
  ! reduce/reduce conflict for SUBCLASSOF resolved using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    ONLY            reduce using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
    DISJOINTCLASSES reduce using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
    INDIVIDUALS     reduce using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
    CLASS           reduce using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
    $end            reduce using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
    CLOSE_PAREN     reduce using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
    SUBCLASSOF      reduce using rule 30 (quantifier_aux -> comma_and quantifier_aux .)
    COMMA           shift and go to state 26
    AND             shift and go to state 27

  ! COMMA           [ reduce using rule 41 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]
  ! AND             [ reduce using rule 41 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]
  ! DISJOINTCLASSES [ reduce using rule 41 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]
  ! INDIVIDUALS     [ reduce using rule 41 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]
  ! CLASS           [ reduce using rule 41 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]
  ! $end            [ reduce using rule 41 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]
  ! CLOSE_PAREN     [ reduce using rule 41 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]
  ! SUBCLASSOF      [ reduce using rule 41 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]
  ! ONLY            [ reduce using rule 41 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]
  ! COMMA           [ reduce using rule 30 (quantifier_aux -> comma_and quantifier_aux .) ]
  ! AND             [ reduce using rule 30 (quantifier_aux -> comma_and quantifier_aux .) ]

    comma_and                      shift and go to state 55

state 73

    (31) quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .

    COMMA           reduce using rule 31 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    AND             reduce using rule 31 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    DISJOINTCLASSES reduce using rule 31 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    INDIVIDUALS     reduce using rule 31 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    CLASS           reduce using rule 31 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    $end            reduce using rule 31 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    ONLY            reduce using rule 31 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 31 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    SUBCLASSOF      reduce using rule 31 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)


state 74

    (20) covered_class -> CLASS_IDENTIFIER OR . covered_class
    (20) covered_class -> . CLASS_IDENTIFIER OR covered_class
    (21) covered_class -> . CLASS_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 54

    covered_class                  shift and go to state 86

state 75

    (37) quantifier_aux -> quantifier_aux comma_and quantifier_aux .
    (37) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 37 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    INDIVIDUALS     reduce using rule 37 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    CLASS           reduce using rule 37 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    $end            reduce using rule 37 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    ONLY            reduce using rule 37 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    CLOSE_PAREN     reduce using rule 37 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    SUBCLASSOF      reduce using rule 37 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    COMMA           shift and go to state 26
    AND             shift and go to state 27

  ! COMMA           [ reduce using rule 37 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .) ]
  ! AND             [ reduce using rule 37 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .) ]

    comma_and                      shift and go to state 55

state 76

    (32) quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .
    (33) quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER . quantifier_aux
    (38) quantifier_aux -> CLASS_IDENTIFIER . quantifier quantifier_aux
    (39) quantifier_aux -> CLASS_IDENTIFIER . OR quantifier_aux
    (41) quantifier_aux -> CLASS_IDENTIFIER . comma_and quantifier_aux
    (42) quantifier_aux -> CLASS_IDENTIFIER .
    (30) quantifier_aux -> . comma_and quantifier_aux
    (31) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (37) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (41) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER
    (43) quantifier_aux -> . PROPERTY_IDENTIFIER
    (44) quantifier -> . SOME
    (45) quantifier -> . ALL
    (46) quantifier -> . VALUE
    (47) quantifier -> . THAT
    (48) quantifier -> . MAX
    (49) quantifier -> . MIN
    (50) quantifier -> . EXACTLY
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

  ! reduce/reduce conflict for COMMA resolved using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for AND resolved using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for DISJOINTCLASSES resolved using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for INDIVIDUALS resolved using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for CLOSE_PAREN resolved using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for SUBCLASSOF resolved using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for ONLY resolved using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    CLASS           reduce using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    $end            reduce using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    ONLY            reduce using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    SUBCLASSOF      reduce using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    OR              shift and go to state 43
    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    SOME            shift and go to state 45
    ALL             shift and go to state 46
    VALUE           shift and go to state 47
    THAT            shift and go to state 48
    MAX             shift and go to state 49
    MIN             shift and go to state 50
    EXACTLY         shift and go to state 51
    COMMA           shift and go to state 26
    AND             shift and go to state 27

  ! COMMA           [ reduce using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .) ]
  ! AND             [ reduce using rule 32 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! AND             [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! DISJOINTCLASSES [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! INDIVIDUALS     [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! CLOSE_PAREN     [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! SUBCLASSOF      [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .) ]
  ! ONLY            [ reduce using rule 42 (quantifier_aux -> CLASS_IDENTIFIER .) ]

    quantifier                     shift and go to state 41
    quantifier_aux                 shift and go to state 87
    comma_and                      shift and go to state 44

state 77

    (40) quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .
    (37) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 40 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .)
    INDIVIDUALS     reduce using rule 40 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .)
    CLASS           reduce using rule 40 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .)
    $end            reduce using rule 40 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .)
    ONLY            reduce using rule 40 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .)
    CLOSE_PAREN     reduce using rule 40 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .)
    SUBCLASSOF      reduce using rule 40 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .)
    COMMA           shift and go to state 26
    AND             shift and go to state 27

  ! COMMA           [ reduce using rule 40 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .) ]
  ! AND             [ reduce using rule 40 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier quantifier_aux .) ]

    comma_and                      shift and go to state 55

state 78

    (34) quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .

    COMMA           reduce using rule 34 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    AND             reduce using rule 34 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    DISJOINTCLASSES reduce using rule 34 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    INDIVIDUALS     reduce using rule 34 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    CLASS           reduce using rule 34 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    $end            reduce using rule 34 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    ONLY            reduce using rule 34 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    CLOSE_PAREN     reduce using rule 34 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    SUBCLASSOF      reduce using rule 34 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)


state 79

    (59) namespace_type -> NAMESPACE . TYPE
    (60) namespace_type -> NAMESPACE . TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET

    TYPE            shift and go to state 88


state 80

    (35) quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY . namespace_type
    (36) quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY . CLASS_IDENTIFIER
    (59) namespace_type -> . NAMESPACE TYPE
    (60) namespace_type -> . NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET

    CLASS_IDENTIFIER shift and go to state 90
    NAMESPACE       shift and go to state 79

    namespace_type                 shift and go to state 89

state 81

    (41) quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .
    (37) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    INDIVIDUALS     reduce using rule 41 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    CLASS           reduce using rule 41 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    $end            reduce using rule 41 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    ONLY            reduce using rule 41 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    CLOSE_PAREN     reduce using rule 41 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    DISJOINTCLASSES reduce using rule 41 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    SUBCLASSOF      reduce using rule 41 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .)
    COMMA           shift and go to state 26
    AND             shift and go to state 27

  ! COMMA           [ reduce using rule 41 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]
  ! AND             [ reduce using rule 41 (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux .) ]

    comma_and                      shift and go to state 55

state 82

    (28) aninhada -> comma_and OPEN_PAREN OPEN_PAREN . quantifier_aux CLOSE_PAREN CLOSE_PAREN
    (31) quantifier_aux -> OPEN_PAREN . quantifier_aux CLOSE_PAREN
    (30) quantifier_aux -> . comma_and quantifier_aux
    (31) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (37) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (41) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER
    (43) quantifier_aux -> . PROPERTY_IDENTIFIER
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 24
    quantifier_aux                 shift and go to state 91

state 83

    (29) aninhada -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER . quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN
    (32) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier CLASS_IDENTIFIER
    (33) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier CLASS_IDENTIFIER quantifier_aux
    (34) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier namespace_type
    (35) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier_number CARDINALITY namespace_type
    (36) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier_number CARDINALITY CLASS_IDENTIFIER
    (40) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier quantifier_aux
    (43) quantifier_aux -> PROPERTY_IDENTIFIER .
    (44) quantifier -> . SOME
    (45) quantifier -> . ALL
    (46) quantifier -> . VALUE
    (47) quantifier -> . THAT
    (48) quantifier -> . MAX
    (49) quantifier -> . MIN
    (50) quantifier -> . EXACTLY
    (51) quantifier_number -> . MAX
    (52) quantifier_number -> . MIN
    (53) quantifier_number -> . EXACTLY

    CLOSE_PAREN     reduce using rule 43 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    COMMA           reduce using rule 43 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    AND             reduce using rule 43 (quantifier_aux -> PROPERTY_IDENTIFIER .)
    SOME            shift and go to state 45
    ALL             shift and go to state 46
    VALUE           shift and go to state 47
    THAT            shift and go to state 48
    MAX             shift and go to state 59
    MIN             shift and go to state 60
    EXACTLY         shift and go to state 61

    quantifier                     shift and go to state 92
    quantifier_number              shift and go to state 58

state 84

    (64) individuals -> INDIVIDUAL_NAME COMMA individuals .

    CLOSE_CURLY     reduce using rule 64 (individuals -> INDIVIDUAL_NAME COMMA individuals .)
    CLASS           reduce using rule 64 (individuals -> INDIVIDUAL_NAME COMMA individuals .)
    $end            reduce using rule 64 (individuals -> INDIVIDUAL_NAME COMMA individuals .)


state 85

    (7) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions ONLY OPEN_PAREN . auxiliar_fechamento CLOSE_PAREN
    (11) auxiliar_fechamento -> . CLASS_IDENTIFIER
    (12) auxiliar_fechamento -> . CLASS_IDENTIFIER OR auxiliar_fechamento

    CLASS_IDENTIFIER shift and go to state 93

    auxiliar_fechamento            shift and go to state 94

state 86

    (20) covered_class -> CLASS_IDENTIFIER OR covered_class .

    DISJOINTCLASSES reduce using rule 20 (covered_class -> CLASS_IDENTIFIER OR covered_class .)
    INDIVIDUALS     reduce using rule 20 (covered_class -> CLASS_IDENTIFIER OR covered_class .)
    CLASS           reduce using rule 20 (covered_class -> CLASS_IDENTIFIER OR covered_class .)
    $end            reduce using rule 20 (covered_class -> CLASS_IDENTIFIER OR covered_class .)
    SUBCLASSOF      reduce using rule 20 (covered_class -> CLASS_IDENTIFIER OR covered_class .)


state 87

    (33) quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux .
    (37) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    DISJOINTCLASSES reduce using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux .)
    INDIVIDUALS     reduce using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux .)
    CLASS           reduce using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux .)
    $end            reduce using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux .)
    ONLY            reduce using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux .)
    CLOSE_PAREN     reduce using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux .)
    SUBCLASSOF      reduce using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux .)
    COMMA           shift and go to state 26
    AND             shift and go to state 27

  ! COMMA           [ reduce using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux .) ]
  ! AND             [ reduce using rule 33 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux .) ]

    comma_and                      shift and go to state 55

state 88

    (59) namespace_type -> NAMESPACE TYPE .
    (60) namespace_type -> NAMESPACE TYPE . OPEN_BRACKET sizecheck CLOSE_BRACKET

    COMMA           reduce using rule 59 (namespace_type -> NAMESPACE TYPE .)
    AND             reduce using rule 59 (namespace_type -> NAMESPACE TYPE .)
    DISJOINTCLASSES reduce using rule 59 (namespace_type -> NAMESPACE TYPE .)
    INDIVIDUALS     reduce using rule 59 (namespace_type -> NAMESPACE TYPE .)
    CLASS           reduce using rule 59 (namespace_type -> NAMESPACE TYPE .)
    $end            reduce using rule 59 (namespace_type -> NAMESPACE TYPE .)
    ONLY            reduce using rule 59 (namespace_type -> NAMESPACE TYPE .)
    CLOSE_PAREN     reduce using rule 59 (namespace_type -> NAMESPACE TYPE .)
    SUBCLASSOF      reduce using rule 59 (namespace_type -> NAMESPACE TYPE .)
    OPEN_BRACKET    shift and go to state 95


state 89

    (35) quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .

    COMMA           reduce using rule 35 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)
    AND             reduce using rule 35 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)
    DISJOINTCLASSES reduce using rule 35 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)
    INDIVIDUALS     reduce using rule 35 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)
    CLASS           reduce using rule 35 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)
    $end            reduce using rule 35 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)
    ONLY            reduce using rule 35 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)
    CLOSE_PAREN     reduce using rule 35 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)
    SUBCLASSOF      reduce using rule 35 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type .)


state 90

    (36) quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .

    COMMA           reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)
    AND             reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)
    DISJOINTCLASSES reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)
    CLASS           reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)
    $end            reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)
    ONLY            reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)
    SUBCLASSOF      reduce using rule 36 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER .)


state 91

    (28) aninhada -> comma_and OPEN_PAREN OPEN_PAREN quantifier_aux . CLOSE_PAREN CLOSE_PAREN
    (31) quantifier_aux -> OPEN_PAREN quantifier_aux . CLOSE_PAREN
    (37) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    CLOSE_PAREN     shift and go to state 96
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 55

state 92

    (29) aninhada -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier . OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN
    (32) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . CLASS_IDENTIFIER
    (33) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . CLASS_IDENTIFIER quantifier_aux
    (34) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . namespace_type
    (40) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . quantifier_aux
    (59) namespace_type -> . NAMESPACE TYPE
    (60) namespace_type -> . NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET
    (30) quantifier_aux -> . comma_and quantifier_aux
    (31) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (37) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (41) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER
    (43) quantifier_aux -> . PROPERTY_IDENTIFIER
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    OPEN_PAREN      shift and go to state 97
    CLASS_IDENTIFIER shift and go to state 76
    NAMESPACE       shift and go to state 79
    PROPERTY_IDENTIFIER shift and go to state 25
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 24
    quantifier_aux                 shift and go to state 77
    namespace_type                 shift and go to state 78

state 93

    (11) auxiliar_fechamento -> CLASS_IDENTIFIER .
    (12) auxiliar_fechamento -> CLASS_IDENTIFIER . OR auxiliar_fechamento

    CLOSE_PAREN     reduce using rule 11 (auxiliar_fechamento -> CLASS_IDENTIFIER .)
    OR              shift and go to state 98


state 94

    (7) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions ONLY OPEN_PAREN auxiliar_fechamento . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 99


state 95

    (60) namespace_type -> NAMESPACE TYPE OPEN_BRACKET . sizecheck CLOSE_BRACKET
    (54) sizecheck -> . EQUAL CARDINALITY
    (55) sizecheck -> . GREATER_THAN CARDINALITY
    (56) sizecheck -> . LESS_THAN CARDINALITY
    (57) sizecheck -> . GREATER_THAN EQUAL CARDINALITY
    (58) sizecheck -> . LESS_THAN EQUAL CARDINALITY

    EQUAL           shift and go to state 101
    GREATER_THAN    shift and go to state 102
    LESS_THAN       shift and go to state 103

    sizecheck                      shift and go to state 100

state 96

    (28) aninhada -> comma_and OPEN_PAREN OPEN_PAREN quantifier_aux CLOSE_PAREN . CLOSE_PAREN
    (31) quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .

  ! shift/reduce conflict for CLOSE_PAREN resolved as shift
    CLOSE_PAREN     shift and go to state 104
    COMMA           reduce using rule 31 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    AND             reduce using rule 31 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)

  ! CLOSE_PAREN     [ reduce using rule 31 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .) ]


state 97

    (29) aninhada -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN . quantifier_aux CLOSE_PAREN CLOSE_PAREN
    (31) quantifier_aux -> OPEN_PAREN . quantifier_aux CLOSE_PAREN
    (30) quantifier_aux -> . comma_and quantifier_aux
    (31) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (32) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (33) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER quantifier_aux
    (34) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (35) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY namespace_type
    (36) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier_number CARDINALITY CLASS_IDENTIFIER
    (37) quantifier_aux -> . quantifier_aux comma_and quantifier_aux
    (38) quantifier_aux -> . CLASS_IDENTIFIER quantifier quantifier_aux
    (39) quantifier_aux -> . CLASS_IDENTIFIER OR quantifier_aux
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier quantifier_aux
    (41) quantifier_aux -> . CLASS_IDENTIFIER comma_and quantifier_aux
    (42) quantifier_aux -> . CLASS_IDENTIFIER
    (43) quantifier_aux -> . PROPERTY_IDENTIFIER
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    OPEN_PAREN      shift and go to state 21
    PROPERTY_IDENTIFIER shift and go to state 25
    CLASS_IDENTIFIER shift and go to state 33
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 24
    quantifier_aux                 shift and go to state 105

state 98

    (12) auxiliar_fechamento -> CLASS_IDENTIFIER OR . auxiliar_fechamento
    (11) auxiliar_fechamento -> . CLASS_IDENTIFIER
    (12) auxiliar_fechamento -> . CLASS_IDENTIFIER OR auxiliar_fechamento

    CLASS_IDENTIFIER shift and go to state 93

    auxiliar_fechamento            shift and go to state 106

state 99

    (7) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN .

    DISJOINTCLASSES reduce using rule 7 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN .)
    INDIVIDUALS     reduce using rule 7 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN .)
    CLASS           reduce using rule 7 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN .)
    $end            reduce using rule 7 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER def_descriptions ONLY OPEN_PAREN auxiliar_fechamento CLOSE_PAREN .)


state 100

    (60) namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 107


state 101

    (54) sizecheck -> EQUAL . CARDINALITY

    CARDINALITY     shift and go to state 108


state 102

    (55) sizecheck -> GREATER_THAN . CARDINALITY
    (57) sizecheck -> GREATER_THAN . EQUAL CARDINALITY

    CARDINALITY     shift and go to state 109
    EQUAL           shift and go to state 110


state 103

    (56) sizecheck -> LESS_THAN . CARDINALITY
    (58) sizecheck -> LESS_THAN . EQUAL CARDINALITY

    CARDINALITY     shift and go to state 111
    EQUAL           shift and go to state 112


state 104

    (28) aninhada -> comma_and OPEN_PAREN OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN .

    SUBCLASSOF      reduce using rule 28 (aninhada -> comma_and OPEN_PAREN OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN .)
    CLASS           reduce using rule 28 (aninhada -> comma_and OPEN_PAREN OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN .)
    $end            reduce using rule 28 (aninhada -> comma_and OPEN_PAREN OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN .)


state 105

    (29) aninhada -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux . CLOSE_PAREN CLOSE_PAREN
    (31) quantifier_aux -> OPEN_PAREN quantifier_aux . CLOSE_PAREN
    (37) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (65) comma_and -> . COMMA
    (66) comma_and -> . AND

    CLOSE_PAREN     shift and go to state 113
    COMMA           shift and go to state 26
    AND             shift and go to state 27

    comma_and                      shift and go to state 55

state 106

    (12) auxiliar_fechamento -> CLASS_IDENTIFIER OR auxiliar_fechamento .

    CLOSE_PAREN     reduce using rule 12 (auxiliar_fechamento -> CLASS_IDENTIFIER OR auxiliar_fechamento .)


state 107

    (60) namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .

    COMMA           reduce using rule 60 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    AND             reduce using rule 60 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    DISJOINTCLASSES reduce using rule 60 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    INDIVIDUALS     reduce using rule 60 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    CLASS           reduce using rule 60 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    $end            reduce using rule 60 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    ONLY            reduce using rule 60 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 60 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    SUBCLASSOF      reduce using rule 60 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)


state 108

    (54) sizecheck -> EQUAL CARDINALITY .

    CLOSE_BRACKET   reduce using rule 54 (sizecheck -> EQUAL CARDINALITY .)


state 109

    (55) sizecheck -> GREATER_THAN CARDINALITY .

    CLOSE_BRACKET   reduce using rule 55 (sizecheck -> GREATER_THAN CARDINALITY .)


state 110

    (57) sizecheck -> GREATER_THAN EQUAL . CARDINALITY

    CARDINALITY     shift and go to state 114


state 111

    (56) sizecheck -> LESS_THAN CARDINALITY .

    CLOSE_BRACKET   reduce using rule 56 (sizecheck -> LESS_THAN CARDINALITY .)


state 112

    (58) sizecheck -> LESS_THAN EQUAL . CARDINALITY

    CARDINALITY     shift and go to state 115


state 113

    (29) aninhada -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN . CLOSE_PAREN
    (31) quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .

  ! shift/reduce conflict for CLOSE_PAREN resolved as shift
    CLOSE_PAREN     shift and go to state 116
    COMMA           reduce using rule 31 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    AND             reduce using rule 31 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)

  ! CLOSE_PAREN     [ reduce using rule 31 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .) ]


state 114

    (57) sizecheck -> GREATER_THAN EQUAL CARDINALITY .

    CLOSE_BRACKET   reduce using rule 57 (sizecheck -> GREATER_THAN EQUAL CARDINALITY .)


state 115

    (58) sizecheck -> LESS_THAN EQUAL CARDINALITY .

    CLOSE_BRACKET   reduce using rule 58 (sizecheck -> LESS_THAN EQUAL CARDINALITY .)


state 116

    (29) aninhada -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN .

    SUBCLASSOF      reduce using rule 29 (aninhada -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN .)
    CLASS           reduce using rule 29 (aninhada -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN .)
    $end            reduce using rule 29 (aninhada -> comma_and OPEN_PAREN PROPERTY_IDENTIFIER quantifier OPEN_PAREN quantifier_aux CLOSE_PAREN CLOSE_PAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 20 resolved as shift
WARNING: shift/reduce conflict for AND in state 20 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 33 resolved as shift
WARNING: shift/reduce conflict for AND in state 33 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 56 resolved as shift
WARNING: shift/reduce conflict for AND in state 56 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 70 resolved as shift
WARNING: shift/reduce conflict for AND in state 70 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 71 resolved as shift
WARNING: shift/reduce conflict for AND in state 71 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 72 resolved as shift
WARNING: shift/reduce conflict for AND in state 72 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 75 resolved as shift
WARNING: shift/reduce conflict for AND in state 75 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 76 resolved as shift
WARNING: shift/reduce conflict for AND in state 76 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 77 resolved as shift
WARNING: shift/reduce conflict for AND in state 77 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 81 resolved as shift
WARNING: shift/reduce conflict for AND in state 81 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 87 resolved as shift
WARNING: shift/reduce conflict for AND in state 87 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PAREN in state 96 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PAREN in state 113 resolved as shift
WARNING: reduce/reduce conflict in state 20 resolved using rule (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER)
WARNING: rejected rule (quantifier_aux -> CLASS_IDENTIFIER) in state 20
WARNING: reduce/reduce conflict in state 72 resolved using rule (quantifier_aux -> comma_and quantifier_aux)
WARNING: rejected rule (quantifier_aux -> CLASS_IDENTIFIER comma_and quantifier_aux) in state 72
WARNING: reduce/reduce conflict in state 76 resolved using rule (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER)
WARNING: rejected rule (quantifier_aux -> CLASS_IDENTIFIER) in state 76
