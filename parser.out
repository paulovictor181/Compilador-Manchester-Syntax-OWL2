Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DISJOINtWITH
    NOT
    ONLY
    PROPERTY_IDENTIFIER_SIMPLE

Grammar

Rule 0     S' -> classes
Rule 1     classes -> defined_class
Rule 2     classes -> defined_class classes
Rule 3     classes -> primitive_class
Rule 4     classes -> primitive_class classes
Rule 5     primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section
Rule 6     subclass_section -> SUBCLASSOF def_descriptions
Rule 7     subclass_section -> SUBCLASSOF enum_class
Rule 8     subclass_section -> SUBCLASSOF covered_class
Rule 9     subclass_section -> empty
Rule 10    disjoint_section -> DISJOINTCLASSES disjoint_classes_list
Rule 11    disjoint_section -> empty
Rule 12    disjoint_classes_list -> CLASS_IDENTIFIER
Rule 13    disjoint_classes_list -> CLASS_IDENTIFIER COMMA disjoint_classes_list
Rule 14    defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
Rule 15    defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section
Rule 16    enum_class -> OPEN_CURLY individuals CLOSE_CURLY
Rule 17    covered_class -> CLASS_IDENTIFIER OR covered_class
Rule 18    covered_class -> CLASS_IDENTIFIER
Rule 19    equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions
Rule 20    equivalentto_section -> EQUIVALENTTO enum_class
Rule 21    equivalentto_section -> EQUIVALENTTO covered_class
Rule 22    def_descriptions -> CLASS_IDENTIFIER
Rule 23    def_descriptions -> CLASS_IDENTIFIER OR def_descriptions
Rule 24    def_descriptions -> CLASS_IDENTIFIER comma_and def_descriptions
Rule 25    def_descriptions -> quantifier_aux
Rule 26    def_descriptions -> quantifier_aux comma_and def_descriptions
Rule 27    quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
Rule 28    quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type
Rule 29    quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN
Rule 30    quantifier -> SOME
Rule 31    quantifier -> ALL
Rule 32    quantifier -> VALUE
Rule 33    quantifier -> MAX
Rule 34    quantifier -> MIN
Rule 35    quantifier -> EXACTLY
Rule 36    quantifier -> THAT
Rule 37    sizecheck -> EQUAL CARDINALITY
Rule 38    sizecheck -> GREATER_THAN CARDINALITY
Rule 39    sizecheck -> LESS_THAN CARDINALITY
Rule 40    sizecheck -> GREATER_THAN EQUAL CARDINALITY
Rule 41    sizecheck -> LESS_THAN EQUAL CARDINALITY
Rule 42    namespace_type -> NAMESPACE TYPE
Rule 43    namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET
Rule 44    individuals_section -> INDIVIDUALS individuals
Rule 45    individuals_section -> empty
Rule 46    individuals -> INDIVIDUAL_NAME
Rule 47    individuals -> INDIVIDUAL_NAME COMMA individuals
Rule 48    comma_and -> COMMA
Rule 49    comma_and -> AND
Rule 50    empty -> <empty>

Terminals, with rules where they appear

ALL                  : 31
AND                  : 49
CARDINALITY          : 37 38 39 40 41
CLASS                : 5 14 15
CLASS_IDENTIFIER     : 5 12 13 14 15 17 18 19 22 23 24 27
CLOSE_BRACKET        : 43
CLOSE_CURLY          : 16
CLOSE_PAREN          : 29
COMMA                : 13 47 48
DISJOINTCLASSES      : 10
DISJOINtWITH         : 
EQUAL                : 37 40 41
EQUIVALENTTO         : 19 20 21
EXACTLY              : 35
GREATER_THAN         : 38 40
INDIVIDUALS          : 44
INDIVIDUAL_NAME      : 46 47
LESS_THAN            : 39 41
MAX                  : 33
MIN                  : 34
NAMESPACE            : 42 43
NOT                  : 
ONLY                 : 
OPEN_BRACKET         : 43
OPEN_CURLY           : 16
OPEN_PAREN           : 29
OR                   : 17 23
PROPERTY_IDENTIFIER  : 27 28
PROPERTY_IDENTIFIER_SIMPLE : 
SOME                 : 30
SUBCLASSOF           : 6 7 8
THAT                 : 36
TYPE                 : 42 43
VALUE                : 32
error                : 

Nonterminals, with rules where they appear

classes              : 2 4 0
comma_and            : 19 24 26
covered_class        : 8 17 21
def_descriptions     : 6 19 23 24 26
defined_class        : 1 2
disjoint_classes_list : 10 13
disjoint_section     : 5
empty                : 9 11 45
enum_class           : 7 20
equivalentto_section : 14 15
individuals          : 16 44 47
individuals_section  : 5 14
namespace_type       : 28
primitive_class      : 3 4
quantifier           : 27 28
quantifier_aux       : 25 26 29
sizecheck            : 43
subclass_section     : 5 14

Parsing method: LALR

state 0

    (0) S' -> . classes
    (1) classes -> . defined_class
    (2) classes -> . defined_class classes
    (3) classes -> . primitive_class
    (4) classes -> . primitive_class classes
    (14) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
    (15) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section
    (5) primitive_class -> . CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section

    CLASS           shift and go to state 4

    classes                        shift and go to state 1
    defined_class                  shift and go to state 2
    primitive_class                shift and go to state 3

state 1

    (0) S' -> classes .



state 2

    (1) classes -> defined_class .
    (2) classes -> defined_class . classes
    (1) classes -> . defined_class
    (2) classes -> . defined_class classes
    (3) classes -> . primitive_class
    (4) classes -> . primitive_class classes
    (14) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
    (15) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section
    (5) primitive_class -> . CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section

    $end            reduce using rule 1 (classes -> defined_class .)
    CLASS           shift and go to state 4

    defined_class                  shift and go to state 2
    classes                        shift and go to state 5
    primitive_class                shift and go to state 3

state 3

    (3) classes -> primitive_class .
    (4) classes -> primitive_class . classes
    (1) classes -> . defined_class
    (2) classes -> . defined_class classes
    (3) classes -> . primitive_class
    (4) classes -> . primitive_class classes
    (14) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
    (15) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section
    (5) primitive_class -> . CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section

    $end            reduce using rule 3 (classes -> primitive_class .)
    CLASS           shift and go to state 4

    primitive_class                shift and go to state 3
    classes                        shift and go to state 6
    defined_class                  shift and go to state 2

state 4

    (14) defined_class -> CLASS . CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
    (15) defined_class -> CLASS . CLASS_IDENTIFIER equivalentto_section
    (5) primitive_class -> CLASS . CLASS_IDENTIFIER subclass_section disjoint_section individuals_section

    CLASS_IDENTIFIER shift and go to state 7


state 5

    (2) classes -> defined_class classes .

    $end            reduce using rule 2 (classes -> defined_class classes .)


state 6

    (4) classes -> primitive_class classes .

    $end            reduce using rule 4 (classes -> primitive_class classes .)


state 7

    (14) defined_class -> CLASS CLASS_IDENTIFIER . equivalentto_section subclass_section individuals_section
    (15) defined_class -> CLASS CLASS_IDENTIFIER . equivalentto_section
    (5) primitive_class -> CLASS CLASS_IDENTIFIER . subclass_section disjoint_section individuals_section
    (19) equivalentto_section -> . EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions
    (20) equivalentto_section -> . EQUIVALENTTO enum_class
    (21) equivalentto_section -> . EQUIVALENTTO covered_class
    (6) subclass_section -> . SUBCLASSOF def_descriptions
    (7) subclass_section -> . SUBCLASSOF enum_class
    (8) subclass_section -> . SUBCLASSOF covered_class
    (9) subclass_section -> . empty
    (50) empty -> .

    EQUIVALENTTO    shift and go to state 10
    SUBCLASSOF      shift and go to state 11
    DISJOINTCLASSES reduce using rule 50 (empty -> .)
    INDIVIDUALS     reduce using rule 50 (empty -> .)
    CLASS           reduce using rule 50 (empty -> .)
    $end            reduce using rule 50 (empty -> .)

    equivalentto_section           shift and go to state 8
    subclass_section               shift and go to state 9
    empty                          shift and go to state 12

state 8

    (14) defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section . subclass_section individuals_section
    (15) defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section .
    (6) subclass_section -> . SUBCLASSOF def_descriptions
    (7) subclass_section -> . SUBCLASSOF enum_class
    (8) subclass_section -> . SUBCLASSOF covered_class
    (9) subclass_section -> . empty
    (50) empty -> .

  ! reduce/reduce conflict for CLASS resolved using rule 15 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section .)
  ! reduce/reduce conflict for $end resolved using rule 15 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section .)
    CLASS           reduce using rule 15 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section .)
    $end            reduce using rule 15 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section .)
    SUBCLASSOF      shift and go to state 11
    INDIVIDUALS     reduce using rule 50 (empty -> .)

  ! CLASS           [ reduce using rule 50 (empty -> .) ]
  ! $end            [ reduce using rule 50 (empty -> .) ]

    subclass_section               shift and go to state 13
    empty                          shift and go to state 12

state 9

    (5) primitive_class -> CLASS CLASS_IDENTIFIER subclass_section . disjoint_section individuals_section
    (10) disjoint_section -> . DISJOINTCLASSES disjoint_classes_list
    (11) disjoint_section -> . empty
    (50) empty -> .

    DISJOINTCLASSES shift and go to state 15
    INDIVIDUALS     reduce using rule 50 (empty -> .)
    CLASS           reduce using rule 50 (empty -> .)
    $end            reduce using rule 50 (empty -> .)

    disjoint_section               shift and go to state 14
    empty                          shift and go to state 16

state 10

    (19) equivalentto_section -> EQUIVALENTTO . CLASS_IDENTIFIER comma_and def_descriptions
    (20) equivalentto_section -> EQUIVALENTTO . enum_class
    (21) equivalentto_section -> EQUIVALENTTO . covered_class
    (16) enum_class -> . OPEN_CURLY individuals CLOSE_CURLY
    (17) covered_class -> . CLASS_IDENTIFIER OR covered_class
    (18) covered_class -> . CLASS_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 17
    OPEN_CURLY      shift and go to state 20

    enum_class                     shift and go to state 18
    covered_class                  shift and go to state 19

state 11

    (6) subclass_section -> SUBCLASSOF . def_descriptions
    (7) subclass_section -> SUBCLASSOF . enum_class
    (8) subclass_section -> SUBCLASSOF . covered_class
    (22) def_descriptions -> . CLASS_IDENTIFIER
    (23) def_descriptions -> . CLASS_IDENTIFIER OR def_descriptions
    (24) def_descriptions -> . CLASS_IDENTIFIER comma_and def_descriptions
    (25) def_descriptions -> . quantifier_aux
    (26) def_descriptions -> . quantifier_aux comma_and def_descriptions
    (16) enum_class -> . OPEN_CURLY individuals CLOSE_CURLY
    (17) covered_class -> . CLASS_IDENTIFIER OR covered_class
    (18) covered_class -> . CLASS_IDENTIFIER
    (27) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (28) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (29) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN

    CLASS_IDENTIFIER shift and go to state 24
    OPEN_CURLY      shift and go to state 20
    PROPERTY_IDENTIFIER shift and go to state 26
    OPEN_PAREN      shift and go to state 27

    def_descriptions               shift and go to state 21
    enum_class                     shift and go to state 22
    covered_class                  shift and go to state 23
    quantifier_aux                 shift and go to state 25

state 12

    (9) subclass_section -> empty .

    DISJOINTCLASSES reduce using rule 9 (subclass_section -> empty .)
    INDIVIDUALS     reduce using rule 9 (subclass_section -> empty .)
    CLASS           reduce using rule 9 (subclass_section -> empty .)
    $end            reduce using rule 9 (subclass_section -> empty .)


state 13

    (14) defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section . individuals_section
    (44) individuals_section -> . INDIVIDUALS individuals
    (45) individuals_section -> . empty
    (50) empty -> .

    INDIVIDUALS     shift and go to state 29
    CLASS           reduce using rule 50 (empty -> .)
    $end            reduce using rule 50 (empty -> .)

    individuals_section            shift and go to state 28
    empty                          shift and go to state 30

state 14

    (5) primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section . individuals_section
    (44) individuals_section -> . INDIVIDUALS individuals
    (45) individuals_section -> . empty
    (50) empty -> .

    INDIVIDUALS     shift and go to state 29
    CLASS           reduce using rule 50 (empty -> .)
    $end            reduce using rule 50 (empty -> .)

    individuals_section            shift and go to state 31
    empty                          shift and go to state 30

state 15

    (10) disjoint_section -> DISJOINTCLASSES . disjoint_classes_list
    (12) disjoint_classes_list -> . CLASS_IDENTIFIER
    (13) disjoint_classes_list -> . CLASS_IDENTIFIER COMMA disjoint_classes_list

    CLASS_IDENTIFIER shift and go to state 33

    disjoint_classes_list          shift and go to state 32

state 16

    (11) disjoint_section -> empty .

    INDIVIDUALS     reduce using rule 11 (disjoint_section -> empty .)
    CLASS           reduce using rule 11 (disjoint_section -> empty .)
    $end            reduce using rule 11 (disjoint_section -> empty .)


state 17

    (19) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER . comma_and def_descriptions
    (17) covered_class -> CLASS_IDENTIFIER . OR covered_class
    (18) covered_class -> CLASS_IDENTIFIER .
    (48) comma_and -> . COMMA
    (49) comma_and -> . AND

    OR              shift and go to state 35
    SUBCLASSOF      reduce using rule 18 (covered_class -> CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 18 (covered_class -> CLASS_IDENTIFIER .)
    CLASS           reduce using rule 18 (covered_class -> CLASS_IDENTIFIER .)
    $end            reduce using rule 18 (covered_class -> CLASS_IDENTIFIER .)
    COMMA           shift and go to state 36
    AND             shift and go to state 37

    comma_and                      shift and go to state 34

state 18

    (20) equivalentto_section -> EQUIVALENTTO enum_class .

    SUBCLASSOF      reduce using rule 20 (equivalentto_section -> EQUIVALENTTO enum_class .)
    INDIVIDUALS     reduce using rule 20 (equivalentto_section -> EQUIVALENTTO enum_class .)
    CLASS           reduce using rule 20 (equivalentto_section -> EQUIVALENTTO enum_class .)
    $end            reduce using rule 20 (equivalentto_section -> EQUIVALENTTO enum_class .)


state 19

    (21) equivalentto_section -> EQUIVALENTTO covered_class .

    SUBCLASSOF      reduce using rule 21 (equivalentto_section -> EQUIVALENTTO covered_class .)
    INDIVIDUALS     reduce using rule 21 (equivalentto_section -> EQUIVALENTTO covered_class .)
    CLASS           reduce using rule 21 (equivalentto_section -> EQUIVALENTTO covered_class .)
    $end            reduce using rule 21 (equivalentto_section -> EQUIVALENTTO covered_class .)


state 20

    (16) enum_class -> OPEN_CURLY . individuals CLOSE_CURLY
    (46) individuals -> . INDIVIDUAL_NAME
    (47) individuals -> . INDIVIDUAL_NAME COMMA individuals

    INDIVIDUAL_NAME shift and go to state 39

    individuals                    shift and go to state 38

state 21

    (6) subclass_section -> SUBCLASSOF def_descriptions .

    DISJOINTCLASSES reduce using rule 6 (subclass_section -> SUBCLASSOF def_descriptions .)
    INDIVIDUALS     reduce using rule 6 (subclass_section -> SUBCLASSOF def_descriptions .)
    CLASS           reduce using rule 6 (subclass_section -> SUBCLASSOF def_descriptions .)
    $end            reduce using rule 6 (subclass_section -> SUBCLASSOF def_descriptions .)


state 22

    (7) subclass_section -> SUBCLASSOF enum_class .

    DISJOINTCLASSES reduce using rule 7 (subclass_section -> SUBCLASSOF enum_class .)
    INDIVIDUALS     reduce using rule 7 (subclass_section -> SUBCLASSOF enum_class .)
    CLASS           reduce using rule 7 (subclass_section -> SUBCLASSOF enum_class .)
    $end            reduce using rule 7 (subclass_section -> SUBCLASSOF enum_class .)


state 23

    (8) subclass_section -> SUBCLASSOF covered_class .

    DISJOINTCLASSES reduce using rule 8 (subclass_section -> SUBCLASSOF covered_class .)
    INDIVIDUALS     reduce using rule 8 (subclass_section -> SUBCLASSOF covered_class .)
    CLASS           reduce using rule 8 (subclass_section -> SUBCLASSOF covered_class .)
    $end            reduce using rule 8 (subclass_section -> SUBCLASSOF covered_class .)


state 24

    (22) def_descriptions -> CLASS_IDENTIFIER .
    (23) def_descriptions -> CLASS_IDENTIFIER . OR def_descriptions
    (24) def_descriptions -> CLASS_IDENTIFIER . comma_and def_descriptions
    (17) covered_class -> CLASS_IDENTIFIER . OR covered_class
    (18) covered_class -> CLASS_IDENTIFIER .
    (48) comma_and -> . COMMA
    (49) comma_and -> . AND

  ! reduce/reduce conflict for DISJOINTCLASSES resolved using rule 18 (covered_class -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for INDIVIDUALS resolved using rule 18 (covered_class -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 18 (covered_class -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 18 (covered_class -> CLASS_IDENTIFIER .)
    OR              shift and go to state 40
    DISJOINTCLASSES reduce using rule 18 (covered_class -> CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 18 (covered_class -> CLASS_IDENTIFIER .)
    CLASS           reduce using rule 18 (covered_class -> CLASS_IDENTIFIER .)
    $end            reduce using rule 18 (covered_class -> CLASS_IDENTIFIER .)
    COMMA           shift and go to state 36
    AND             shift and go to state 37

  ! DISJOINTCLASSES [ reduce using rule 22 (def_descriptions -> CLASS_IDENTIFIER .) ]
  ! INDIVIDUALS     [ reduce using rule 22 (def_descriptions -> CLASS_IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 22 (def_descriptions -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 22 (def_descriptions -> CLASS_IDENTIFIER .) ]

    comma_and                      shift and go to state 41

state 25

    (25) def_descriptions -> quantifier_aux .
    (26) def_descriptions -> quantifier_aux . comma_and def_descriptions
    (48) comma_and -> . COMMA
    (49) comma_and -> . AND

    DISJOINTCLASSES reduce using rule 25 (def_descriptions -> quantifier_aux .)
    INDIVIDUALS     reduce using rule 25 (def_descriptions -> quantifier_aux .)
    CLASS           reduce using rule 25 (def_descriptions -> quantifier_aux .)
    $end            reduce using rule 25 (def_descriptions -> quantifier_aux .)
    SUBCLASSOF      reduce using rule 25 (def_descriptions -> quantifier_aux .)
    COMMA           shift and go to state 36
    AND             shift and go to state 37

    comma_and                      shift and go to state 42

state 26

    (27) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier CLASS_IDENTIFIER
    (28) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier namespace_type
    (30) quantifier -> . SOME
    (31) quantifier -> . ALL
    (32) quantifier -> . VALUE
    (33) quantifier -> . MAX
    (34) quantifier -> . MIN
    (35) quantifier -> . EXACTLY
    (36) quantifier -> . THAT

    SOME            shift and go to state 44
    ALL             shift and go to state 45
    VALUE           shift and go to state 46
    MAX             shift and go to state 47
    MIN             shift and go to state 48
    EXACTLY         shift and go to state 49
    THAT            shift and go to state 50

    quantifier                     shift and go to state 43

state 27

    (29) quantifier_aux -> OPEN_PAREN . quantifier_aux CLOSE_PAREN
    (27) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (28) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (29) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN

    PROPERTY_IDENTIFIER shift and go to state 26
    OPEN_PAREN      shift and go to state 27

    quantifier_aux                 shift and go to state 51

state 28

    (14) defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section .

    CLASS           reduce using rule 14 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section .)
    $end            reduce using rule 14 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section .)


state 29

    (44) individuals_section -> INDIVIDUALS . individuals
    (46) individuals -> . INDIVIDUAL_NAME
    (47) individuals -> . INDIVIDUAL_NAME COMMA individuals

    INDIVIDUAL_NAME shift and go to state 39

    individuals                    shift and go to state 52

state 30

    (45) individuals_section -> empty .

    CLASS           reduce using rule 45 (individuals_section -> empty .)
    $end            reduce using rule 45 (individuals_section -> empty .)


state 31

    (5) primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section .

    CLASS           reduce using rule 5 (primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section .)
    $end            reduce using rule 5 (primitive_class -> CLASS CLASS_IDENTIFIER subclass_section disjoint_section individuals_section .)


state 32

    (10) disjoint_section -> DISJOINTCLASSES disjoint_classes_list .

    INDIVIDUALS     reduce using rule 10 (disjoint_section -> DISJOINTCLASSES disjoint_classes_list .)
    CLASS           reduce using rule 10 (disjoint_section -> DISJOINTCLASSES disjoint_classes_list .)
    $end            reduce using rule 10 (disjoint_section -> DISJOINTCLASSES disjoint_classes_list .)


state 33

    (12) disjoint_classes_list -> CLASS_IDENTIFIER .
    (13) disjoint_classes_list -> CLASS_IDENTIFIER . COMMA disjoint_classes_list

    INDIVIDUALS     reduce using rule 12 (disjoint_classes_list -> CLASS_IDENTIFIER .)
    CLASS           reduce using rule 12 (disjoint_classes_list -> CLASS_IDENTIFIER .)
    $end            reduce using rule 12 (disjoint_classes_list -> CLASS_IDENTIFIER .)
    COMMA           shift and go to state 53


state 34

    (19) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER comma_and . def_descriptions
    (22) def_descriptions -> . CLASS_IDENTIFIER
    (23) def_descriptions -> . CLASS_IDENTIFIER OR def_descriptions
    (24) def_descriptions -> . CLASS_IDENTIFIER comma_and def_descriptions
    (25) def_descriptions -> . quantifier_aux
    (26) def_descriptions -> . quantifier_aux comma_and def_descriptions
    (27) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (28) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (29) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN

    CLASS_IDENTIFIER shift and go to state 54
    PROPERTY_IDENTIFIER shift and go to state 26
    OPEN_PAREN      shift and go to state 27

    def_descriptions               shift and go to state 55
    quantifier_aux                 shift and go to state 25

state 35

    (17) covered_class -> CLASS_IDENTIFIER OR . covered_class
    (17) covered_class -> . CLASS_IDENTIFIER OR covered_class
    (18) covered_class -> . CLASS_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 56

    covered_class                  shift and go to state 57

state 36

    (48) comma_and -> COMMA .

    CLASS_IDENTIFIER reduce using rule 48 (comma_and -> COMMA .)
    PROPERTY_IDENTIFIER reduce using rule 48 (comma_and -> COMMA .)
    OPEN_PAREN      reduce using rule 48 (comma_and -> COMMA .)


state 37

    (49) comma_and -> AND .

    CLASS_IDENTIFIER reduce using rule 49 (comma_and -> AND .)
    PROPERTY_IDENTIFIER reduce using rule 49 (comma_and -> AND .)
    OPEN_PAREN      reduce using rule 49 (comma_and -> AND .)


state 38

    (16) enum_class -> OPEN_CURLY individuals . CLOSE_CURLY

    CLOSE_CURLY     shift and go to state 58


state 39

    (46) individuals -> INDIVIDUAL_NAME .
    (47) individuals -> INDIVIDUAL_NAME . COMMA individuals

    CLOSE_CURLY     reduce using rule 46 (individuals -> INDIVIDUAL_NAME .)
    CLASS           reduce using rule 46 (individuals -> INDIVIDUAL_NAME .)
    $end            reduce using rule 46 (individuals -> INDIVIDUAL_NAME .)
    COMMA           shift and go to state 59


state 40

    (23) def_descriptions -> CLASS_IDENTIFIER OR . def_descriptions
    (17) covered_class -> CLASS_IDENTIFIER OR . covered_class
    (22) def_descriptions -> . CLASS_IDENTIFIER
    (23) def_descriptions -> . CLASS_IDENTIFIER OR def_descriptions
    (24) def_descriptions -> . CLASS_IDENTIFIER comma_and def_descriptions
    (25) def_descriptions -> . quantifier_aux
    (26) def_descriptions -> . quantifier_aux comma_and def_descriptions
    (17) covered_class -> . CLASS_IDENTIFIER OR covered_class
    (18) covered_class -> . CLASS_IDENTIFIER
    (27) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (28) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (29) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN

    CLASS_IDENTIFIER shift and go to state 24
    PROPERTY_IDENTIFIER shift and go to state 26
    OPEN_PAREN      shift and go to state 27

    def_descriptions               shift and go to state 60
    covered_class                  shift and go to state 57
    quantifier_aux                 shift and go to state 25

state 41

    (24) def_descriptions -> CLASS_IDENTIFIER comma_and . def_descriptions
    (22) def_descriptions -> . CLASS_IDENTIFIER
    (23) def_descriptions -> . CLASS_IDENTIFIER OR def_descriptions
    (24) def_descriptions -> . CLASS_IDENTIFIER comma_and def_descriptions
    (25) def_descriptions -> . quantifier_aux
    (26) def_descriptions -> . quantifier_aux comma_and def_descriptions
    (27) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (28) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (29) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN

    CLASS_IDENTIFIER shift and go to state 54
    PROPERTY_IDENTIFIER shift and go to state 26
    OPEN_PAREN      shift and go to state 27

    def_descriptions               shift and go to state 61
    quantifier_aux                 shift and go to state 25

state 42

    (26) def_descriptions -> quantifier_aux comma_and . def_descriptions
    (22) def_descriptions -> . CLASS_IDENTIFIER
    (23) def_descriptions -> . CLASS_IDENTIFIER OR def_descriptions
    (24) def_descriptions -> . CLASS_IDENTIFIER comma_and def_descriptions
    (25) def_descriptions -> . quantifier_aux
    (26) def_descriptions -> . quantifier_aux comma_and def_descriptions
    (27) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (28) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (29) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN

    CLASS_IDENTIFIER shift and go to state 54
    PROPERTY_IDENTIFIER shift and go to state 26
    OPEN_PAREN      shift and go to state 27

    quantifier_aux                 shift and go to state 25
    def_descriptions               shift and go to state 62

state 43

    (27) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . CLASS_IDENTIFIER
    (28) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . namespace_type
    (42) namespace_type -> . NAMESPACE TYPE
    (43) namespace_type -> . NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET

    CLASS_IDENTIFIER shift and go to state 63
    NAMESPACE       shift and go to state 65

    namespace_type                 shift and go to state 64

state 44

    (30) quantifier -> SOME .

    CLASS_IDENTIFIER reduce using rule 30 (quantifier -> SOME .)
    NAMESPACE       reduce using rule 30 (quantifier -> SOME .)


state 45

    (31) quantifier -> ALL .

    CLASS_IDENTIFIER reduce using rule 31 (quantifier -> ALL .)
    NAMESPACE       reduce using rule 31 (quantifier -> ALL .)


state 46

    (32) quantifier -> VALUE .

    CLASS_IDENTIFIER reduce using rule 32 (quantifier -> VALUE .)
    NAMESPACE       reduce using rule 32 (quantifier -> VALUE .)


state 47

    (33) quantifier -> MAX .

    CLASS_IDENTIFIER reduce using rule 33 (quantifier -> MAX .)
    NAMESPACE       reduce using rule 33 (quantifier -> MAX .)


state 48

    (34) quantifier -> MIN .

    CLASS_IDENTIFIER reduce using rule 34 (quantifier -> MIN .)
    NAMESPACE       reduce using rule 34 (quantifier -> MIN .)


state 49

    (35) quantifier -> EXACTLY .

    CLASS_IDENTIFIER reduce using rule 35 (quantifier -> EXACTLY .)
    NAMESPACE       reduce using rule 35 (quantifier -> EXACTLY .)


state 50

    (36) quantifier -> THAT .

    CLASS_IDENTIFIER reduce using rule 36 (quantifier -> THAT .)
    NAMESPACE       reduce using rule 36 (quantifier -> THAT .)


state 51

    (29) quantifier_aux -> OPEN_PAREN quantifier_aux . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 66


state 52

    (44) individuals_section -> INDIVIDUALS individuals .

    CLASS           reduce using rule 44 (individuals_section -> INDIVIDUALS individuals .)
    $end            reduce using rule 44 (individuals_section -> INDIVIDUALS individuals .)


state 53

    (13) disjoint_classes_list -> CLASS_IDENTIFIER COMMA . disjoint_classes_list
    (12) disjoint_classes_list -> . CLASS_IDENTIFIER
    (13) disjoint_classes_list -> . CLASS_IDENTIFIER COMMA disjoint_classes_list

    CLASS_IDENTIFIER shift and go to state 33

    disjoint_classes_list          shift and go to state 67

state 54

    (22) def_descriptions -> CLASS_IDENTIFIER .
    (23) def_descriptions -> CLASS_IDENTIFIER . OR def_descriptions
    (24) def_descriptions -> CLASS_IDENTIFIER . comma_and def_descriptions
    (48) comma_and -> . COMMA
    (49) comma_and -> . AND

    SUBCLASSOF      reduce using rule 22 (def_descriptions -> CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 22 (def_descriptions -> CLASS_IDENTIFIER .)
    CLASS           reduce using rule 22 (def_descriptions -> CLASS_IDENTIFIER .)
    $end            reduce using rule 22 (def_descriptions -> CLASS_IDENTIFIER .)
    DISJOINTCLASSES reduce using rule 22 (def_descriptions -> CLASS_IDENTIFIER .)
    OR              shift and go to state 68
    COMMA           shift and go to state 36
    AND             shift and go to state 37

    comma_and                      shift and go to state 41

state 55

    (19) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions .

    SUBCLASSOF      reduce using rule 19 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions .)
    INDIVIDUALS     reduce using rule 19 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions .)
    CLASS           reduce using rule 19 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions .)
    $end            reduce using rule 19 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions .)


state 56

    (17) covered_class -> CLASS_IDENTIFIER . OR covered_class
    (18) covered_class -> CLASS_IDENTIFIER .

    OR              shift and go to state 35
    SUBCLASSOF      reduce using rule 18 (covered_class -> CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 18 (covered_class -> CLASS_IDENTIFIER .)
    CLASS           reduce using rule 18 (covered_class -> CLASS_IDENTIFIER .)
    $end            reduce using rule 18 (covered_class -> CLASS_IDENTIFIER .)


state 57

    (17) covered_class -> CLASS_IDENTIFIER OR covered_class .

    SUBCLASSOF      reduce using rule 17 (covered_class -> CLASS_IDENTIFIER OR covered_class .)
    INDIVIDUALS     reduce using rule 17 (covered_class -> CLASS_IDENTIFIER OR covered_class .)
    CLASS           reduce using rule 17 (covered_class -> CLASS_IDENTIFIER OR covered_class .)
    $end            reduce using rule 17 (covered_class -> CLASS_IDENTIFIER OR covered_class .)
    DISJOINTCLASSES reduce using rule 17 (covered_class -> CLASS_IDENTIFIER OR covered_class .)


state 58

    (16) enum_class -> OPEN_CURLY individuals CLOSE_CURLY .

    SUBCLASSOF      reduce using rule 16 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)
    INDIVIDUALS     reduce using rule 16 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)
    CLASS           reduce using rule 16 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)
    $end            reduce using rule 16 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)
    DISJOINTCLASSES reduce using rule 16 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)


state 59

    (47) individuals -> INDIVIDUAL_NAME COMMA . individuals
    (46) individuals -> . INDIVIDUAL_NAME
    (47) individuals -> . INDIVIDUAL_NAME COMMA individuals

    INDIVIDUAL_NAME shift and go to state 39

    individuals                    shift and go to state 69

state 60

    (23) def_descriptions -> CLASS_IDENTIFIER OR def_descriptions .

    DISJOINTCLASSES reduce using rule 23 (def_descriptions -> CLASS_IDENTIFIER OR def_descriptions .)
    INDIVIDUALS     reduce using rule 23 (def_descriptions -> CLASS_IDENTIFIER OR def_descriptions .)
    CLASS           reduce using rule 23 (def_descriptions -> CLASS_IDENTIFIER OR def_descriptions .)
    $end            reduce using rule 23 (def_descriptions -> CLASS_IDENTIFIER OR def_descriptions .)
    SUBCLASSOF      reduce using rule 23 (def_descriptions -> CLASS_IDENTIFIER OR def_descriptions .)


state 61

    (24) def_descriptions -> CLASS_IDENTIFIER comma_and def_descriptions .

    DISJOINTCLASSES reduce using rule 24 (def_descriptions -> CLASS_IDENTIFIER comma_and def_descriptions .)
    INDIVIDUALS     reduce using rule 24 (def_descriptions -> CLASS_IDENTIFIER comma_and def_descriptions .)
    CLASS           reduce using rule 24 (def_descriptions -> CLASS_IDENTIFIER comma_and def_descriptions .)
    $end            reduce using rule 24 (def_descriptions -> CLASS_IDENTIFIER comma_and def_descriptions .)
    SUBCLASSOF      reduce using rule 24 (def_descriptions -> CLASS_IDENTIFIER comma_and def_descriptions .)


state 62

    (26) def_descriptions -> quantifier_aux comma_and def_descriptions .

    DISJOINTCLASSES reduce using rule 26 (def_descriptions -> quantifier_aux comma_and def_descriptions .)
    INDIVIDUALS     reduce using rule 26 (def_descriptions -> quantifier_aux comma_and def_descriptions .)
    CLASS           reduce using rule 26 (def_descriptions -> quantifier_aux comma_and def_descriptions .)
    $end            reduce using rule 26 (def_descriptions -> quantifier_aux comma_and def_descriptions .)
    SUBCLASSOF      reduce using rule 26 (def_descriptions -> quantifier_aux comma_and def_descriptions .)


state 63

    (27) quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .

    COMMA           reduce using rule 27 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    AND             reduce using rule 27 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    DISJOINTCLASSES reduce using rule 27 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 27 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    CLASS           reduce using rule 27 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    $end            reduce using rule 27 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 27 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    SUBCLASSOF      reduce using rule 27 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)


state 64

    (28) quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .

    COMMA           reduce using rule 28 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    AND             reduce using rule 28 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    DISJOINTCLASSES reduce using rule 28 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    INDIVIDUALS     reduce using rule 28 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    CLASS           reduce using rule 28 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    $end            reduce using rule 28 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    CLOSE_PAREN     reduce using rule 28 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    SUBCLASSOF      reduce using rule 28 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)


state 65

    (42) namespace_type -> NAMESPACE . TYPE
    (43) namespace_type -> NAMESPACE . TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET

    TYPE            shift and go to state 70


state 66

    (29) quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .

    COMMA           reduce using rule 29 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    AND             reduce using rule 29 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    DISJOINTCLASSES reduce using rule 29 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    INDIVIDUALS     reduce using rule 29 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    CLASS           reduce using rule 29 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    $end            reduce using rule 29 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 29 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    SUBCLASSOF      reduce using rule 29 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)


state 67

    (13) disjoint_classes_list -> CLASS_IDENTIFIER COMMA disjoint_classes_list .

    INDIVIDUALS     reduce using rule 13 (disjoint_classes_list -> CLASS_IDENTIFIER COMMA disjoint_classes_list .)
    CLASS           reduce using rule 13 (disjoint_classes_list -> CLASS_IDENTIFIER COMMA disjoint_classes_list .)
    $end            reduce using rule 13 (disjoint_classes_list -> CLASS_IDENTIFIER COMMA disjoint_classes_list .)


state 68

    (23) def_descriptions -> CLASS_IDENTIFIER OR . def_descriptions
    (22) def_descriptions -> . CLASS_IDENTIFIER
    (23) def_descriptions -> . CLASS_IDENTIFIER OR def_descriptions
    (24) def_descriptions -> . CLASS_IDENTIFIER comma_and def_descriptions
    (25) def_descriptions -> . quantifier_aux
    (26) def_descriptions -> . quantifier_aux comma_and def_descriptions
    (27) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (28) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (29) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN

    CLASS_IDENTIFIER shift and go to state 54
    PROPERTY_IDENTIFIER shift and go to state 26
    OPEN_PAREN      shift and go to state 27

    def_descriptions               shift and go to state 60
    quantifier_aux                 shift and go to state 25

state 69

    (47) individuals -> INDIVIDUAL_NAME COMMA individuals .

    CLOSE_CURLY     reduce using rule 47 (individuals -> INDIVIDUAL_NAME COMMA individuals .)
    CLASS           reduce using rule 47 (individuals -> INDIVIDUAL_NAME COMMA individuals .)
    $end            reduce using rule 47 (individuals -> INDIVIDUAL_NAME COMMA individuals .)


state 70

    (42) namespace_type -> NAMESPACE TYPE .
    (43) namespace_type -> NAMESPACE TYPE . OPEN_BRACKET sizecheck CLOSE_BRACKET

    COMMA           reduce using rule 42 (namespace_type -> NAMESPACE TYPE .)
    AND             reduce using rule 42 (namespace_type -> NAMESPACE TYPE .)
    DISJOINTCLASSES reduce using rule 42 (namespace_type -> NAMESPACE TYPE .)
    INDIVIDUALS     reduce using rule 42 (namespace_type -> NAMESPACE TYPE .)
    CLASS           reduce using rule 42 (namespace_type -> NAMESPACE TYPE .)
    $end            reduce using rule 42 (namespace_type -> NAMESPACE TYPE .)
    CLOSE_PAREN     reduce using rule 42 (namespace_type -> NAMESPACE TYPE .)
    SUBCLASSOF      reduce using rule 42 (namespace_type -> NAMESPACE TYPE .)
    OPEN_BRACKET    shift and go to state 71


state 71

    (43) namespace_type -> NAMESPACE TYPE OPEN_BRACKET . sizecheck CLOSE_BRACKET
    (37) sizecheck -> . EQUAL CARDINALITY
    (38) sizecheck -> . GREATER_THAN CARDINALITY
    (39) sizecheck -> . LESS_THAN CARDINALITY
    (40) sizecheck -> . GREATER_THAN EQUAL CARDINALITY
    (41) sizecheck -> . LESS_THAN EQUAL CARDINALITY

    EQUAL           shift and go to state 73
    GREATER_THAN    shift and go to state 74
    LESS_THAN       shift and go to state 75

    sizecheck                      shift and go to state 72

state 72

    (43) namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 76


state 73

    (37) sizecheck -> EQUAL . CARDINALITY

    CARDINALITY     shift and go to state 77


state 74

    (38) sizecheck -> GREATER_THAN . CARDINALITY
    (40) sizecheck -> GREATER_THAN . EQUAL CARDINALITY

    CARDINALITY     shift and go to state 78
    EQUAL           shift and go to state 79


state 75

    (39) sizecheck -> LESS_THAN . CARDINALITY
    (41) sizecheck -> LESS_THAN . EQUAL CARDINALITY

    CARDINALITY     shift and go to state 80
    EQUAL           shift and go to state 81


state 76

    (43) namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .

    COMMA           reduce using rule 43 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    AND             reduce using rule 43 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    DISJOINTCLASSES reduce using rule 43 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    INDIVIDUALS     reduce using rule 43 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    CLASS           reduce using rule 43 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    $end            reduce using rule 43 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 43 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    SUBCLASSOF      reduce using rule 43 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)


state 77

    (37) sizecheck -> EQUAL CARDINALITY .

    CLOSE_BRACKET   reduce using rule 37 (sizecheck -> EQUAL CARDINALITY .)


state 78

    (38) sizecheck -> GREATER_THAN CARDINALITY .

    CLOSE_BRACKET   reduce using rule 38 (sizecheck -> GREATER_THAN CARDINALITY .)


state 79

    (40) sizecheck -> GREATER_THAN EQUAL . CARDINALITY

    CARDINALITY     shift and go to state 82


state 80

    (39) sizecheck -> LESS_THAN CARDINALITY .

    CLOSE_BRACKET   reduce using rule 39 (sizecheck -> LESS_THAN CARDINALITY .)


state 81

    (41) sizecheck -> LESS_THAN EQUAL . CARDINALITY

    CARDINALITY     shift and go to state 83


state 82

    (40) sizecheck -> GREATER_THAN EQUAL CARDINALITY .

    CLOSE_BRACKET   reduce using rule 40 (sizecheck -> GREATER_THAN EQUAL CARDINALITY .)


state 83

    (41) sizecheck -> LESS_THAN EQUAL CARDINALITY .

    CLOSE_BRACKET   reduce using rule 41 (sizecheck -> LESS_THAN EQUAL CARDINALITY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 8 resolved using rule (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section)
WARNING: rejected rule (empty -> <empty>) in state 8
WARNING: reduce/reduce conflict in state 24 resolved using rule (covered_class -> CLASS_IDENTIFIER)
WARNING: rejected rule (def_descriptions -> CLASS_IDENTIFIER) in state 24
