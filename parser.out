Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DISJOINtWITH
    NOT
    PROPERTY_IDENTIFIER_SIMPLE

Grammar

Rule 0     S' -> classes
Rule 1     classes -> defined_class
Rule 2     classes -> defined_class classes
Rule 3     classes -> primitive_class
Rule 4     classes -> primitive_class classes
Rule 5     primitive_class -> CLASS CLASS_IDENTIFIER subclass_section closure_axiom disjoint_section individuals_section
Rule 6     subclass_section -> SUBCLASSOF def_descriptions
Rule 7     subclass_section -> SUBCLASSOF enum_class
Rule 8     subclass_section -> SUBCLASSOF covered_class
Rule 9     subclass_section -> SUBCLASSOF CLASS_IDENTIFIER
Rule 10    subclass_section -> empty
Rule 11    disjoint_section -> DISJOINTCLASSES disjoint_classes_list
Rule 12    disjoint_section -> empty
Rule 13    disjoint_classes_list -> CLASS_IDENTIFIER
Rule 14    disjoint_classes_list -> CLASS_IDENTIFIER COMMA disjoint_classes_list
Rule 15    defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
Rule 16    defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section
Rule 17    enum_class -> OPEN_CURLY individuals CLOSE_CURLY
Rule 18    covered_class -> CLASS_IDENTIFIER OR covered_class
Rule 19    covered_class -> CLASS_IDENTIFIER
Rule 20    closure_axiom -> ONLY OPEN_PAREN def_descriptions CLOSE_PAREN
Rule 21    aux_fechamento -> OPEN_PAREN PROPERTY_IDENTIFIER aux_fechamento
Rule 22    aux_fechamento -> OR PROPERTY_IDENTIFIER aux_fechamento
Rule 23    aux_fechamento -> PROPERTY_IDENTIFIER CLOSE_PAREN
Rule 24    ani_abertura -> comma_and OPEN_PAREN def_descriptions CLOSE_PAREN quantifier ani_abertura
Rule 25    ani_abertura -> comma_and OPEN_PAREN def_descriptions CLOSE_PAREN
Rule 26    aninhada -> CLASS_IDENTIFIER ani_abertura
Rule 27    equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions
Rule 28    equivalentto_section -> EQUIVALENTTO enum_class
Rule 29    equivalentto_section -> EQUIVALENTTO covered_class
Rule 30    equivalentto_section -> EQUIVALENTTO aninhada
Rule 31    def_descriptions -> class_aux
Rule 32    def_descriptions -> class_aux def_descriptions
Rule 33    def_descriptions -> quantifier_aux
Rule 34    def_descriptions -> quantifier_aux def_descriptions
Rule 35    class_aux -> CLASS_IDENTIFIER
Rule 36    class_aux -> CLASS_IDENTIFIER OR class_aux
Rule 37    class_aux -> CLASS_IDENTIFIER comma_and class_aux
Rule 38    class_aux -> OPEN_PAREN class_aux CLOSE_PAREN
Rule 39    quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
Rule 40    quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type
Rule 41    quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN
Rule 42    quantifier_aux -> quantifier_aux comma_and quantifier_aux
Rule 43    quantifier -> SOME
Rule 44    quantifier -> ALL
Rule 45    quantifier -> VALUE
Rule 46    quantifier -> MAX
Rule 47    quantifier -> MIN
Rule 48    quantifier -> EXACTLY
Rule 49    quantifier -> THAT
Rule 50    sizecheck -> EQUAL CARDINALITY
Rule 51    sizecheck -> GREATER_THAN CARDINALITY
Rule 52    sizecheck -> LESS_THAN CARDINALITY
Rule 53    sizecheck -> GREATER_THAN EQUAL CARDINALITY
Rule 54    sizecheck -> LESS_THAN EQUAL CARDINALITY
Rule 55    namespace_type -> NAMESPACE TYPE
Rule 56    namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET
Rule 57    individuals_section -> INDIVIDUALS individuals
Rule 58    individuals_section -> empty
Rule 59    individuals -> INDIVIDUAL_NAME
Rule 60    individuals -> INDIVIDUAL_NAME COMMA individuals
Rule 61    comma_and -> COMMA
Rule 62    comma_and -> AND
Rule 63    empty -> <empty>

Terminals, with rules where they appear

ALL                  : 44
AND                  : 62
CARDINALITY          : 50 51 52 53 54
CLASS                : 5 15 16
CLASS_IDENTIFIER     : 5 9 13 14 15 16 18 19 26 27 35 36 37 39
CLOSE_BRACKET        : 56
CLOSE_CURLY          : 17
CLOSE_PAREN          : 20 23 24 25 38 41
COMMA                : 14 60 61
DISJOINTCLASSES      : 11
DISJOINtWITH         : 
EQUAL                : 50 53 54
EQUIVALENTTO         : 27 28 29 30
EXACTLY              : 48
GREATER_THAN         : 51 53
INDIVIDUALS          : 57
INDIVIDUAL_NAME      : 59 60
LESS_THAN            : 52 54
MAX                  : 46
MIN                  : 47
NAMESPACE            : 55 56
NOT                  : 
ONLY                 : 20
OPEN_BRACKET         : 56
OPEN_CURLY           : 17
OPEN_PAREN           : 20 21 24 25 38 41
OR                   : 18 22 36
PROPERTY_IDENTIFIER  : 21 22 23 39 40
PROPERTY_IDENTIFIER_SIMPLE : 
SOME                 : 43
SUBCLASSOF           : 6 7 8 9
THAT                 : 49
TYPE                 : 55 56
VALUE                : 45
error                : 

Nonterminals, with rules where they appear

ani_abertura         : 24 26
aninhada             : 30
aux_fechamento       : 21 22
class_aux            : 31 32 36 37 38
classes              : 2 4 0
closure_axiom        : 5
comma_and            : 24 25 27 37 42
covered_class        : 8 18 29
def_descriptions     : 6 20 24 25 27 32 34
defined_class        : 1 2
disjoint_classes_list : 11 14
disjoint_section     : 5
empty                : 10 12 58
enum_class           : 7 28
equivalentto_section : 15 16
individuals          : 17 57 60
individuals_section  : 5 15
namespace_type       : 40
primitive_class      : 3 4
quantifier           : 24 39 40
quantifier_aux       : 33 34 41 42 42
sizecheck            : 56
subclass_section     : 5 15

Parsing method: LALR

state 0

    (0) S' -> . classes
    (1) classes -> . defined_class
    (2) classes -> . defined_class classes
    (3) classes -> . primitive_class
    (4) classes -> . primitive_class classes
    (15) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
    (16) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section
    (5) primitive_class -> . CLASS CLASS_IDENTIFIER subclass_section closure_axiom disjoint_section individuals_section

    CLASS           shift and go to state 4

    classes                        shift and go to state 1
    defined_class                  shift and go to state 2
    primitive_class                shift and go to state 3

state 1

    (0) S' -> classes .



state 2

    (1) classes -> defined_class .
    (2) classes -> defined_class . classes
    (1) classes -> . defined_class
    (2) classes -> . defined_class classes
    (3) classes -> . primitive_class
    (4) classes -> . primitive_class classes
    (15) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
    (16) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section
    (5) primitive_class -> . CLASS CLASS_IDENTIFIER subclass_section closure_axiom disjoint_section individuals_section

    $end            reduce using rule 1 (classes -> defined_class .)
    CLASS           shift and go to state 4

    defined_class                  shift and go to state 2
    classes                        shift and go to state 5
    primitive_class                shift and go to state 3

state 3

    (3) classes -> primitive_class .
    (4) classes -> primitive_class . classes
    (1) classes -> . defined_class
    (2) classes -> . defined_class classes
    (3) classes -> . primitive_class
    (4) classes -> . primitive_class classes
    (15) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
    (16) defined_class -> . CLASS CLASS_IDENTIFIER equivalentto_section
    (5) primitive_class -> . CLASS CLASS_IDENTIFIER subclass_section closure_axiom disjoint_section individuals_section

    $end            reduce using rule 3 (classes -> primitive_class .)
    CLASS           shift and go to state 4

    primitive_class                shift and go to state 3
    classes                        shift and go to state 6
    defined_class                  shift and go to state 2

state 4

    (15) defined_class -> CLASS . CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section
    (16) defined_class -> CLASS . CLASS_IDENTIFIER equivalentto_section
    (5) primitive_class -> CLASS . CLASS_IDENTIFIER subclass_section closure_axiom disjoint_section individuals_section

    CLASS_IDENTIFIER shift and go to state 7


state 5

    (2) classes -> defined_class classes .

    $end            reduce using rule 2 (classes -> defined_class classes .)


state 6

    (4) classes -> primitive_class classes .

    $end            reduce using rule 4 (classes -> primitive_class classes .)


state 7

    (15) defined_class -> CLASS CLASS_IDENTIFIER . equivalentto_section subclass_section individuals_section
    (16) defined_class -> CLASS CLASS_IDENTIFIER . equivalentto_section
    (5) primitive_class -> CLASS CLASS_IDENTIFIER . subclass_section closure_axiom disjoint_section individuals_section
    (27) equivalentto_section -> . EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions
    (28) equivalentto_section -> . EQUIVALENTTO enum_class
    (29) equivalentto_section -> . EQUIVALENTTO covered_class
    (30) equivalentto_section -> . EQUIVALENTTO aninhada
    (6) subclass_section -> . SUBCLASSOF def_descriptions
    (7) subclass_section -> . SUBCLASSOF enum_class
    (8) subclass_section -> . SUBCLASSOF covered_class
    (9) subclass_section -> . SUBCLASSOF CLASS_IDENTIFIER
    (10) subclass_section -> . empty
    (63) empty -> .

    EQUIVALENTTO    shift and go to state 10
    SUBCLASSOF      shift and go to state 11
    ONLY            reduce using rule 63 (empty -> .)

    equivalentto_section           shift and go to state 8
    subclass_section               shift and go to state 9
    empty                          shift and go to state 12

state 8

    (15) defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section . subclass_section individuals_section
    (16) defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section .
    (6) subclass_section -> . SUBCLASSOF def_descriptions
    (7) subclass_section -> . SUBCLASSOF enum_class
    (8) subclass_section -> . SUBCLASSOF covered_class
    (9) subclass_section -> . SUBCLASSOF CLASS_IDENTIFIER
    (10) subclass_section -> . empty
    (63) empty -> .

  ! reduce/reduce conflict for CLASS resolved using rule 16 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section .)
  ! reduce/reduce conflict for $end resolved using rule 16 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section .)
    CLASS           reduce using rule 16 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section .)
    $end            reduce using rule 16 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section .)
    SUBCLASSOF      shift and go to state 11
    INDIVIDUALS     reduce using rule 63 (empty -> .)

  ! CLASS           [ reduce using rule 63 (empty -> .) ]
  ! $end            [ reduce using rule 63 (empty -> .) ]

    subclass_section               shift and go to state 13
    empty                          shift and go to state 12

state 9

    (5) primitive_class -> CLASS CLASS_IDENTIFIER subclass_section . closure_axiom disjoint_section individuals_section
    (20) closure_axiom -> . ONLY OPEN_PAREN def_descriptions CLOSE_PAREN

    ONLY            shift and go to state 15

    closure_axiom                  shift and go to state 14

state 10

    (27) equivalentto_section -> EQUIVALENTTO . CLASS_IDENTIFIER comma_and def_descriptions
    (28) equivalentto_section -> EQUIVALENTTO . enum_class
    (29) equivalentto_section -> EQUIVALENTTO . covered_class
    (30) equivalentto_section -> EQUIVALENTTO . aninhada
    (17) enum_class -> . OPEN_CURLY individuals CLOSE_CURLY
    (18) covered_class -> . CLASS_IDENTIFIER OR covered_class
    (19) covered_class -> . CLASS_IDENTIFIER
    (26) aninhada -> . CLASS_IDENTIFIER ani_abertura

    CLASS_IDENTIFIER shift and go to state 16
    OPEN_CURLY      shift and go to state 20

    enum_class                     shift and go to state 17
    covered_class                  shift and go to state 18
    aninhada                       shift and go to state 19

state 11

    (6) subclass_section -> SUBCLASSOF . def_descriptions
    (7) subclass_section -> SUBCLASSOF . enum_class
    (8) subclass_section -> SUBCLASSOF . covered_class
    (9) subclass_section -> SUBCLASSOF . CLASS_IDENTIFIER
    (31) def_descriptions -> . class_aux
    (32) def_descriptions -> . class_aux def_descriptions
    (33) def_descriptions -> . quantifier_aux
    (34) def_descriptions -> . quantifier_aux def_descriptions
    (17) enum_class -> . OPEN_CURLY individuals CLOSE_CURLY
    (18) covered_class -> . CLASS_IDENTIFIER OR covered_class
    (19) covered_class -> . CLASS_IDENTIFIER
    (35) class_aux -> . CLASS_IDENTIFIER
    (36) class_aux -> . CLASS_IDENTIFIER OR class_aux
    (37) class_aux -> . CLASS_IDENTIFIER comma_and class_aux
    (38) class_aux -> . OPEN_PAREN class_aux CLOSE_PAREN
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (41) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (42) quantifier_aux -> . quantifier_aux comma_and quantifier_aux

    CLASS_IDENTIFIER shift and go to state 24
    OPEN_CURLY      shift and go to state 20
    OPEN_PAREN      shift and go to state 27
    PROPERTY_IDENTIFIER shift and go to state 28

    def_descriptions               shift and go to state 21
    enum_class                     shift and go to state 22
    covered_class                  shift and go to state 23
    class_aux                      shift and go to state 25
    quantifier_aux                 shift and go to state 26

state 12

    (10) subclass_section -> empty .

    ONLY            reduce using rule 10 (subclass_section -> empty .)
    INDIVIDUALS     reduce using rule 10 (subclass_section -> empty .)
    CLASS           reduce using rule 10 (subclass_section -> empty .)
    $end            reduce using rule 10 (subclass_section -> empty .)


state 13

    (15) defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section . individuals_section
    (57) individuals_section -> . INDIVIDUALS individuals
    (58) individuals_section -> . empty
    (63) empty -> .

    INDIVIDUALS     shift and go to state 30
    CLASS           reduce using rule 63 (empty -> .)
    $end            reduce using rule 63 (empty -> .)

    individuals_section            shift and go to state 29
    empty                          shift and go to state 31

state 14

    (5) primitive_class -> CLASS CLASS_IDENTIFIER subclass_section closure_axiom . disjoint_section individuals_section
    (11) disjoint_section -> . DISJOINTCLASSES disjoint_classes_list
    (12) disjoint_section -> . empty
    (63) empty -> .

    DISJOINTCLASSES shift and go to state 33
    INDIVIDUALS     reduce using rule 63 (empty -> .)
    CLASS           reduce using rule 63 (empty -> .)
    $end            reduce using rule 63 (empty -> .)

    disjoint_section               shift and go to state 32
    empty                          shift and go to state 34

state 15

    (20) closure_axiom -> ONLY . OPEN_PAREN def_descriptions CLOSE_PAREN

    OPEN_PAREN      shift and go to state 35


state 16

    (27) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER . comma_and def_descriptions
    (18) covered_class -> CLASS_IDENTIFIER . OR covered_class
    (19) covered_class -> CLASS_IDENTIFIER .
    (26) aninhada -> CLASS_IDENTIFIER . ani_abertura
    (61) comma_and -> . COMMA
    (62) comma_and -> . AND
    (24) ani_abertura -> . comma_and OPEN_PAREN def_descriptions CLOSE_PAREN quantifier ani_abertura
    (25) ani_abertura -> . comma_and OPEN_PAREN def_descriptions CLOSE_PAREN

    OR              shift and go to state 37
    SUBCLASSOF      reduce using rule 19 (covered_class -> CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 19 (covered_class -> CLASS_IDENTIFIER .)
    CLASS           reduce using rule 19 (covered_class -> CLASS_IDENTIFIER .)
    $end            reduce using rule 19 (covered_class -> CLASS_IDENTIFIER .)
    COMMA           shift and go to state 39
    AND             shift and go to state 40

    comma_and                      shift and go to state 36
    ani_abertura                   shift and go to state 38

state 17

    (28) equivalentto_section -> EQUIVALENTTO enum_class .

    SUBCLASSOF      reduce using rule 28 (equivalentto_section -> EQUIVALENTTO enum_class .)
    INDIVIDUALS     reduce using rule 28 (equivalentto_section -> EQUIVALENTTO enum_class .)
    CLASS           reduce using rule 28 (equivalentto_section -> EQUIVALENTTO enum_class .)
    $end            reduce using rule 28 (equivalentto_section -> EQUIVALENTTO enum_class .)


state 18

    (29) equivalentto_section -> EQUIVALENTTO covered_class .

    SUBCLASSOF      reduce using rule 29 (equivalentto_section -> EQUIVALENTTO covered_class .)
    INDIVIDUALS     reduce using rule 29 (equivalentto_section -> EQUIVALENTTO covered_class .)
    CLASS           reduce using rule 29 (equivalentto_section -> EQUIVALENTTO covered_class .)
    $end            reduce using rule 29 (equivalentto_section -> EQUIVALENTTO covered_class .)


state 19

    (30) equivalentto_section -> EQUIVALENTTO aninhada .

    SUBCLASSOF      reduce using rule 30 (equivalentto_section -> EQUIVALENTTO aninhada .)
    INDIVIDUALS     reduce using rule 30 (equivalentto_section -> EQUIVALENTTO aninhada .)
    CLASS           reduce using rule 30 (equivalentto_section -> EQUIVALENTTO aninhada .)
    $end            reduce using rule 30 (equivalentto_section -> EQUIVALENTTO aninhada .)


state 20

    (17) enum_class -> OPEN_CURLY . individuals CLOSE_CURLY
    (59) individuals -> . INDIVIDUAL_NAME
    (60) individuals -> . INDIVIDUAL_NAME COMMA individuals

    INDIVIDUAL_NAME shift and go to state 42

    individuals                    shift and go to state 41

state 21

    (6) subclass_section -> SUBCLASSOF def_descriptions .

    ONLY            reduce using rule 6 (subclass_section -> SUBCLASSOF def_descriptions .)
    INDIVIDUALS     reduce using rule 6 (subclass_section -> SUBCLASSOF def_descriptions .)
    CLASS           reduce using rule 6 (subclass_section -> SUBCLASSOF def_descriptions .)
    $end            reduce using rule 6 (subclass_section -> SUBCLASSOF def_descriptions .)


state 22

    (7) subclass_section -> SUBCLASSOF enum_class .

    ONLY            reduce using rule 7 (subclass_section -> SUBCLASSOF enum_class .)
    INDIVIDUALS     reduce using rule 7 (subclass_section -> SUBCLASSOF enum_class .)
    CLASS           reduce using rule 7 (subclass_section -> SUBCLASSOF enum_class .)
    $end            reduce using rule 7 (subclass_section -> SUBCLASSOF enum_class .)


state 23

    (8) subclass_section -> SUBCLASSOF covered_class .

    ONLY            reduce using rule 8 (subclass_section -> SUBCLASSOF covered_class .)
    INDIVIDUALS     reduce using rule 8 (subclass_section -> SUBCLASSOF covered_class .)
    CLASS           reduce using rule 8 (subclass_section -> SUBCLASSOF covered_class .)
    $end            reduce using rule 8 (subclass_section -> SUBCLASSOF covered_class .)


state 24

    (9) subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .
    (18) covered_class -> CLASS_IDENTIFIER . OR covered_class
    (19) covered_class -> CLASS_IDENTIFIER .
    (35) class_aux -> CLASS_IDENTIFIER .
    (36) class_aux -> CLASS_IDENTIFIER . OR class_aux
    (37) class_aux -> CLASS_IDENTIFIER . comma_and class_aux
    (61) comma_and -> . COMMA
    (62) comma_and -> . AND

  ! reduce/reduce conflict for ONLY resolved using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for INDIVIDUALS resolved using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for ONLY resolved using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for INDIVIDUALS resolved using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
    ONLY            reduce using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
    CLASS           reduce using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
    $end            reduce using rule 9 (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER .)
    OR              shift and go to state 43
    CLASS_IDENTIFIER reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .)
    OPEN_PAREN      reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .)
    PROPERTY_IDENTIFIER reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .)
    COMMA           shift and go to state 39
    AND             shift and go to state 40

  ! ONLY            [ reduce using rule 19 (covered_class -> CLASS_IDENTIFIER .) ]
  ! INDIVIDUALS     [ reduce using rule 19 (covered_class -> CLASS_IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 19 (covered_class -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 19 (covered_class -> CLASS_IDENTIFIER .) ]
  ! ONLY            [ reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .) ]
  ! INDIVIDUALS     [ reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .) ]

    comma_and                      shift and go to state 44

state 25

    (31) def_descriptions -> class_aux .
    (32) def_descriptions -> class_aux . def_descriptions
    (31) def_descriptions -> . class_aux
    (32) def_descriptions -> . class_aux def_descriptions
    (33) def_descriptions -> . quantifier_aux
    (34) def_descriptions -> . quantifier_aux def_descriptions
    (35) class_aux -> . CLASS_IDENTIFIER
    (36) class_aux -> . CLASS_IDENTIFIER OR class_aux
    (37) class_aux -> . CLASS_IDENTIFIER comma_and class_aux
    (38) class_aux -> . OPEN_PAREN class_aux CLOSE_PAREN
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (41) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (42) quantifier_aux -> . quantifier_aux comma_and quantifier_aux

    ONLY            reduce using rule 31 (def_descriptions -> class_aux .)
    INDIVIDUALS     reduce using rule 31 (def_descriptions -> class_aux .)
    CLASS           reduce using rule 31 (def_descriptions -> class_aux .)
    $end            reduce using rule 31 (def_descriptions -> class_aux .)
    CLOSE_PAREN     reduce using rule 31 (def_descriptions -> class_aux .)
    SUBCLASSOF      reduce using rule 31 (def_descriptions -> class_aux .)
    CLASS_IDENTIFIER shift and go to state 46
    OPEN_PAREN      shift and go to state 27
    PROPERTY_IDENTIFIER shift and go to state 28

    class_aux                      shift and go to state 25
    def_descriptions               shift and go to state 45
    quantifier_aux                 shift and go to state 26

state 26

    (33) def_descriptions -> quantifier_aux .
    (34) def_descriptions -> quantifier_aux . def_descriptions
    (42) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (31) def_descriptions -> . class_aux
    (32) def_descriptions -> . class_aux def_descriptions
    (33) def_descriptions -> . quantifier_aux
    (34) def_descriptions -> . quantifier_aux def_descriptions
    (61) comma_and -> . COMMA
    (62) comma_and -> . AND
    (35) class_aux -> . CLASS_IDENTIFIER
    (36) class_aux -> . CLASS_IDENTIFIER OR class_aux
    (37) class_aux -> . CLASS_IDENTIFIER comma_and class_aux
    (38) class_aux -> . OPEN_PAREN class_aux CLOSE_PAREN
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (41) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (42) quantifier_aux -> . quantifier_aux comma_and quantifier_aux

    ONLY            reduce using rule 33 (def_descriptions -> quantifier_aux .)
    INDIVIDUALS     reduce using rule 33 (def_descriptions -> quantifier_aux .)
    CLASS           reduce using rule 33 (def_descriptions -> quantifier_aux .)
    $end            reduce using rule 33 (def_descriptions -> quantifier_aux .)
    CLOSE_PAREN     reduce using rule 33 (def_descriptions -> quantifier_aux .)
    SUBCLASSOF      reduce using rule 33 (def_descriptions -> quantifier_aux .)
    COMMA           shift and go to state 39
    AND             shift and go to state 40
    CLASS_IDENTIFIER shift and go to state 46
    OPEN_PAREN      shift and go to state 27
    PROPERTY_IDENTIFIER shift and go to state 28

    quantifier_aux                 shift and go to state 26
    def_descriptions               shift and go to state 47
    comma_and                      shift and go to state 48
    class_aux                      shift and go to state 25

state 27

    (38) class_aux -> OPEN_PAREN . class_aux CLOSE_PAREN
    (41) quantifier_aux -> OPEN_PAREN . quantifier_aux CLOSE_PAREN
    (35) class_aux -> . CLASS_IDENTIFIER
    (36) class_aux -> . CLASS_IDENTIFIER OR class_aux
    (37) class_aux -> . CLASS_IDENTIFIER comma_and class_aux
    (38) class_aux -> . OPEN_PAREN class_aux CLOSE_PAREN
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (41) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (42) quantifier_aux -> . quantifier_aux comma_and quantifier_aux

    CLASS_IDENTIFIER shift and go to state 46
    OPEN_PAREN      shift and go to state 27
    PROPERTY_IDENTIFIER shift and go to state 28

    class_aux                      shift and go to state 49
    quantifier_aux                 shift and go to state 50

state 28

    (39) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier CLASS_IDENTIFIER
    (40) quantifier_aux -> PROPERTY_IDENTIFIER . quantifier namespace_type
    (43) quantifier -> . SOME
    (44) quantifier -> . ALL
    (45) quantifier -> . VALUE
    (46) quantifier -> . MAX
    (47) quantifier -> . MIN
    (48) quantifier -> . EXACTLY
    (49) quantifier -> . THAT

    SOME            shift and go to state 52
    ALL             shift and go to state 53
    VALUE           shift and go to state 54
    MAX             shift and go to state 55
    MIN             shift and go to state 56
    EXACTLY         shift and go to state 57
    THAT            shift and go to state 58

    quantifier                     shift and go to state 51

state 29

    (15) defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section .

    CLASS           reduce using rule 15 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section .)
    $end            reduce using rule 15 (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section subclass_section individuals_section .)


state 30

    (57) individuals_section -> INDIVIDUALS . individuals
    (59) individuals -> . INDIVIDUAL_NAME
    (60) individuals -> . INDIVIDUAL_NAME COMMA individuals

    INDIVIDUAL_NAME shift and go to state 42

    individuals                    shift and go to state 59

state 31

    (58) individuals_section -> empty .

    CLASS           reduce using rule 58 (individuals_section -> empty .)
    $end            reduce using rule 58 (individuals_section -> empty .)


state 32

    (5) primitive_class -> CLASS CLASS_IDENTIFIER subclass_section closure_axiom disjoint_section . individuals_section
    (57) individuals_section -> . INDIVIDUALS individuals
    (58) individuals_section -> . empty
    (63) empty -> .

    INDIVIDUALS     shift and go to state 30
    CLASS           reduce using rule 63 (empty -> .)
    $end            reduce using rule 63 (empty -> .)

    individuals_section            shift and go to state 60
    empty                          shift and go to state 31

state 33

    (11) disjoint_section -> DISJOINTCLASSES . disjoint_classes_list
    (13) disjoint_classes_list -> . CLASS_IDENTIFIER
    (14) disjoint_classes_list -> . CLASS_IDENTIFIER COMMA disjoint_classes_list

    CLASS_IDENTIFIER shift and go to state 62

    disjoint_classes_list          shift and go to state 61

state 34

    (12) disjoint_section -> empty .

    INDIVIDUALS     reduce using rule 12 (disjoint_section -> empty .)
    CLASS           reduce using rule 12 (disjoint_section -> empty .)
    $end            reduce using rule 12 (disjoint_section -> empty .)


state 35

    (20) closure_axiom -> ONLY OPEN_PAREN . def_descriptions CLOSE_PAREN
    (31) def_descriptions -> . class_aux
    (32) def_descriptions -> . class_aux def_descriptions
    (33) def_descriptions -> . quantifier_aux
    (34) def_descriptions -> . quantifier_aux def_descriptions
    (35) class_aux -> . CLASS_IDENTIFIER
    (36) class_aux -> . CLASS_IDENTIFIER OR class_aux
    (37) class_aux -> . CLASS_IDENTIFIER comma_and class_aux
    (38) class_aux -> . OPEN_PAREN class_aux CLOSE_PAREN
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (41) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (42) quantifier_aux -> . quantifier_aux comma_and quantifier_aux

    CLASS_IDENTIFIER shift and go to state 46
    OPEN_PAREN      shift and go to state 27
    PROPERTY_IDENTIFIER shift and go to state 28

    def_descriptions               shift and go to state 63
    class_aux                      shift and go to state 25
    quantifier_aux                 shift and go to state 26

state 36

    (27) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER comma_and . def_descriptions
    (24) ani_abertura -> comma_and . OPEN_PAREN def_descriptions CLOSE_PAREN quantifier ani_abertura
    (25) ani_abertura -> comma_and . OPEN_PAREN def_descriptions CLOSE_PAREN
    (31) def_descriptions -> . class_aux
    (32) def_descriptions -> . class_aux def_descriptions
    (33) def_descriptions -> . quantifier_aux
    (34) def_descriptions -> . quantifier_aux def_descriptions
    (35) class_aux -> . CLASS_IDENTIFIER
    (36) class_aux -> . CLASS_IDENTIFIER OR class_aux
    (37) class_aux -> . CLASS_IDENTIFIER comma_and class_aux
    (38) class_aux -> . OPEN_PAREN class_aux CLOSE_PAREN
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (41) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (42) quantifier_aux -> . quantifier_aux comma_and quantifier_aux

    OPEN_PAREN      shift and go to state 65
    CLASS_IDENTIFIER shift and go to state 46
    PROPERTY_IDENTIFIER shift and go to state 28

    def_descriptions               shift and go to state 64
    class_aux                      shift and go to state 25
    quantifier_aux                 shift and go to state 26

state 37

    (18) covered_class -> CLASS_IDENTIFIER OR . covered_class
    (18) covered_class -> . CLASS_IDENTIFIER OR covered_class
    (19) covered_class -> . CLASS_IDENTIFIER

    CLASS_IDENTIFIER shift and go to state 66

    covered_class                  shift and go to state 67

state 38

    (26) aninhada -> CLASS_IDENTIFIER ani_abertura .

    SUBCLASSOF      reduce using rule 26 (aninhada -> CLASS_IDENTIFIER ani_abertura .)
    INDIVIDUALS     reduce using rule 26 (aninhada -> CLASS_IDENTIFIER ani_abertura .)
    CLASS           reduce using rule 26 (aninhada -> CLASS_IDENTIFIER ani_abertura .)
    $end            reduce using rule 26 (aninhada -> CLASS_IDENTIFIER ani_abertura .)


state 39

    (61) comma_and -> COMMA .

    OPEN_PAREN      reduce using rule 61 (comma_and -> COMMA .)
    CLASS_IDENTIFIER reduce using rule 61 (comma_and -> COMMA .)
    PROPERTY_IDENTIFIER reduce using rule 61 (comma_and -> COMMA .)


state 40

    (62) comma_and -> AND .

    OPEN_PAREN      reduce using rule 62 (comma_and -> AND .)
    CLASS_IDENTIFIER reduce using rule 62 (comma_and -> AND .)
    PROPERTY_IDENTIFIER reduce using rule 62 (comma_and -> AND .)


state 41

    (17) enum_class -> OPEN_CURLY individuals . CLOSE_CURLY

    CLOSE_CURLY     shift and go to state 68


state 42

    (59) individuals -> INDIVIDUAL_NAME .
    (60) individuals -> INDIVIDUAL_NAME . COMMA individuals

    CLOSE_CURLY     reduce using rule 59 (individuals -> INDIVIDUAL_NAME .)
    CLASS           reduce using rule 59 (individuals -> INDIVIDUAL_NAME .)
    $end            reduce using rule 59 (individuals -> INDIVIDUAL_NAME .)
    COMMA           shift and go to state 69


state 43

    (18) covered_class -> CLASS_IDENTIFIER OR . covered_class
    (36) class_aux -> CLASS_IDENTIFIER OR . class_aux
    (18) covered_class -> . CLASS_IDENTIFIER OR covered_class
    (19) covered_class -> . CLASS_IDENTIFIER
    (35) class_aux -> . CLASS_IDENTIFIER
    (36) class_aux -> . CLASS_IDENTIFIER OR class_aux
    (37) class_aux -> . CLASS_IDENTIFIER comma_and class_aux
    (38) class_aux -> . OPEN_PAREN class_aux CLOSE_PAREN

    CLASS_IDENTIFIER shift and go to state 70
    OPEN_PAREN      shift and go to state 72

    covered_class                  shift and go to state 67
    class_aux                      shift and go to state 71

state 44

    (37) class_aux -> CLASS_IDENTIFIER comma_and . class_aux
    (35) class_aux -> . CLASS_IDENTIFIER
    (36) class_aux -> . CLASS_IDENTIFIER OR class_aux
    (37) class_aux -> . CLASS_IDENTIFIER comma_and class_aux
    (38) class_aux -> . OPEN_PAREN class_aux CLOSE_PAREN

    CLASS_IDENTIFIER shift and go to state 46
    OPEN_PAREN      shift and go to state 72

    class_aux                      shift and go to state 73

state 45

    (32) def_descriptions -> class_aux def_descriptions .

    ONLY            reduce using rule 32 (def_descriptions -> class_aux def_descriptions .)
    INDIVIDUALS     reduce using rule 32 (def_descriptions -> class_aux def_descriptions .)
    CLASS           reduce using rule 32 (def_descriptions -> class_aux def_descriptions .)
    $end            reduce using rule 32 (def_descriptions -> class_aux def_descriptions .)
    CLOSE_PAREN     reduce using rule 32 (def_descriptions -> class_aux def_descriptions .)
    SUBCLASSOF      reduce using rule 32 (def_descriptions -> class_aux def_descriptions .)


state 46

    (35) class_aux -> CLASS_IDENTIFIER .
    (36) class_aux -> CLASS_IDENTIFIER . OR class_aux
    (37) class_aux -> CLASS_IDENTIFIER . comma_and class_aux
    (61) comma_and -> . COMMA
    (62) comma_and -> . AND

    CLASS_IDENTIFIER reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .)
    OPEN_PAREN      reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .)
    PROPERTY_IDENTIFIER reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .)
    ONLY            reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .)
    CLASS           reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .)
    $end            reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .)
    SUBCLASSOF      reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .)
    OR              shift and go to state 74
    COMMA           shift and go to state 39
    AND             shift and go to state 40

    comma_and                      shift and go to state 44

state 47

    (34) def_descriptions -> quantifier_aux def_descriptions .

    ONLY            reduce using rule 34 (def_descriptions -> quantifier_aux def_descriptions .)
    INDIVIDUALS     reduce using rule 34 (def_descriptions -> quantifier_aux def_descriptions .)
    CLASS           reduce using rule 34 (def_descriptions -> quantifier_aux def_descriptions .)
    $end            reduce using rule 34 (def_descriptions -> quantifier_aux def_descriptions .)
    CLOSE_PAREN     reduce using rule 34 (def_descriptions -> quantifier_aux def_descriptions .)
    SUBCLASSOF      reduce using rule 34 (def_descriptions -> quantifier_aux def_descriptions .)


state 48

    (42) quantifier_aux -> quantifier_aux comma_and . quantifier_aux
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (41) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (42) quantifier_aux -> . quantifier_aux comma_and quantifier_aux

    PROPERTY_IDENTIFIER shift and go to state 28
    OPEN_PAREN      shift and go to state 76

    quantifier_aux                 shift and go to state 75

state 49

    (38) class_aux -> OPEN_PAREN class_aux . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 77


state 50

    (41) quantifier_aux -> OPEN_PAREN quantifier_aux . CLOSE_PAREN
    (42) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (61) comma_and -> . COMMA
    (62) comma_and -> . AND

    CLOSE_PAREN     shift and go to state 78
    COMMA           shift and go to state 39
    AND             shift and go to state 40

    comma_and                      shift and go to state 48

state 51

    (39) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . CLASS_IDENTIFIER
    (40) quantifier_aux -> PROPERTY_IDENTIFIER quantifier . namespace_type
    (55) namespace_type -> . NAMESPACE TYPE
    (56) namespace_type -> . NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET

    CLASS_IDENTIFIER shift and go to state 79
    NAMESPACE       shift and go to state 81

    namespace_type                 shift and go to state 80

state 52

    (43) quantifier -> SOME .

    CLASS_IDENTIFIER reduce using rule 43 (quantifier -> SOME .)
    NAMESPACE       reduce using rule 43 (quantifier -> SOME .)
    COMMA           reduce using rule 43 (quantifier -> SOME .)
    AND             reduce using rule 43 (quantifier -> SOME .)


state 53

    (44) quantifier -> ALL .

    CLASS_IDENTIFIER reduce using rule 44 (quantifier -> ALL .)
    NAMESPACE       reduce using rule 44 (quantifier -> ALL .)
    COMMA           reduce using rule 44 (quantifier -> ALL .)
    AND             reduce using rule 44 (quantifier -> ALL .)


state 54

    (45) quantifier -> VALUE .

    CLASS_IDENTIFIER reduce using rule 45 (quantifier -> VALUE .)
    NAMESPACE       reduce using rule 45 (quantifier -> VALUE .)
    COMMA           reduce using rule 45 (quantifier -> VALUE .)
    AND             reduce using rule 45 (quantifier -> VALUE .)


state 55

    (46) quantifier -> MAX .

    CLASS_IDENTIFIER reduce using rule 46 (quantifier -> MAX .)
    NAMESPACE       reduce using rule 46 (quantifier -> MAX .)
    COMMA           reduce using rule 46 (quantifier -> MAX .)
    AND             reduce using rule 46 (quantifier -> MAX .)


state 56

    (47) quantifier -> MIN .

    CLASS_IDENTIFIER reduce using rule 47 (quantifier -> MIN .)
    NAMESPACE       reduce using rule 47 (quantifier -> MIN .)
    COMMA           reduce using rule 47 (quantifier -> MIN .)
    AND             reduce using rule 47 (quantifier -> MIN .)


state 57

    (48) quantifier -> EXACTLY .

    CLASS_IDENTIFIER reduce using rule 48 (quantifier -> EXACTLY .)
    NAMESPACE       reduce using rule 48 (quantifier -> EXACTLY .)
    COMMA           reduce using rule 48 (quantifier -> EXACTLY .)
    AND             reduce using rule 48 (quantifier -> EXACTLY .)


state 58

    (49) quantifier -> THAT .

    CLASS_IDENTIFIER reduce using rule 49 (quantifier -> THAT .)
    NAMESPACE       reduce using rule 49 (quantifier -> THAT .)
    COMMA           reduce using rule 49 (quantifier -> THAT .)
    AND             reduce using rule 49 (quantifier -> THAT .)


state 59

    (57) individuals_section -> INDIVIDUALS individuals .

    CLASS           reduce using rule 57 (individuals_section -> INDIVIDUALS individuals .)
    $end            reduce using rule 57 (individuals_section -> INDIVIDUALS individuals .)


state 60

    (5) primitive_class -> CLASS CLASS_IDENTIFIER subclass_section closure_axiom disjoint_section individuals_section .

    CLASS           reduce using rule 5 (primitive_class -> CLASS CLASS_IDENTIFIER subclass_section closure_axiom disjoint_section individuals_section .)
    $end            reduce using rule 5 (primitive_class -> CLASS CLASS_IDENTIFIER subclass_section closure_axiom disjoint_section individuals_section .)


state 61

    (11) disjoint_section -> DISJOINTCLASSES disjoint_classes_list .

    INDIVIDUALS     reduce using rule 11 (disjoint_section -> DISJOINTCLASSES disjoint_classes_list .)
    CLASS           reduce using rule 11 (disjoint_section -> DISJOINTCLASSES disjoint_classes_list .)
    $end            reduce using rule 11 (disjoint_section -> DISJOINTCLASSES disjoint_classes_list .)


state 62

    (13) disjoint_classes_list -> CLASS_IDENTIFIER .
    (14) disjoint_classes_list -> CLASS_IDENTIFIER . COMMA disjoint_classes_list

    INDIVIDUALS     reduce using rule 13 (disjoint_classes_list -> CLASS_IDENTIFIER .)
    CLASS           reduce using rule 13 (disjoint_classes_list -> CLASS_IDENTIFIER .)
    $end            reduce using rule 13 (disjoint_classes_list -> CLASS_IDENTIFIER .)
    COMMA           shift and go to state 82


state 63

    (20) closure_axiom -> ONLY OPEN_PAREN def_descriptions . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 83


state 64

    (27) equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions .

    SUBCLASSOF      reduce using rule 27 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions .)
    INDIVIDUALS     reduce using rule 27 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions .)
    CLASS           reduce using rule 27 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions .)
    $end            reduce using rule 27 (equivalentto_section -> EQUIVALENTTO CLASS_IDENTIFIER comma_and def_descriptions .)


state 65

    (24) ani_abertura -> comma_and OPEN_PAREN . def_descriptions CLOSE_PAREN quantifier ani_abertura
    (25) ani_abertura -> comma_and OPEN_PAREN . def_descriptions CLOSE_PAREN
    (38) class_aux -> OPEN_PAREN . class_aux CLOSE_PAREN
    (41) quantifier_aux -> OPEN_PAREN . quantifier_aux CLOSE_PAREN
    (31) def_descriptions -> . class_aux
    (32) def_descriptions -> . class_aux def_descriptions
    (33) def_descriptions -> . quantifier_aux
    (34) def_descriptions -> . quantifier_aux def_descriptions
    (35) class_aux -> . CLASS_IDENTIFIER
    (36) class_aux -> . CLASS_IDENTIFIER OR class_aux
    (37) class_aux -> . CLASS_IDENTIFIER comma_and class_aux
    (38) class_aux -> . OPEN_PAREN class_aux CLOSE_PAREN
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (41) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (42) quantifier_aux -> . quantifier_aux comma_and quantifier_aux

    CLASS_IDENTIFIER shift and go to state 46
    OPEN_PAREN      shift and go to state 27
    PROPERTY_IDENTIFIER shift and go to state 28

    def_descriptions               shift and go to state 84
    class_aux                      shift and go to state 85
    quantifier_aux                 shift and go to state 86

state 66

    (18) covered_class -> CLASS_IDENTIFIER . OR covered_class
    (19) covered_class -> CLASS_IDENTIFIER .

    OR              shift and go to state 37
    SUBCLASSOF      reduce using rule 19 (covered_class -> CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 19 (covered_class -> CLASS_IDENTIFIER .)
    CLASS           reduce using rule 19 (covered_class -> CLASS_IDENTIFIER .)
    $end            reduce using rule 19 (covered_class -> CLASS_IDENTIFIER .)


state 67

    (18) covered_class -> CLASS_IDENTIFIER OR covered_class .

    SUBCLASSOF      reduce using rule 18 (covered_class -> CLASS_IDENTIFIER OR covered_class .)
    INDIVIDUALS     reduce using rule 18 (covered_class -> CLASS_IDENTIFIER OR covered_class .)
    CLASS           reduce using rule 18 (covered_class -> CLASS_IDENTIFIER OR covered_class .)
    $end            reduce using rule 18 (covered_class -> CLASS_IDENTIFIER OR covered_class .)
    ONLY            reduce using rule 18 (covered_class -> CLASS_IDENTIFIER OR covered_class .)


state 68

    (17) enum_class -> OPEN_CURLY individuals CLOSE_CURLY .

    SUBCLASSOF      reduce using rule 17 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)
    INDIVIDUALS     reduce using rule 17 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)
    CLASS           reduce using rule 17 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)
    $end            reduce using rule 17 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)
    ONLY            reduce using rule 17 (enum_class -> OPEN_CURLY individuals CLOSE_CURLY .)


state 69

    (60) individuals -> INDIVIDUAL_NAME COMMA . individuals
    (59) individuals -> . INDIVIDUAL_NAME
    (60) individuals -> . INDIVIDUAL_NAME COMMA individuals

    INDIVIDUAL_NAME shift and go to state 42

    individuals                    shift and go to state 87

state 70

    (18) covered_class -> CLASS_IDENTIFIER . OR covered_class
    (19) covered_class -> CLASS_IDENTIFIER .
    (35) class_aux -> CLASS_IDENTIFIER .
    (36) class_aux -> CLASS_IDENTIFIER . OR class_aux
    (37) class_aux -> CLASS_IDENTIFIER . comma_and class_aux
    (61) comma_and -> . COMMA
    (62) comma_and -> . AND

  ! reduce/reduce conflict for ONLY resolved using rule 19 (covered_class -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for INDIVIDUALS resolved using rule 19 (covered_class -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 19 (covered_class -> CLASS_IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 19 (covered_class -> CLASS_IDENTIFIER .)
    OR              shift and go to state 43
    ONLY            reduce using rule 19 (covered_class -> CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 19 (covered_class -> CLASS_IDENTIFIER .)
    CLASS           reduce using rule 19 (covered_class -> CLASS_IDENTIFIER .)
    $end            reduce using rule 19 (covered_class -> CLASS_IDENTIFIER .)
    CLASS_IDENTIFIER reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .)
    OPEN_PAREN      reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .)
    PROPERTY_IDENTIFIER reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .)
    COMMA           shift and go to state 39
    AND             shift and go to state 40

  ! ONLY            [ reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .) ]
  ! INDIVIDUALS     [ reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .) ]
  ! $end            [ reduce using rule 35 (class_aux -> CLASS_IDENTIFIER .) ]

    comma_and                      shift and go to state 44

state 71

    (36) class_aux -> CLASS_IDENTIFIER OR class_aux .

    CLASS_IDENTIFIER reduce using rule 36 (class_aux -> CLASS_IDENTIFIER OR class_aux .)
    OPEN_PAREN      reduce using rule 36 (class_aux -> CLASS_IDENTIFIER OR class_aux .)
    PROPERTY_IDENTIFIER reduce using rule 36 (class_aux -> CLASS_IDENTIFIER OR class_aux .)
    ONLY            reduce using rule 36 (class_aux -> CLASS_IDENTIFIER OR class_aux .)
    INDIVIDUALS     reduce using rule 36 (class_aux -> CLASS_IDENTIFIER OR class_aux .)
    CLASS           reduce using rule 36 (class_aux -> CLASS_IDENTIFIER OR class_aux .)
    $end            reduce using rule 36 (class_aux -> CLASS_IDENTIFIER OR class_aux .)
    CLOSE_PAREN     reduce using rule 36 (class_aux -> CLASS_IDENTIFIER OR class_aux .)
    SUBCLASSOF      reduce using rule 36 (class_aux -> CLASS_IDENTIFIER OR class_aux .)


state 72

    (38) class_aux -> OPEN_PAREN . class_aux CLOSE_PAREN
    (35) class_aux -> . CLASS_IDENTIFIER
    (36) class_aux -> . CLASS_IDENTIFIER OR class_aux
    (37) class_aux -> . CLASS_IDENTIFIER comma_and class_aux
    (38) class_aux -> . OPEN_PAREN class_aux CLOSE_PAREN

    CLASS_IDENTIFIER shift and go to state 46
    OPEN_PAREN      shift and go to state 72

    class_aux                      shift and go to state 49

state 73

    (37) class_aux -> CLASS_IDENTIFIER comma_and class_aux .

    CLASS_IDENTIFIER reduce using rule 37 (class_aux -> CLASS_IDENTIFIER comma_and class_aux .)
    OPEN_PAREN      reduce using rule 37 (class_aux -> CLASS_IDENTIFIER comma_and class_aux .)
    PROPERTY_IDENTIFIER reduce using rule 37 (class_aux -> CLASS_IDENTIFIER comma_and class_aux .)
    ONLY            reduce using rule 37 (class_aux -> CLASS_IDENTIFIER comma_and class_aux .)
    INDIVIDUALS     reduce using rule 37 (class_aux -> CLASS_IDENTIFIER comma_and class_aux .)
    CLASS           reduce using rule 37 (class_aux -> CLASS_IDENTIFIER comma_and class_aux .)
    $end            reduce using rule 37 (class_aux -> CLASS_IDENTIFIER comma_and class_aux .)
    CLOSE_PAREN     reduce using rule 37 (class_aux -> CLASS_IDENTIFIER comma_and class_aux .)
    SUBCLASSOF      reduce using rule 37 (class_aux -> CLASS_IDENTIFIER comma_and class_aux .)


state 74

    (36) class_aux -> CLASS_IDENTIFIER OR . class_aux
    (35) class_aux -> . CLASS_IDENTIFIER
    (36) class_aux -> . CLASS_IDENTIFIER OR class_aux
    (37) class_aux -> . CLASS_IDENTIFIER comma_and class_aux
    (38) class_aux -> . OPEN_PAREN class_aux CLOSE_PAREN

    CLASS_IDENTIFIER shift and go to state 46
    OPEN_PAREN      shift and go to state 72

    class_aux                      shift and go to state 71

state 75

    (42) quantifier_aux -> quantifier_aux comma_and quantifier_aux .
    (42) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (61) comma_and -> . COMMA
    (62) comma_and -> . AND

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    CLASS_IDENTIFIER reduce using rule 42 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    OPEN_PAREN      reduce using rule 42 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    PROPERTY_IDENTIFIER reduce using rule 42 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    ONLY            reduce using rule 42 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    INDIVIDUALS     reduce using rule 42 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    CLASS           reduce using rule 42 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    $end            reduce using rule 42 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    CLOSE_PAREN     reduce using rule 42 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    SUBCLASSOF      reduce using rule 42 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .)
    COMMA           shift and go to state 39
    AND             shift and go to state 40

  ! COMMA           [ reduce using rule 42 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .) ]
  ! AND             [ reduce using rule 42 (quantifier_aux -> quantifier_aux comma_and quantifier_aux .) ]

    comma_and                      shift and go to state 48

state 76

    (41) quantifier_aux -> OPEN_PAREN . quantifier_aux CLOSE_PAREN
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (41) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (42) quantifier_aux -> . quantifier_aux comma_and quantifier_aux

    PROPERTY_IDENTIFIER shift and go to state 28
    OPEN_PAREN      shift and go to state 76

    quantifier_aux                 shift and go to state 50

state 77

    (38) class_aux -> OPEN_PAREN class_aux CLOSE_PAREN .

    CLASS_IDENTIFIER reduce using rule 38 (class_aux -> OPEN_PAREN class_aux CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 38 (class_aux -> OPEN_PAREN class_aux CLOSE_PAREN .)
    PROPERTY_IDENTIFIER reduce using rule 38 (class_aux -> OPEN_PAREN class_aux CLOSE_PAREN .)
    ONLY            reduce using rule 38 (class_aux -> OPEN_PAREN class_aux CLOSE_PAREN .)
    INDIVIDUALS     reduce using rule 38 (class_aux -> OPEN_PAREN class_aux CLOSE_PAREN .)
    CLASS           reduce using rule 38 (class_aux -> OPEN_PAREN class_aux CLOSE_PAREN .)
    $end            reduce using rule 38 (class_aux -> OPEN_PAREN class_aux CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 38 (class_aux -> OPEN_PAREN class_aux CLOSE_PAREN .)
    SUBCLASSOF      reduce using rule 38 (class_aux -> OPEN_PAREN class_aux CLOSE_PAREN .)


state 78

    (41) quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .

    COMMA           reduce using rule 41 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    AND             reduce using rule 41 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    CLASS_IDENTIFIER reduce using rule 41 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 41 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    PROPERTY_IDENTIFIER reduce using rule 41 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    ONLY            reduce using rule 41 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    INDIVIDUALS     reduce using rule 41 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    CLASS           reduce using rule 41 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    $end            reduce using rule 41 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 41 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)
    SUBCLASSOF      reduce using rule 41 (quantifier_aux -> OPEN_PAREN quantifier_aux CLOSE_PAREN .)


state 79

    (39) quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .

    COMMA           reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    AND             reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    CLASS_IDENTIFIER reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    OPEN_PAREN      reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    PROPERTY_IDENTIFIER reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    ONLY            reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    INDIVIDUALS     reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    CLASS           reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    $end            reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    CLOSE_PAREN     reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)
    SUBCLASSOF      reduce using rule 39 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER .)


state 80

    (40) quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .

    COMMA           reduce using rule 40 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    AND             reduce using rule 40 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    CLASS_IDENTIFIER reduce using rule 40 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    OPEN_PAREN      reduce using rule 40 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    PROPERTY_IDENTIFIER reduce using rule 40 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    ONLY            reduce using rule 40 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    INDIVIDUALS     reduce using rule 40 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    CLASS           reduce using rule 40 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    $end            reduce using rule 40 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    CLOSE_PAREN     reduce using rule 40 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)
    SUBCLASSOF      reduce using rule 40 (quantifier_aux -> PROPERTY_IDENTIFIER quantifier namespace_type .)


state 81

    (55) namespace_type -> NAMESPACE . TYPE
    (56) namespace_type -> NAMESPACE . TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET

    TYPE            shift and go to state 88


state 82

    (14) disjoint_classes_list -> CLASS_IDENTIFIER COMMA . disjoint_classes_list
    (13) disjoint_classes_list -> . CLASS_IDENTIFIER
    (14) disjoint_classes_list -> . CLASS_IDENTIFIER COMMA disjoint_classes_list

    CLASS_IDENTIFIER shift and go to state 62

    disjoint_classes_list          shift and go to state 89

state 83

    (20) closure_axiom -> ONLY OPEN_PAREN def_descriptions CLOSE_PAREN .

    DISJOINTCLASSES reduce using rule 20 (closure_axiom -> ONLY OPEN_PAREN def_descriptions CLOSE_PAREN .)
    INDIVIDUALS     reduce using rule 20 (closure_axiom -> ONLY OPEN_PAREN def_descriptions CLOSE_PAREN .)
    CLASS           reduce using rule 20 (closure_axiom -> ONLY OPEN_PAREN def_descriptions CLOSE_PAREN .)
    $end            reduce using rule 20 (closure_axiom -> ONLY OPEN_PAREN def_descriptions CLOSE_PAREN .)


state 84

    (24) ani_abertura -> comma_and OPEN_PAREN def_descriptions . CLOSE_PAREN quantifier ani_abertura
    (25) ani_abertura -> comma_and OPEN_PAREN def_descriptions . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 90


state 85

    (38) class_aux -> OPEN_PAREN class_aux . CLOSE_PAREN
    (31) def_descriptions -> class_aux .
    (32) def_descriptions -> class_aux . def_descriptions
    (31) def_descriptions -> . class_aux
    (32) def_descriptions -> . class_aux def_descriptions
    (33) def_descriptions -> . quantifier_aux
    (34) def_descriptions -> . quantifier_aux def_descriptions
    (35) class_aux -> . CLASS_IDENTIFIER
    (36) class_aux -> . CLASS_IDENTIFIER OR class_aux
    (37) class_aux -> . CLASS_IDENTIFIER comma_and class_aux
    (38) class_aux -> . OPEN_PAREN class_aux CLOSE_PAREN
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (41) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (42) quantifier_aux -> . quantifier_aux comma_and quantifier_aux

  ! shift/reduce conflict for CLOSE_PAREN resolved as shift
    CLOSE_PAREN     shift and go to state 77
    CLASS_IDENTIFIER shift and go to state 46
    OPEN_PAREN      shift and go to state 27
    PROPERTY_IDENTIFIER shift and go to state 28

  ! CLOSE_PAREN     [ reduce using rule 31 (def_descriptions -> class_aux .) ]

    class_aux                      shift and go to state 25
    def_descriptions               shift and go to state 45
    quantifier_aux                 shift and go to state 26

state 86

    (41) quantifier_aux -> OPEN_PAREN quantifier_aux . CLOSE_PAREN
    (33) def_descriptions -> quantifier_aux .
    (34) def_descriptions -> quantifier_aux . def_descriptions
    (42) quantifier_aux -> quantifier_aux . comma_and quantifier_aux
    (31) def_descriptions -> . class_aux
    (32) def_descriptions -> . class_aux def_descriptions
    (33) def_descriptions -> . quantifier_aux
    (34) def_descriptions -> . quantifier_aux def_descriptions
    (61) comma_and -> . COMMA
    (62) comma_and -> . AND
    (35) class_aux -> . CLASS_IDENTIFIER
    (36) class_aux -> . CLASS_IDENTIFIER OR class_aux
    (37) class_aux -> . CLASS_IDENTIFIER comma_and class_aux
    (38) class_aux -> . OPEN_PAREN class_aux CLOSE_PAREN
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (41) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (42) quantifier_aux -> . quantifier_aux comma_and quantifier_aux

  ! shift/reduce conflict for CLOSE_PAREN resolved as shift
    CLOSE_PAREN     shift and go to state 78
    COMMA           shift and go to state 39
    AND             shift and go to state 40
    CLASS_IDENTIFIER shift and go to state 46
    OPEN_PAREN      shift and go to state 27
    PROPERTY_IDENTIFIER shift and go to state 28

  ! CLOSE_PAREN     [ reduce using rule 33 (def_descriptions -> quantifier_aux .) ]

    quantifier_aux                 shift and go to state 26
    def_descriptions               shift and go to state 47
    comma_and                      shift and go to state 48
    class_aux                      shift and go to state 25

state 87

    (60) individuals -> INDIVIDUAL_NAME COMMA individuals .

    CLOSE_CURLY     reduce using rule 60 (individuals -> INDIVIDUAL_NAME COMMA individuals .)
    CLASS           reduce using rule 60 (individuals -> INDIVIDUAL_NAME COMMA individuals .)
    $end            reduce using rule 60 (individuals -> INDIVIDUAL_NAME COMMA individuals .)


state 88

    (55) namespace_type -> NAMESPACE TYPE .
    (56) namespace_type -> NAMESPACE TYPE . OPEN_BRACKET sizecheck CLOSE_BRACKET

    COMMA           reduce using rule 55 (namespace_type -> NAMESPACE TYPE .)
    AND             reduce using rule 55 (namespace_type -> NAMESPACE TYPE .)
    CLASS_IDENTIFIER reduce using rule 55 (namespace_type -> NAMESPACE TYPE .)
    OPEN_PAREN      reduce using rule 55 (namespace_type -> NAMESPACE TYPE .)
    PROPERTY_IDENTIFIER reduce using rule 55 (namespace_type -> NAMESPACE TYPE .)
    ONLY            reduce using rule 55 (namespace_type -> NAMESPACE TYPE .)
    INDIVIDUALS     reduce using rule 55 (namespace_type -> NAMESPACE TYPE .)
    CLASS           reduce using rule 55 (namespace_type -> NAMESPACE TYPE .)
    $end            reduce using rule 55 (namespace_type -> NAMESPACE TYPE .)
    CLOSE_PAREN     reduce using rule 55 (namespace_type -> NAMESPACE TYPE .)
    SUBCLASSOF      reduce using rule 55 (namespace_type -> NAMESPACE TYPE .)
    OPEN_BRACKET    shift and go to state 91


state 89

    (14) disjoint_classes_list -> CLASS_IDENTIFIER COMMA disjoint_classes_list .

    INDIVIDUALS     reduce using rule 14 (disjoint_classes_list -> CLASS_IDENTIFIER COMMA disjoint_classes_list .)
    CLASS           reduce using rule 14 (disjoint_classes_list -> CLASS_IDENTIFIER COMMA disjoint_classes_list .)
    $end            reduce using rule 14 (disjoint_classes_list -> CLASS_IDENTIFIER COMMA disjoint_classes_list .)


state 90

    (24) ani_abertura -> comma_and OPEN_PAREN def_descriptions CLOSE_PAREN . quantifier ani_abertura
    (25) ani_abertura -> comma_and OPEN_PAREN def_descriptions CLOSE_PAREN .
    (43) quantifier -> . SOME
    (44) quantifier -> . ALL
    (45) quantifier -> . VALUE
    (46) quantifier -> . MAX
    (47) quantifier -> . MIN
    (48) quantifier -> . EXACTLY
    (49) quantifier -> . THAT

    SUBCLASSOF      reduce using rule 25 (ani_abertura -> comma_and OPEN_PAREN def_descriptions CLOSE_PAREN .)
    INDIVIDUALS     reduce using rule 25 (ani_abertura -> comma_and OPEN_PAREN def_descriptions CLOSE_PAREN .)
    CLASS           reduce using rule 25 (ani_abertura -> comma_and OPEN_PAREN def_descriptions CLOSE_PAREN .)
    $end            reduce using rule 25 (ani_abertura -> comma_and OPEN_PAREN def_descriptions CLOSE_PAREN .)
    SOME            shift and go to state 52
    ALL             shift and go to state 53
    VALUE           shift and go to state 54
    MAX             shift and go to state 55
    MIN             shift and go to state 56
    EXACTLY         shift and go to state 57
    THAT            shift and go to state 58

    quantifier                     shift and go to state 92

state 91

    (56) namespace_type -> NAMESPACE TYPE OPEN_BRACKET . sizecheck CLOSE_BRACKET
    (50) sizecheck -> . EQUAL CARDINALITY
    (51) sizecheck -> . GREATER_THAN CARDINALITY
    (52) sizecheck -> . LESS_THAN CARDINALITY
    (53) sizecheck -> . GREATER_THAN EQUAL CARDINALITY
    (54) sizecheck -> . LESS_THAN EQUAL CARDINALITY

    EQUAL           shift and go to state 94
    GREATER_THAN    shift and go to state 95
    LESS_THAN       shift and go to state 96

    sizecheck                      shift and go to state 93

state 92

    (24) ani_abertura -> comma_and OPEN_PAREN def_descriptions CLOSE_PAREN quantifier . ani_abertura
    (24) ani_abertura -> . comma_and OPEN_PAREN def_descriptions CLOSE_PAREN quantifier ani_abertura
    (25) ani_abertura -> . comma_and OPEN_PAREN def_descriptions CLOSE_PAREN
    (61) comma_and -> . COMMA
    (62) comma_and -> . AND

    COMMA           shift and go to state 39
    AND             shift and go to state 40

    comma_and                      shift and go to state 97
    ani_abertura                   shift and go to state 98

state 93

    (56) namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 99


state 94

    (50) sizecheck -> EQUAL . CARDINALITY

    CARDINALITY     shift and go to state 100


state 95

    (51) sizecheck -> GREATER_THAN . CARDINALITY
    (53) sizecheck -> GREATER_THAN . EQUAL CARDINALITY

    CARDINALITY     shift and go to state 101
    EQUAL           shift and go to state 102


state 96

    (52) sizecheck -> LESS_THAN . CARDINALITY
    (54) sizecheck -> LESS_THAN . EQUAL CARDINALITY

    CARDINALITY     shift and go to state 103
    EQUAL           shift and go to state 104


state 97

    (24) ani_abertura -> comma_and . OPEN_PAREN def_descriptions CLOSE_PAREN quantifier ani_abertura
    (25) ani_abertura -> comma_and . OPEN_PAREN def_descriptions CLOSE_PAREN

    OPEN_PAREN      shift and go to state 105


state 98

    (24) ani_abertura -> comma_and OPEN_PAREN def_descriptions CLOSE_PAREN quantifier ani_abertura .

    SUBCLASSOF      reduce using rule 24 (ani_abertura -> comma_and OPEN_PAREN def_descriptions CLOSE_PAREN quantifier ani_abertura .)
    INDIVIDUALS     reduce using rule 24 (ani_abertura -> comma_and OPEN_PAREN def_descriptions CLOSE_PAREN quantifier ani_abertura .)
    CLASS           reduce using rule 24 (ani_abertura -> comma_and OPEN_PAREN def_descriptions CLOSE_PAREN quantifier ani_abertura .)
    $end            reduce using rule 24 (ani_abertura -> comma_and OPEN_PAREN def_descriptions CLOSE_PAREN quantifier ani_abertura .)


state 99

    (56) namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .

    COMMA           reduce using rule 56 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    AND             reduce using rule 56 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    CLASS_IDENTIFIER reduce using rule 56 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    OPEN_PAREN      reduce using rule 56 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    PROPERTY_IDENTIFIER reduce using rule 56 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    ONLY            reduce using rule 56 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    INDIVIDUALS     reduce using rule 56 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    CLASS           reduce using rule 56 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    $end            reduce using rule 56 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    CLOSE_PAREN     reduce using rule 56 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)
    SUBCLASSOF      reduce using rule 56 (namespace_type -> NAMESPACE TYPE OPEN_BRACKET sizecheck CLOSE_BRACKET .)


state 100

    (50) sizecheck -> EQUAL CARDINALITY .

    CLOSE_BRACKET   reduce using rule 50 (sizecheck -> EQUAL CARDINALITY .)


state 101

    (51) sizecheck -> GREATER_THAN CARDINALITY .

    CLOSE_BRACKET   reduce using rule 51 (sizecheck -> GREATER_THAN CARDINALITY .)


state 102

    (53) sizecheck -> GREATER_THAN EQUAL . CARDINALITY

    CARDINALITY     shift and go to state 106


state 103

    (52) sizecheck -> LESS_THAN CARDINALITY .

    CLOSE_BRACKET   reduce using rule 52 (sizecheck -> LESS_THAN CARDINALITY .)


state 104

    (54) sizecheck -> LESS_THAN EQUAL . CARDINALITY

    CARDINALITY     shift and go to state 107


state 105

    (24) ani_abertura -> comma_and OPEN_PAREN . def_descriptions CLOSE_PAREN quantifier ani_abertura
    (25) ani_abertura -> comma_and OPEN_PAREN . def_descriptions CLOSE_PAREN
    (31) def_descriptions -> . class_aux
    (32) def_descriptions -> . class_aux def_descriptions
    (33) def_descriptions -> . quantifier_aux
    (34) def_descriptions -> . quantifier_aux def_descriptions
    (35) class_aux -> . CLASS_IDENTIFIER
    (36) class_aux -> . CLASS_IDENTIFIER OR class_aux
    (37) class_aux -> . CLASS_IDENTIFIER comma_and class_aux
    (38) class_aux -> . OPEN_PAREN class_aux CLOSE_PAREN
    (39) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier CLASS_IDENTIFIER
    (40) quantifier_aux -> . PROPERTY_IDENTIFIER quantifier namespace_type
    (41) quantifier_aux -> . OPEN_PAREN quantifier_aux CLOSE_PAREN
    (42) quantifier_aux -> . quantifier_aux comma_and quantifier_aux

    CLASS_IDENTIFIER shift and go to state 46
    OPEN_PAREN      shift and go to state 27
    PROPERTY_IDENTIFIER shift and go to state 28

    def_descriptions               shift and go to state 84
    class_aux                      shift and go to state 25
    quantifier_aux                 shift and go to state 26

state 106

    (53) sizecheck -> GREATER_THAN EQUAL CARDINALITY .

    CLOSE_BRACKET   reduce using rule 53 (sizecheck -> GREATER_THAN EQUAL CARDINALITY .)


state 107

    (54) sizecheck -> LESS_THAN EQUAL CARDINALITY .

    CLOSE_BRACKET   reduce using rule 54 (sizecheck -> LESS_THAN EQUAL CARDINALITY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 75 resolved as shift
WARNING: shift/reduce conflict for AND in state 75 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PAREN in state 85 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PAREN in state 86 resolved as shift
WARNING: reduce/reduce conflict in state 8 resolved using rule (defined_class -> CLASS CLASS_IDENTIFIER equivalentto_section)
WARNING: rejected rule (empty -> <empty>) in state 8
WARNING: reduce/reduce conflict in state 24 resolved using rule (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER)
WARNING: rejected rule (covered_class -> CLASS_IDENTIFIER) in state 24
WARNING: reduce/reduce conflict in state 24 resolved using rule (subclass_section -> SUBCLASSOF CLASS_IDENTIFIER)
WARNING: rejected rule (class_aux -> CLASS_IDENTIFIER) in state 24
WARNING: reduce/reduce conflict in state 70 resolved using rule (covered_class -> CLASS_IDENTIFIER)
WARNING: rejected rule (class_aux -> CLASS_IDENTIFIER) in state 70
